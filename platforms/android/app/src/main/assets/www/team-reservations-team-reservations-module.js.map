{"version":3,"sources":["./src/app/presentation/team/team-reservations/view.page.resolver.ts","./src/app/presentation/team/team-reservations/team-reservations-filters/team-reservations-filters-workplace/team-reservations-filter-workplace.component.ts","./src/app/presentation/team/team-reservations/team-reservations-filters/team-reservations-filters-workplace/team-reservations-filter-workplace.component.html","./src/app/presentation/reservations/enums/reservationStatus.enum.ts","./src/app/presentation/team/team-reservations/team-reservations.component.ts","./src/app/presentation/team/team-reservations/team-reservations.component.html","./src/app/presentation/team/team-reservations/view/view.component.ts","./src/app/presentation/team/team-reservations/view/view.component.html","./src/app/presentation/team/team-reservations/team-reservations-routing.module.ts","./src/app/presentation/team/team-reservations/team-reservations-filters/team-reservations-filters.utils.ts","./src/app/presentation/team/team-reservations/team-reservations.module.ts","./src/app/presentation/team/team-reservations/team-reservations-filters/team-reservations-filters-workplace/team-reservations-filter-workplace.service.ts","./src/app/presentation/team/team-reservations/team-reservations.service.ts","./src/app/presentation/team/team-reservations/view/view.service.ts","./src/app/presentation/reservations/utils/reservation.ts","./src/app/presentation/team/team-reservations/team-reservations.dictionary.ts","./src/app/presentation/team/team-reservations/team-reservations-filters/team-reservations-filters.service.ts","./src/app/presentation/team/team-reservations/team-reservations-filters/team-reservations-filters.component.ts","./src/app/presentation/team/team-reservations/team-reservations-filters/team-reservations-filters.component.html","./src/app/presentation/team/team-reservations/team-reservations-filters/team-reservations-filters-workplace/team-reservations-filter-workplace.utils.ts","./src/app/shared/common/utils/workplace.utils.ts"],"names":[],"mappings":"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","file":"team-reservations-team-reservations-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  Router, Resolve,\r\n  RouterStateSnapshot,\r\n  ActivatedRouteSnapshot\r\n} from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ViewPageResolver implements Resolve<string> {\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<string> {\r\n    return of(`Бронь #${route.params.id}`);\r\n  }\r\n}\r\n","import {ChangeDetectionStrategy, Component, Injector, OnDestroy, OnInit} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Subscribe } from '@core/decorators/subscribe.decorator';\r\nimport { IFilterCheckboxGroups, IFilterCheckBoxOptions } from '@base/filters/models/filter-checkbox.model';\r\nimport { FilterComponent } from '@base/filters/filters/filter.component';\r\nimport { TeamReservationsFilterWorkplaceService } from '@presentation/team/team-reservations/team-reservations-filters/team-reservations-filters-workplace/team-reservations-filter-workplace.service';\r\nimport { IDictionaryLabelGroups } from '@shared/dictionaries/dictionaries.model';\r\nimport { TIME_PICKER_OPTIONS } from '@presentation/reservations/components/list/list-filters/list-filter.utils';\r\n\r\n@Component({\r\n  selector: 'app-team-reservations-filter-workplace, [app-team-reservations-filters-workplace]',\r\n  templateUrl: './team-reservations-filter-workplace.component.html',\r\n  styleUrls: [ './team-reservations-filter-workplace.component.less' ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class.team-reservations-filter-workplace]': `true`\r\n  },\r\n  providers: [ TeamReservationsFilterWorkplaceService ]\r\n})\r\nexport class TeamReservationsFilterWorkplaceComponent extends FilterComponent implements OnInit, OnDestroy {\r\n  public labelGroupIdControl: FormControl;\r\n  public labelIdsControl: FormControl;\r\n  public floorMapIdsControl: FormControl;\r\n  public statusesControl: FormControl;\r\n  public dateTimeFromControl: FormControl;\r\n  public dateTimeToControl: FormControl;\r\n  public timePickerOptions: Record<string, any> = TIME_PICKER_OPTIONS;\r\n\r\n  @Subscribe<IFilterCheckBoxOptions>()\r\n  public statuses: IFilterCheckBoxOptions;\r\n\r\n  @Subscribe<IFilterCheckboxGroups>()\r\n  public floorMapsGroups: IFilterCheckboxGroups;\r\n\r\n  @Subscribe<IDictionaryLabelGroups>()\r\n  public labelGroups: IDictionaryLabelGroups;\r\n\r\n  @Subscribe<string>()\r\n  public dateFormat: string = this.$service.dateFormat$ as any;\r\n\r\n  @Subscribe<IFilterCheckBoxOptions>()\r\n  public usersOptions: IFilterCheckBoxOptions;\r\n\r\n  constructor(\r\n    protected injector: Injector,\r\n    private $service: TeamReservationsFilterWorkplaceService\r\n  ) {\r\n    super(injector);\r\n  }\r\n\r\n  public updateDateTime(dateTime: Date[]): void {\r\n    this.dateTimeFromControl.setValue(dateTime[0]);\r\n    this.dateTimeToControl.setValue(dateTime[1]);\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.$service.formGroup = this.formGroup;\r\n    this.$service.init();\r\n    this.assignControls();\r\n\r\n    this.statuses = this.$service.statuses$ as any;\r\n    this.usersOptions = this.$service.usersOptions$ as any;\r\n    this.labelGroups = this.$service.labelGroups$ as any;\r\n    this.floorMapsGroups = this.$service.floorMapsGroups$ as any;\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n  }\r\n}\r\n","<nz-form-item>\r\n  <ng-container\r\n    *ngTemplateOutlet=\"titleTpl; context: { $implicit: 'UserGroup' }\"\r\n  ></ng-container>\r\n  <nz-form-control>\r\n    <nz-select [formControl]=\"labelGroupIdControl\">\r\n      <nz-option\r\n        *ngFor=\"let labelGroup of labelGroups\"\r\n        [nzLabel]=\"labelGroup.name\"\r\n        [nzValue]=\"labelGroup.id\"\r\n      >\r\n      </nz-option>\r\n    </nz-select>\r\n  </nz-form-control>\r\n</nz-form-item>\r\n\r\n<nz-form-item>\r\n  <ng-container\r\n    *ngTemplateOutlet=\"titleTpl; context: { $implicit: 'Users' }\"\r\n  ></ng-container>\r\n  <nz-form-control>\r\n    <app-filter-checkbox\r\n      [formControl]=\"labelIdsControl\"\r\n      [options]=\"usersOptions || []\"\r\n      [maxHeight]=\"'320px'\"\r\n      [allowSearch]=\"true\"\r\n      [disabled]=\"labelGroupIdControl?.value === null\"\r\n      [allowEmpty]=\"false\"\r\n      [allowSelectAll]=\"true\"\r\n    >\r\n    </app-filter-checkbox>\r\n  </nz-form-control>\r\n</nz-form-item>\r\n\r\n<nz-form-item>\r\n  <ng-container\r\n    *ngTemplateOutlet=\"titleTpl; context: { $implicit: 'Buildings/Floors' }\"\r\n  ></ng-container>\r\n  <nz-form-control>\r\n    <app-filter-checkbox-group\r\n      [formControl]=\"floorMapIdsControl\"\r\n      [groups]=\"floorMapsGroups\"\r\n      [maxHeight]=\"'320px'\"\r\n    >\r\n    </app-filter-checkbox-group>\r\n  </nz-form-control>\r\n</nz-form-item>\r\n\r\n<nz-form-item class=\"app-reservations-filter-item\">\r\n  <ng-container\r\n    *ngTemplateOutlet=\"titleTpl; context: { $implicit: 'Statuses' }\"\r\n  ></ng-container>\r\n  <nz-form-control>\r\n    <app-filter-checkbox\r\n      [formControl]=\"statusesControl\"\r\n      [options]=\"statuses\"\r\n      [label]=\"filterStatusTpl\"\r\n    >\r\n    </app-filter-checkbox>\r\n  </nz-form-control>\r\n</nz-form-item>\r\n\r\n<nz-form-item class=\"app-reservations-filter-item\">\r\n  <ng-container\r\n    *ngTemplateOutlet=\"titleTpl; context: { $implicit: 'Period' }\"\r\n  ></ng-container>\r\n\r\n  <app-filter-date\r\n    [ngModel]=\"[dateTimeFromControl.value, dateTimeToControl.value]\"\r\n    [layout]=\"'vertical'\"\r\n    [format]=\"dateFormat\"\r\n    (ngModelChange)=\"updateDateTime($event)\"\r\n  >\r\n  </app-filter-date>\r\n</nz-form-item>\r\n\r\n<ng-template #titleTpl let-title>\r\n  <h6 class=\"app-reservations-filter-item__title\">\r\n    {{ title | dictionary | translate }}\r\n  </h6>\r\n</ng-template>\r\n\r\n<ng-template #filterStatusTpl let-color=\"color\" let-label=\"label\">\r\n  <app-status-renderer [color]=\"color\" [value]=\"label\" [needConvert]=\"false\">\r\n  </app-status-renderer>\r\n</ng-template>\r\n","export enum reservationStatus {\r\n  new = 'Создана', // Создана, не одобрена и не подтверждена\r\n  approved = 'Одобрена', // Одобрена управляющим\r\n  confirmed = 'Подтверждена', // Подтверждена\r\n  closed = 'Закончена', // Была подтверждена, успешно закрыта либо в процессе брони, либо по завершении\r\n  canceled = 'Отменена пользователем', // Отменена пользователем до подтверждения\r\n  denied = 'Отказано в одобрении', // Отказано в одобрении управляющим\r\n  refused = 'Не была одобрена или подтверждена', // Не была одобрена или подтверждена, время подтверждения истекло\r\n  undefined = 'Не определно' // если значение не определено\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  TemplateRef,\r\n  HostListener,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { INavigations } from '@app/layout/navigation/navigation.model';\r\nimport { TEAM_RESERVATIONS_MENU } from '@presentation/team/team-reservations/team-reservations.constants';\r\nimport { fadeInOutAnimation } from '@core/utils/animations.util';\r\nimport { TeamReservationsService } from '@presentation/team/team-reservations/team-reservations.service';\r\nimport { Observable } from 'rxjs';\r\nimport { ReservationType } from '@shared/http/models/meta.model';\r\nimport { MarkForCheck } from '@core/decorators/async.decorator';\r\nimport {\r\n  IList,\r\n  IReservationsMeta,\r\n} from '@presentation/reservations/models/list.model';\r\nimport {\r\n  IListRow,\r\n  IListRows,\r\n  IReservationsActionParams,\r\n} from '@base/list/models/list.model';\r\nimport { Subscribe } from '@core/decorators/subscribe.decorator';\r\nimport { IQueryParams } from '@shared/common/models/query-params.model';\r\nimport { IAppError } from '@core/models/app-errorl.model';\r\nimport { Throttle } from '@core/decorators/throttle.decorator';\r\nimport { IListPaging } from '@base/list/models/list-paging.model';\r\nimport { IListSort } from '@base/list/models/list-sort.model';\r\nimport { IFilterValues } from '@base/filters/filters.model';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Debounce } from '@core/decorators/debounce.decorator';\r\nimport { User } from '@core/models/user.model';\r\nimport { IWorkplaceReservationsMassActionResponseMeta } from '@shared/http/models/response.model';\r\nimport { ActionParams } from '@core/models/actions.model';\r\nimport { NzModalService } from 'ng-zorro-antd/modal';\r\nimport * as XLSX from 'xlsx';\r\n\r\n@Component({\r\n  selector: 'app-team-reservations',\r\n  templateUrl: './team-reservations.component.html',\r\n  styleUrls: ['./team-reservations.component.less'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class.team-reservations]': `true`,\r\n  },\r\n  animations: fadeInOutAnimation,\r\n  providers: [TeamReservationsService],\r\n})\r\nexport class TeamReservationsComponent implements OnInit, OnDestroy {\r\n  public menu: INavigations = TEAM_RESERVATIONS_MENU;\r\n  public type$: Observable<ReservationType> = this.$service.type$;\r\n  public showFiltersVisibleButton: boolean = false;\r\n  public user: User = this.$service.user;\r\n  public selectedRows: IListRows = [];\r\n\r\n  @MarkForCheck\r\n  public massActionResults: IWorkplaceReservationsMassActionResponseMeta[] = [];\r\n\r\n  @MarkForCheck\r\n  public filtersVisible: boolean = true;\r\n\r\n  @MarkForCheck\r\n  public meta: IReservationsMeta = null;\r\n\r\n  @MarkForCheck\r\n  public data: IListRows = [];\r\n\r\n  @Subscribe<IQueryParams>()\r\n  public queryParams;\r\n\r\n  @Subscribe<IAppError>()\r\n  public error = this.$service.error$;\r\n\r\n  @Subscribe<boolean>()\r\n  public ready;\r\n\r\n  @Subscribe<boolean>()\r\n  public loading = this.$service.loading$;\r\n\r\n  constructor(\r\n    private $service: TeamReservationsService,\r\n    private _cdr: ChangeDetectorRef,\r\n    private _modal: NzModalService\r\n  ) {}\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  @Throttle(250)\r\n  public windowResize(_$event?: Event): void {\r\n    this.showFiltersVisibleButton = this.$service.showFiltersVisibleButton;\r\n  }\r\n\r\n  @Subscribe<IList>()\r\n  private set list({ meta, data }: IList) {\r\n    this.data = data;\r\n\r\n    if (this.meta !== meta) {\r\n      this.meta = meta;\r\n    }\r\n  }\r\n\r\n  reset(): void {\r\n    this.$service.reset();\r\n  }\r\n\r\n  public callMassAction(actionParams: ActionParams): void {\r\n    if (actionParams.url && actionParams.url.includes('cancel')) {\r\n      this._modal.confirm({\r\n        nzTitle: 'Вы уверены, что хотите удалить отмеченные позиции?',\r\n        nzOnOk: () => {\r\n          this.onCallMassAction(actionParams);\r\n        },\r\n      });\r\n    } else {\r\n      this.onCallMassAction(actionParams);\r\n    }\r\n  }\r\n\r\n  onCallMassAction(actionParams) {\r\n    this.$service\r\n      .callMassAction(actionParams, this.selectedRows)\r\n      .subscribe((results) => {\r\n        this.massActionResults = results;\r\n        this._cdr.markForCheck();\r\n      });\r\n  }\r\n\r\n  public callAction(action: IReservationsActionParams): void {\r\n    this.$service.callAction(action);\r\n  }\r\n\r\n  public selectRow(row: IListRow | null): void {\r\n    this.$service.selectRow(row);\r\n  }\r\n\r\n  public selectRows(rows: IListRows): void {\r\n    this.selectedRows = [...rows];\r\n  }\r\n\r\n  public createReservation(): void {\r\n    this.$service.createReservation();\r\n  }\r\n\r\n  public changePaging(paging: IListPaging): void {\r\n    this.$service.changePaging(paging);\r\n  }\r\n\r\n  public changeSort(sort: IListSort): void {\r\n    this.$service.changeSort(sort);\r\n  }\r\n\r\n  public changeFilters(filters: IFilterValues): void {\r\n    this.$service.changeFilters(filters);\r\n  }\r\n\r\n  public toggleFiltersVisible(): void {\r\n    this.filtersVisible = !this.filtersVisible;\r\n    this.dispatchWindowResize();\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.queryParams = this.$service.queryParams$;\r\n    this.list = this.$service.list$ as any;\r\n    this.ready = this.$service.ready$.pipe(\r\n      tap((ready) => {\r\n        if (!ready) {\r\n          this.data = [];\r\n          this.meta = null;\r\n        }\r\n      })\r\n    );\r\n\r\n    this.windowResize();\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.$service.destroy();\r\n  }\r\n\r\n  @Debounce(500)\r\n  private dispatchWindowResize(): void {\r\n    window.dispatchEvent(new Event('resize'));\r\n  }\r\n\r\n  public exportxls(): void {\r\n    const fileName = 'ExcelSheet.xlsx';\r\n\r\n    const element = document.getElementById('reservationList');\r\n\r\n    const ws: XLSX.WorkSheet = XLSX.utils.table_to_sheet(element);\r\n\r\n    /* generate workbook and add the worksheet */\r\n\r\n    const wb: XLSX.WorkBook = XLSX.utils.book_new();\r\n\r\n    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n\r\n    /* save to file */\r\n\r\n    XLSX.writeFile(wb, fileName);\r\n  }\r\n}\r\n","<div class=\"team-reservations\">\r\n  <app-result\r\n    *ngIf=\"error as error; else reservationsListTpl\"\r\n    [@fadeInOut]\r\n    [status]=\"'error'\"\r\n    [title]=\"error?.title | translate\"\r\n    [subtitle]=\"error?.subtitle | translate\"\r\n    [message]=\"error?.message | translate\"\r\n    class=\"team-reservations__error\"\r\n  >\r\n    <button\r\n      nz-button\r\n      [nzGhost]=\"true\"\r\n      [nzType]=\"'primary'\"\r\n      [nzSize]=\"'large'\"\r\n      (click)=\"reset()\"\r\n    >\r\n      {{ \"ReloadReservations\" | dictionary | translate }}\r\n    </button>\r\n  </app-result>\r\n</div>\r\n\r\n<ng-template #reservationsListTpl>\r\n  <div\r\n    class=\"team-reservations__workspace\"\r\n    [ngClass]=\"{ _expanded: !filtersVisible, _ready: ready }\"\r\n  >\r\n    <div\r\n      app-list\r\n      [columns]=\"meta?.columns\"\r\n      [paging]=\"queryParams?.paging\"\r\n      [sort]=\"queryParams?.sort\"\r\n      [rows]=\"data\"\r\n      [total]=\"data?.length\"\r\n      [loading]=\"loading\"\r\n      [multiSelectRows]=\"true\"\r\n      (rowSelect)=\"selectRow($event)\"\r\n      (rowsSelect)=\"selectRows($event)\"\r\n      (pagingChange)=\"changePaging($event)\"\r\n      (sortChange)=\"changeSort($event)\"\r\n      (actionCall)=\"callAction($event)\"\r\n    ></div>\r\n  </div>\r\n\r\n  <div\r\n    class=\"team-reservations__filters-wrapper\"\r\n    [ngClass]=\"{ _collapsed: !filtersVisible, _ready: ready }\"\r\n  >\r\n    <div\r\n      app-team-reservations-filters\r\n      [loading]=\"!ready\"\r\n      [type]=\"type$ | async\"\r\n      [values]=\"queryParams?.filters\"\r\n      (valuesChange)=\"changeFilters($event)\"\r\n      class=\"team-reservations__filters\"\r\n    ></div>\r\n  </div>\r\n</ng-template>\r\n\r\n<app-extra-title-tpl>\r\n  <app-toolbar\r\n    #contentTpl\r\n    [actions]=\"meta?.actions || []\"\r\n    [data]=\"{ items: selectedRows }\"\r\n    [skeletonButtonsCount]=\"6\"\r\n    (actionCall)=\"callMassAction($event)\"\r\n  >\r\n    <button\r\n      nz-button\r\n      nz-dropdown\r\n      [nzDropdownMenu]=\"menu\"\r\n      [nzType]=\"'primary'\"\r\n      [nz-tooltip]=\"'Export' | dictionary | translate\"\r\n    >\r\n      <i nz-icon [nzType]=\"'download'\"></i>\r\n      <nz-dropdown-menu #menu=\"nzDropdownMenu\">\r\n        <ul nz-menu nzSelectable>\r\n          <!-- <li nz-menu-item><i nz-icon nzType=\"file-pdf\" nzTheme=\"outline\"></i>PDF</li> -->\r\n          <li nz-menu-item (click)=\"exportxls()\">\r\n            <i nz-icon nzType=\"file-excel\" nzTheme=\"outline\"></i>XLS\r\n          </li>\r\n        </ul>\r\n      </nz-dropdown-menu>\r\n    </button>\r\n\r\n    <button\r\n      *ngIf=\"showFiltersVisibleButton\"\r\n      nz-button\r\n      [nzType]=\"'primary'\"\r\n      (click)=\"toggleFiltersVisible()\"\r\n    >\r\n      <i nz-icon [nzType]=\"filtersVisible ? 'eye-invisible' : 'eye'\"> </i>\r\n      {{ \"Filters\" | dictionary | translate }}\r\n    </button>\r\n  </app-toolbar>\r\n</app-extra-title-tpl>\r\n\r\n<nz-modal\r\n  [nzVisible]=\"!!massActionResults.length\"\r\n  [nzTitle]=\"'ResultOfAction' | dictionary | translate\"\r\n  [nzOkText]=\"null\"\r\n  [nzCancelText]=\"'Close' | dictionary | translate\"\r\n  [nzMaskClosable]=\"true\"\r\n  [nzClassName]=\"'mass-action-results'\"\r\n  (nzOnCancel)=\"massActionResults = []\"\r\n>\r\n  <perfect-scrollbar\r\n    [config]=\"{ suppressScrollX: true }\"\r\n    class=\"mass-action-results__list\"\r\n  >\r\n    <p\r\n      *ngFor=\"let result of massActionResults\"\r\n      nz-typography\r\n      class=\"mass-action-results__item\"\r\n    >\r\n      <i\r\n        nz-icon\r\n        [nzType]=\"result.isOk ? 'check-circle' : 'close-circle'\"\r\n        [class._success]=\"result.isOk\"\r\n        [class._fail]=\"!result.isOk\"\r\n        class=\"mass-action-results__icon\"\r\n      ></i>\r\n      {{ result.message }}\r\n    </p>\r\n  </perfect-scrollbar>\r\n</nz-modal>\r\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { GlobalLoaderService } from '@core/services/global-loader.service';\r\nimport { TranslatePipe } from '@ngx-translate/core';\r\nimport { ViewService } from './view.service';\r\nimport { LayoutSharedService } from '@app/layout/layout-shared.service';\r\nimport { ReservationsApiService } from '@shared/http/services/reservations-api.service';\r\nimport { NzModalService } from 'ng-zorro-antd/modal';\r\n\r\n@Component({\r\n  selector: 'app-reservations-view',\r\n  templateUrl: './view.component.html',\r\n  styleUrls: ['./view.component.less'],\r\n  providers: [ ViewService ]\r\n})\r\nexport class ViewComponent implements OnInit {\r\n  reservation: any;\r\n  workplace: any;\r\n\r\n  constructor(\r\n    private _service: ViewService,\r\n    private _layout: LayoutSharedService,\r\n    private _router: Router,\r\n    private cdr: ChangeDetectorRef,\r\n    private _api: ReservationsApiService,\r\n    private _modal: NzModalService,\r\n    private _translate: TranslatePipe,\r\n    private _loader: GlobalLoaderService) { }\r\n\r\n  ngOnInit(): void {\r\n    this._loader.contentLoading$.next(true);\r\n    this._service.reservation$.subscribe(([reservation, workplace]) => {\r\n      if (reservation) {\r\n        this.reservation = reservation;\r\n        this.workplace = workplace;\r\n        this.cdr.markForCheck();\r\n      } else {\r\n        this._router.navigate(['reservations', 'workplace']);\r\n      }\r\n\r\n      this._loader.contentLoading$.next(false);\r\n    });\r\n  }\r\n  checkStatus(statuses: string[]): boolean {\r\n    return this.reservation && statuses.includes(this.reservation.status);\r\n  }\r\n  clickAction(question: string, action: () => void): void {\r\n    this._modal.confirm({\r\n      nzTitle: this._translate.transform(question),\r\n      nzOnOk: () => {\r\n        action();\r\n      }\r\n    });\r\n  }\r\n  approve(): void {\r\n    this.clickAction('Do you want to approve reservation?', () => {\r\n      this._loader.contentLoading$.next(true);\r\n      this._api.approveWorkplaceReservation({ workplaceReservationId: this.reservation.id }).subscribe(() => {\r\n        this._service.reload();\r\n        this._loader.contentLoading$.next(false);\r\n      });\r\n    });\r\n  }\r\n  confirm(): void {\r\n    this.clickAction('Do you want to approve reservation?', () => {\r\n      this._loader.contentLoading$.next(true);\r\n      this._api.confirmWorkplaceReservation({ workplaceReservationId: this.reservation.id }).subscribe(() => {\r\n        this._service.reload();\r\n        this._loader.contentLoading$.next(false);\r\n      });\r\n    });\r\n  }\r\n  complete(): void {\r\n    this.clickAction('Do you want to complete reservation?', () => {\r\n      this._loader.contentLoading$.next(true);\r\n      this._api.cancelWorkplaceReservation({ workplaceReservationId: this.reservation.id }).subscribe(() => {\r\n        this._service.reload();\r\n        this._loader.contentLoading$.next(false);\r\n      });\r\n    });\r\n  }\r\n  delete(): void {\r\n    this.clickAction('Do you want to delete reservation?', () => {\r\n      this._loader.contentLoading$.next(true);\r\n      this._api.denyWorkplaceReservation({ workplaceReservationId: this.reservation.id }).subscribe(() => {\r\n        this._service.reload();\r\n        this._loader.contentLoading$.next(false);\r\n      });\r\n    });\r\n  }\r\n}\r\n","<app-extra-title-tpl>\r\n  <div class=\"left\">\r\n    <button\r\n      nz-button\r\n      nzType=\"primary\"\r\n      class=\"btn\"\r\n      *ngIf=\"checkStatus(['NEW'])\"\r\n      (click)=\"approve()\"\r\n    >\r\n      {{ \"Approve by manager\" | translate }}\r\n    </button>\r\n    <button\r\n      nz-button\r\n      nzType=\"primary\"\r\n      class=\"btn\"\r\n      *ngIf=\"checkStatus(['APPROVED'])\"\r\n      (click)=\"confirm()\"\r\n    >\r\n      {{ \"Approve\" | translate }}\r\n    </button>\r\n    <button\r\n      nz-button\r\n      nzType=\"primary\"\r\n      class=\"btn\"\r\n      *ngIf=\"checkStatus(['CONFIRMED'])\"\r\n      (click)=\"complete()\"\r\n    >\r\n      {{ \"Complete\" | translate }}\r\n    </button>\r\n    <button\r\n      nz-button\r\n      nzType=\"primary\"\r\n      class=\"btn\"\r\n      *ngIf=\"checkStatus(['NEW'])\"\r\n      (click)=\"delete()\"\r\n    >\r\n      {{ \"Deny\" | translate }}\r\n    </button>\r\n    <button\r\n      nz-button\r\n      nzType=\"primary\"\r\n      class=\"btn\"\r\n      *ngIf=\"checkStatus(['APPROVED'])\"\r\n      (click)=\"complete()\"\r\n    >\r\n      {{ \"Delete\" | translate }}\r\n    </button>\r\n  </div>\r\n</app-extra-title-tpl>\r\n\r\n<app-reservation-view\r\n  [reservation]=\"reservation\"\r\n  [showLabelName]=\"true\"\r\n  [workplace]=\"workplace\"\r\n  [placeType]=\"'workplace'\"\r\n>\r\n</app-reservation-view>\r\n","import { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\nimport { TeamReservationsComponent } from '@presentation/team/team-reservations/team-reservations.component';\r\nimport { ViewPageResolver } from '@presentation/team/team-reservations/view.page.resolver';\r\nimport { ViewComponent } from '@presentation/team/team-reservations/view/view.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'view/:id',\r\n    component: ViewComponent,\r\n    data: {\r\n      showBackBtn: true,\r\n    },\r\n    resolve: {\r\n      title: ViewPageResolver\r\n    }\r\n  },\r\n  {\r\n    path: '',\r\n    pathMatch: 'full',\r\n    component: TeamReservationsComponent,\r\n    data: {\r\n      title: 'Бронирования рабочих мест сотрудников'\r\n    },\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TeamReservationsRoutingModule {}\r\n","import { ReservationType } from '@shared/http/models/meta.model';\r\n\r\nconst teamReservationsFilterFields: Record<ReservationType, Record<string, any>> = {\r\n  appointment: {\r\n    floorMapIds: [],\r\n    statuses: [],\r\n    dateTimeFrom: null,\r\n    dateTimeTo: null\r\n  },\r\n  locker: {\r\n    floorMapIds: [],\r\n    statuses: [],\r\n    dateTimeFrom: null,\r\n    dateTimeTo: null\r\n  },\r\n  parking: {\r\n    floorMapIds: [],\r\n    statuses: [],\r\n    dateTimeFrom: null,\r\n    dateTimeTo: null\r\n  },\r\n  workplace: {\r\n    labelGroupId: null,\r\n    labelIds: [],\r\n    floorMapIds: [],\r\n    statuses: [],\r\n    dateTimeFrom: null,\r\n    dateTimeTo: null\r\n  }\r\n}\r\n\r\nexport function getTeamReservationsFilterFieldsByType(type: ReservationType): Record<string, any> | null {\r\n  return teamReservationsFilterFields[type] || null;\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { ReservationViewModule } from '@base/reservation-view/reservation-view.module';\r\nimport { ViewComponent } from '@presentation/team/team-reservations/view/view.component';\r\nimport { TeamReservationsComponent } from './team-reservations.component';\r\nimport { ResultModule } from '@base/result/result.module';\r\nimport { CoreModule } from '@core/core.module';\r\nimport { ListModule } from '@base/list/list.module';\r\nimport { TeamReservationsFiltersComponent } from './team-reservations-filters/team-reservations-filters.component';\r\nimport { TeamReservationsFilterWorkplaceComponent } from './team-reservations-filters/team-reservations-filters-workplace/team-reservations-filter-workplace.component';\r\nimport { FiltersModule } from '@base/filters/filters.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RendererModule } from '@base/renderer/renderer.module';\r\nimport { TeamReservationsRoutingModule } from '@presentation/team/team-reservations/team-reservations-routing.module';\r\nimport { DictionaryService } from '@core/services/dictionary.service';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TeamReservationsDictionary } from '@presentation/team/team-reservations/team-reservations.dictionary';\r\nimport {ExtraTitleTplModule} from '@shared/layout/extra-title-tpl/extra-title-tpl.module';\r\nimport { ToolbarModule } from '@base/toolbar/toolbar.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TeamReservationsComponent,\r\n    TeamReservationsFiltersComponent,\r\n    TeamReservationsFilterWorkplaceComponent,\r\n    ViewComponent\r\n  ],\r\n  imports: [\r\n    CoreModule.forChild(),\r\n    ResultModule,\r\n    ListModule,\r\n    FiltersModule,\r\n    ReactiveFormsModule,\r\n    RendererModule,\r\n    TeamReservationsRoutingModule,\r\n    TranslateModule,\r\n    ReservationViewModule,\r\n    ExtraTitleTplModule,\r\n    ToolbarModule\r\n  ]\r\n})\r\nexport class TeamReservationsModule {\r\n  public constructor() {\r\n    DictionaryService.set(TeamReservationsDictionary);\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FilterService } from '@base/filters/filters/filter.service';\r\nimport { IFilterCheckboxGroups, IFilterCheckBoxOptions } from '@base/filters/models/filter-checkbox.model';\r\nimport { User } from '@core/models/user.model';\r\nimport { UserService } from '@core/services/user.service';\r\nimport {\r\n  IDictionary,\r\n  IDictionaryBuildings,\r\n  IDictionaryFloorMaps,\r\n  IDictionaryLabelGroups\r\n} from '@shared/dictionaries/dictionaries.model';\r\nimport { DictionariesService } from '@shared/dictionaries/dictionaries.service';\r\nimport { MeasurementsService } from '@shared/dictionaries/services/measurements.service';\r\nimport { StatusesService } from '@shared/dictionaries/services/statuses.service';\r\nimport { UserOfficesService } from '@src/app/core/services/user-offices.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\nimport { mapFloorMapsOptions, mapStatusesOptions, mapUserOptions } from './team-reservations-filter-workplace.utils';\r\n\r\n@Injectable()\r\nexport class TeamReservationsFilterWorkplaceService extends FilterService {\r\n  private _usersOptions$: Observable<IFilterCheckBoxOptions>\r\n\r\n  constructor(\r\n    protected injector: Injector,\r\n    private $dictionaries: DictionariesService,\r\n    private $userOffices: UserOfficesService,\r\n    private $statuses: StatusesService,\r\n    private $measurements: MeasurementsService,\r\n    private $user: UserService\r\n  ) {\r\n    super(injector);\r\n  }\r\n\r\n  public get usersOptions$(): Observable<IFilterCheckBoxOptions> {\r\n    return this._usersOptions$;\r\n  }\r\n\r\n  public get dateFormat$(): Observable<string> {\r\n    return this.$measurements.getMeasurementByName$('shortDateTime');\r\n  }\r\n\r\n  public get statuses$(): Observable<IFilterCheckBoxOptions> {\r\n    return this.$statuses.statuses$.pipe(map((statuses) =>\r\n      mapStatusesOptions(statuses, this.getFormControlByName('statuses')))\r\n    );\r\n  }\r\n\r\n  public get floorMapsGroups$(): Observable<IFilterCheckboxGroups> {\r\n    return this.buildings$.pipe(\r\n      switchMap(buildings =>\r\n        this.$userOffices.getMyOrderedFloors<IDictionaryFloorMaps>().pipe(\r\n          map((floorMaps) =>\r\n            mapFloorMapsOptions(floorMaps, buildings, this.getFormControlByName('floorMapIds'))\r\n          )\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  public get labelGroups$(): Observable<IDictionaryLabelGroups> {\r\n    const user: User = this.$user.info as User;\r\n    const labelGroupIdControl: FormControl = this.getFormControlByName('labelGroupId');\r\n\r\n    return this.$dictionaries.getDictionary<IDictionaryLabelGroups>('labelGroups').pipe(\r\n      map(labelGroups => labelGroups.filter(({ id }) => user.labelGroups.includes(id))),\r\n      tap((labelGroups) => {\r\n        if (labelGroupIdControl.value === null) {\r\n          labelGroupIdControl.setValue(labelGroups[0]?.id);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private get buildings$(): Observable<IDictionaryBuildings> {\r\n    return this.$userOffices.getMyOrderedBuildings<IDictionaryBuildings>()\r\n  }\r\n\r\n  public init(): void {\r\n    const labelIdsControl: FormControl = this.getFormControlByName('labelIds');\r\n    this._usersOptions$ = this._formGroup.get('labelGroupId').valueChanges.pipe(\r\n      switchMap((labelGroupId) => this.$dictionaries.getDictionary<IDictionary>('labels').pipe(\r\n        map(labels => labels.filter(user => user.labelGroups.includes(labelGroupId))),\r\n        map(labels => mapUserOptions(labels, this._formGroup.get('labelIds') as FormControl)),\r\n        tap((labels) => {\r\n          if (labelIdsControl.value.length) return;\r\n\r\n          labelIdsControl.setValue(labels.map(({ id }) => id))\r\n        })\r\n        )\r\n      ));\r\n  }\r\n}\r\n","import {Injectable, Injector} from '@angular/core';\r\nimport {BaseService} from '@shared/common/base/base.service';\r\nimport {IListRow, IListRows, IReservationsActionParams} from '@base/list/models/list.model';\r\nimport {QueryParamsBuilder} from '@shared/common/utils/query-params-builder.util';\r\nimport {Subscriptions} from '@core/decorators/subscriptions.decorator';\r\nimport {combineLatest, Observable, of, Subscription} from 'rxjs';\r\nimport {ReservationsMessagesService} from '@shared/messages/services/reservations-messages.service';\r\nimport {StatusesService} from '@shared/dictionaries/services/statuses.service';\r\nimport {MeasurementsService} from '@shared/dictionaries/services/measurements.service';\r\nimport {UserService} from '@core/services/user.service';\r\nimport {MetaApiService} from '@shared/http/services/meta-api.service';\r\nimport {ReservationsApiService} from '@shared/http/services/reservations-api.service';\r\nimport {filterActionsColumn, initQueryParams, mapActions, mapDictionaryValues, mapStatusDictionary, maxFilterButtonVisibleWindowWidth, maxFilterHideWindowWith, prepareUrlQueryParams} from '@shared/common/utils/reservations.util';\r\nimport {IBodyQueryParams, IQueryParams, UrlQueryParams} from '@shared/common/models/query-params.model';\r\nimport {ReservationType} from '@shared/http/models/meta.model';\r\nimport {catchError, debounceTime, delay, filter, map, pluck, switchMap, tap} from 'rxjs/operators';\r\nimport {IList, IReservationsMeta} from '@presentation/reservations/models/list.model';\r\nimport {IListPaging} from '@base/list/models/list-paging.model';\r\nimport {IListSort} from '@base/list/models/list-sort.model';\r\nimport {IFilterValues} from '@base/filters/filters.model';\r\nimport { ActionParams, IActionNavigateParams, IActionRequestParams } from '@core/models/actions.model';\r\nimport {Complete} from '@core/decorators/complete.decorator';\r\nimport {AppError} from '@core/models/app-errorl.model';\r\nimport {IWorkplaceReservation} from '@shared/http/models/database.model';\r\nimport {Params} from '@angular/router';\r\nimport {getReservationsMetaNameByType} from '@presentation/team/team-reservations/team-reservations.utils';\r\nimport {User} from '@core/models/user.model';\r\nimport {mapRequestBody} from '@base/action/action.utils';\r\nimport { IWorkplaceReservationsMassActionResponse, IWorkplaceReservationsMassActionResponseMeta } from '@shared/http/models/response.model';\r\nimport { IWorkplaceReservationsMassActionRequest } from '@shared/http/models/request.model';\r\nimport { mapMassActionRequest, prepareMassActionRequest } from '@presentation/reservations/components/list/list.utils';\r\nimport { IHttpResponse } from '@core/models/http.model';\r\nimport { MessageService } from '@core/services/message.service';\r\n\r\n@Injectable()\r\nexport class TeamReservationsService extends BaseService {\r\n  private _htmlElement: HTMLElement = document.documentElement;\r\n  private _selectedRow: IListRow | null;\r\n  private _queryParamsBuilder: QueryParamsBuilder = QueryParamsBuilder.default();\r\n\r\n  @Subscriptions('destroy')\r\n  private _subscriptions: Subscription;\r\n\r\n  public constructor(\r\n    protected injector: Injector,\r\n    private $messages: ReservationsMessagesService,\r\n    private $statuses: StatusesService,\r\n    private $measurements: MeasurementsService,\r\n    private $user: UserService,\r\n    private $metaApi: MetaApiService,\r\n    private $reservationsApi: ReservationsApiService,\r\n    private $message: MessageService\r\n  ) {\r\n    super(injector);\r\n    this._queryParamsBuilder.currentLang = this.$localization.currentLang;\r\n    this._queryParamsBuilder.dateFormat = this.filterDateFormat;\r\n  }\r\n\r\n  public get user(): User {\r\n    return this.$user.info as User;\r\n  }\r\n\r\n  private get clientWidth(): number {\r\n    return this._htmlElement.clientWidth;\r\n  }\r\n\r\n  public get showFiltersVisibleButton(): boolean {\r\n    return this.clientWidth < maxFilterButtonVisibleWindowWidth;\r\n  }\r\n\r\n  public get queryParams$(): Observable<IQueryParams> {\r\n    return this._queryParamsBuilder.paramsChange;\r\n  }\r\n\r\n  public get queryParams(): IQueryParams {\r\n    return this._queryParamsBuilder.params;\r\n  }\r\n\r\n  public get urlQueryParams(): UrlQueryParams {\r\n    return prepareUrlQueryParams(\r\n      this._queryParamsBuilder.urlQueryParams,\r\n      this.filterDateFormat,\r\n      this.$localization.currentLang\r\n    );\r\n  }\r\n\r\n  public get bodyQueryParams(): IBodyQueryParams {\r\n    return this._queryParamsBuilder.bodyQueryParams;\r\n  }\r\n\r\n  public get type$(): Observable<ReservationType> {\r\n    return this.routeParams$.pipe(pluck('type'));\r\n  }\r\n\r\n  public get metaName$(): Observable<string> {\r\n    return this.type$.pipe(map(getReservationsMetaNameByType));\r\n  }\r\n\r\n  public get list$(): Observable<IList> {\r\n    return this.reservationsMeta$.pipe(\r\n      switchMap((metaRes) =>\r\n        this.reservations$.pipe(map(dataRes => [metaRes, dataRes]))\r\n      ),\r\n      this.loadingOperator(),\r\n      map(([meta, data]) => ({meta, data})),\r\n      switchMap(({meta, data}) => mapDictionaryValues(this.$dictionaries, meta as IReservationsMeta, data as IListRows)),\r\n      switchMap(({meta, data}) => mapActions(this.$dictionaries, meta, data, this.user)),\r\n      this.loadingOperator(false),\r\n      catchError((e) => {\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  public isFilterVisible(filterVisible: boolean): boolean {\r\n    return this.clientWidth < maxFilterHideWindowWith ? false : filterVisible;\r\n  }\r\n\r\n  public changePaging(paging: IListPaging): void {\r\n    this.updateQueryParams(paging);\r\n  }\r\n\r\n  public changeSort(sort: IListSort): void {\r\n    this.updateQueryParams(sort);\r\n  }\r\n\r\n  public changeFilters(filters: IFilterValues): void {\r\n    this._queryParamsBuilder.set({updateData: true});\r\n    this.updateQueryParams(filters);\r\n  }\r\n\r\n  public callAction({params, data}: IReservationsActionParams): void {\r\n    if (params?.route) {\r\n      this.callNavigationAction(params as IActionNavigateParams, data);\r\n    }\r\n\r\n    if (params?.url) {\r\n      this.callActionRequest(params as IActionRequestParams, data);\r\n    }\r\n  }\r\n\r\n  public callMassAction(actionParams: ActionParams, rows: IListRows): Observable<IWorkplaceReservationsMassActionResponseMeta[]> {\r\n    if (actionParams?.route) {\r\n      this.callNavigationAction(actionParams as IActionNavigateParams, rows[0] || {});\r\n      return of([]);\r\n    }\r\n\r\n    if (actionParams?.url) {\r\n      return this.callMassActionRequest(actionParams as IActionRequestParams, rows);\r\n    }\r\n  }\r\n\r\n  public selectRow(row: IListRow | null): void {\r\n    this._selectedRow = row;\r\n    this.$nav.go(`view/${row.id}`, this.$route);\r\n  }\r\n\r\n  public createReservation(): void {\r\n    this.$nav.go('../create', this.$route);\r\n  }\r\n\r\n  @Complete\r\n  public destroy(): void {\r\n    this._queryParamsBuilder.destroy();\r\n  }\r\n\r\n  private get filterDateFormat(): string {\r\n    return this.$measurements.getMeasurementByName('filterDate');\r\n  }\r\n\r\n  private get reservationsMeta$(): Observable<IReservationsMeta | AppError> {\r\n    return combineLatest([\r\n      this.metaName$,\r\n      this.reset$,\r\n    ]).pipe(\r\n      this.readyOperator(),\r\n      this.resetErrorOperator(),\r\n      this.loadingOperator(true),\r\n      switchMap(([name]) =>\r\n        this.$metaApi.getMeta<IReservationsMeta>(name, this.$messages.loadingMetaErrorNotification)\r\n      ),\r\n      this.readyOperator(true),\r\n      filter((meta) => this.processMeta(meta)),\r\n      tap(() => this.updateQueryParams({}, false))\r\n    );\r\n  }\r\n\r\n  private get reservations$(): Observable<IWorkplaceReservation[]> {\r\n    return combineLatest([\r\n      this.type$,\r\n      this.routeQueryParams$,\r\n      this.reload$\r\n    ]).pipe(\r\n      filter(([, {updateData},]) => updateData === 'true'),\r\n      this.loadingOperator(true),\r\n      debounceTime(750),\r\n      switchMap(([type]) =>\r\n        this.$reservationsApi.getReservationsByType(type, this.bodyQueryParams)\r\n      ),\r\n      tap(() => this._queryParamsBuilder.setProperty('updateData', null))\r\n    );\r\n  }\r\n\r\n  private updateQueryParams(params: Params, update: boolean = true): void {\r\n    if (update) {\r\n      this._queryParamsBuilder.updateQueryParams(params);\r\n    }\r\n\r\n    this.$nav.go([], {queryParams: this.urlQueryParams});\r\n  }\r\n\r\n  private callNavigationAction(\r\n    {relativeRoute, route}: IActionNavigateParams,\r\n    data: Record<string, any>\r\n  ): void {\r\n    this.$nav.goToUrl(this.$url.createUrl(route, data), {\r\n      relativeTo: relativeRoute ? this.$route : null,\r\n      queryParams: {},\r\n    });\r\n  }\r\n\r\n  private callActionRequest(\r\n    {url, method, messages, body}: IActionRequestParams,\r\n    data: Record<string, any>\r\n  ): void {\r\n    const requestData: Record<string, any> = mapRequestBody(data, body);\r\n    url = this.$url.createUrl(url, data);\r\n    messages = this.$messages.getActionNotificationsMessages(messages);\r\n\r\n    of(url).pipe(\r\n      this.loadingOperator(true),\r\n      debounceTime(250),\r\n      switchMap((url: string) =>\r\n        this.$reservationsApi.callReservationAction(url, method, requestData, messages)\r\n      ),\r\n      delay(1000)\r\n    ).subscribe(({success}) =>  success\r\n      ? this.reload()\r\n      : this.loading = false\r\n    );\r\n  }\r\n\r\n  private callMassActionRequest({url, method, body}: IActionRequestParams, reservations: IListRows): Observable<IWorkplaceReservationsMassActionResponseMeta[]> {\r\n    const requestData: IWorkplaceReservationsMassActionRequest = prepareMassActionRequest(reservations, body);\r\n\r\n    this.loading = true;\r\n\r\n    return this.$reservationsApi\r\n      .callReservationAction<IWorkplaceReservationsMassActionRequest, IWorkplaceReservationsMassActionResponse>(url, method, requestData, {})\r\n      .pipe(\r\n        tap(({success}) => this.finishCallAction(success)),\r\n        map((response: IHttpResponse<IWorkplaceReservationsMassActionResponse>) =>\r\n          mapMassActionRequest(response, reservations, this.$message)\r\n        )\r\n      );\r\n  }\r\n\r\n  private finishCallAction(result: boolean): void {\r\n    result ? this.reload() : this.loading = false;\r\n  }\r\n\r\n  private processMeta(meta: IReservationsMeta | AppError): meta is IReservationsMeta {\r\n    if (meta instanceof AppError) {\r\n      this.error = this.$messages.getLoadingMetaError(meta);\r\n      this.loading = false;\r\n      return false;\r\n    }\r\n\r\n    initQueryParams(this._queryParamsBuilder, meta, this.routeQueryParams);\r\n    mapStatusDictionary(meta.columns, this.$statuses.statuses);\r\n    filterActionsColumn(meta, this.user);\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DictionariesService } from '@shared/dictionaries/dictionaries.service';\r\nimport { ReservationsApiService } from '@shared/http/services/reservations-api.service';\r\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\r\nimport { map, pluck, switchMap, tap } from 'rxjs/operators';\r\nimport { IHttpResponse } from '@core/models/http.model';\r\nimport { StatusesService } from '@shared/dictionaries/services/statuses.service';\r\n\r\n@Injectable()\r\nexport class ViewService {\r\n  private _reload = new BehaviorSubject<null>(null);\r\n  constructor(\r\n    private _api: ReservationsApiService,\r\n    private $route: ActivatedRoute,\r\n    private _dictionaries: DictionariesService,\r\n    private $statuses: StatusesService\r\n  ) {}\r\n\r\n  get reservation$(): Observable<any> {\r\n    return combineLatest([this._routeId$, this._reload])\r\n      .pipe(switchMap(([id]) => this._reservationReq$(+id)));\r\n  }\r\n\r\n  reload(): void {\r\n    this._reload.next(null);\r\n  }\r\n\r\n  private get _routeId$(): Observable<string> {\r\n    return this.$route.params.pipe(pluck('id'));\r\n  }\r\n\r\n  private _reservationReq$(id: number): Observable<any> {\r\n    return this._api.getWorkplaceReservations({\r\n      id,\r\n      statuses: this.$statuses.allStatusesCodes\r\n    }).pipe(\r\n      pluck<any, any>('0'),\r\n      switchMap(reservation => {\r\n        if (reservation) {\r\n          return this._workplaceReq$(reservation.workplaceId).pipe(\r\n            map((workplace) => [reservation, workplace])\r\n          );\r\n        } else {\r\n          return of([null, null]);\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  private _workplaceReq$(id: number): Observable<IHttpResponse<any>> {\r\n    return this._dictionaries.getDictionaryItemByKey('workplaces', id);\r\n  }\r\n}\r\n","import { reservationStatus } from '@presentation/reservations/enums/reservationStatus.enum';\r\nimport {MAP_POINT_DISABLED_SVG} from '@shared/http/utils/images.const';\r\n\r\nexport const getStatus = (status: string) => {\r\n  return reservationStatus[status.toLowerCase()];\r\n};\r\n\r\nexport const sortFloors = (floors: any[], buildingId) => {\r\n  return floors.filter((floor) => floor.buildingId === buildingId).sort((a, b) => a.floorNumber - b.floorNumber);\r\n};\r\n\r\nexport const filterFloors = (floors: any[], buildingId) => {\r\n  return floors.filter((floor) => floor.buildingId === buildingId);\r\n};\r\n\r\nexport const checkReservedNeighbors = (place, reservations) => {\r\n  const ids = reservations.map(r => r.workplaceId);\r\n  return place.neighborsIds.some(id => ids.includes(id));\r\n};\r\n\r\nexport const checkNeighbors = (places) => {\r\n  const neighborsSet = new Set(...[places.reduce((acc, curr) => [...acc, ...curr.neighborsIds], [])]);\r\n  return places.some(place => neighborsSet.has(place.id));\r\n};\r\n\r\nexport const getDistanceCheckConfirmModal = (nzOnOk) => ({\r\n  nzTitle: 'Нарушение социальной дистанции',\r\n  nzContent: 'Согласны ли вы нарушить социальную дистанцию?',\r\n  nzOkText: 'Да',\r\n  nzCancelText: 'Нет',\r\n  nzOnOk\r\n});\r\n\r\nexport const disablePlace = (place) => {\r\n  return {\r\n    ...place,\r\n    disabled: true,\r\n    img: place.imageDisabledUrl || MAP_POINT_DISABLED_SVG,\r\n  };\r\n}\r\n","export enum TeamReservationsDictionary {\r\n  AllBuildings = 'All buildings',\r\n  AllFloors = 'All floors',\r\n  AllStatuses = 'All statuses',\r\n  BookWorkPlace = 'Book workplace',\r\n  ErrorLoadingReservationsList = 'Error loading reservations list',\r\n  ErrorLoadingReservationsListData = 'Error loading reservations list data',\r\n  ErrorLoadingReservationsListMeta = 'Error loading reservations list metadata',\r\n  EnterUsername = 'Enter username',\r\n  LoadReservationsListFailed = 'Load reservations list failed',\r\n  MyWorkplaceReservations = 'My workplace reservations',\r\n  PleaseSelectUserGroup = 'Please select user group',\r\n  ReloadReservations = 'Reload reservations',\r\n  UserGroup = 'User group'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ReservationType } from '@shared/http/models/meta.model';\r\nimport { getTeamReservationsFilterFieldsByType } from '@presentation/team/team-reservations/team-reservations-filters/team-reservations-filters.utils';\r\n\r\n@Injectable()\r\nexport class TeamReservationsFiltersService {\r\n  private _formGroup: FormGroup = new FormGroup({});\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n  }\r\n\r\n  public get formGroup(): FormGroup {\r\n    return this._formGroup;\r\n  }\r\n\r\n  public createFormGroup(type: ReservationType): void {\r\n    this.clearFormGroup();\r\n    this.addFormGroupControls(type);\r\n  }\r\n\r\n  public clear(formGroup: FormGroup = this.formGroup): void {\r\n    Object\r\n      .entries(formGroup.controls)\r\n      .filter(this.clearControlValue);\r\n  }\r\n\r\n  private clearFormGroup(): void {\r\n    Object.keys(this._formGroup.controls)\r\n      .forEach(key => this._formGroup.removeControl(key));\r\n  }\r\n\r\n  private addFormGroupControls(type: ReservationType): void {\r\n    if (!type) {\r\n      this._formGroup = new FormGroup({});\r\n      return;\r\n    }\r\n\r\n    Object\r\n      .entries(getTeamReservationsFilterFieldsByType(type))\r\n      .forEach(([ name, state ]) =>\r\n        this._formGroup.addControl(\r\n          name,\r\n          this.formBuilder.control(state)\r\n        )\r\n      )\r\n  }\r\n\r\n  private clearControlValue([ name, control ]: [ string, AbstractControl ]): void {\r\n    switch (name) {\r\n      case 'labelGroupId':\r\n        return;\r\n\r\n      case 'labelIds':\r\n        control.setValue('*');\r\n        return;\r\n\r\n      default:\r\n        control.setValue(control.value instanceof Array ? [] : null);\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Injector, Input, OnInit } from '@angular/core';\r\nimport { ReservationType } from '@shared/http/models/meta.model';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IFilterValues } from '@base/filters/filters.model';\r\nimport { FilterComponent } from '@base/filters/filters/filter.component';\r\nimport { TeamReservationsFiltersService } from '@presentation/team/team-reservations/team-reservations-filters/team-reservations-filters.service';\r\n\r\n@Component({\r\n  selector: 'app-team-reservations-filters, [app-team-reservations-filters]',\r\n  templateUrl: './team-reservations-filters.component.html',\r\n  styleUrls: [ './team-reservations-filters.component.less' ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class.team-reservations-filters]': `true`\r\n  },\r\n  providers: [ TeamReservationsFiltersService ]\r\n})\r\nexport class TeamReservationsFiltersComponent extends FilterComponent implements OnInit {\r\n  public type: ReservationType;\r\n  public formGroup: FormGroup = this.$service.formGroup;\r\n\r\n  @Input()\r\n  public loading: boolean = false;\r\n\r\n  @Input('type')\r\n  public set inputType(type: ReservationType) {\r\n    if (!type) return;\r\n\r\n    this.$service.createFormGroup(type);\r\n    this.type = type;\r\n  }\r\n\r\n  @Input('values')\r\n  public set inputValues(values: IFilterValues) {\r\n    if (!values) return;\r\n    const emitEvent: boolean = !!Object.keys(values).length;\r\n\r\n    this.formGroup.patchValue(values, { emitEvent });\r\n  }\r\n\r\n  constructor(\r\n    private $service: TeamReservationsFiltersService,\r\n    protected injector: Injector\r\n  ) {\r\n    super(injector);\r\n  }\r\n\r\n  public clear(): void {\r\n    this.$service.clear(this.formGroup);\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n}\r\n","<div nz-row\r\n     [nzGutter]=\"12\"\r\n     class=\"team-reservations-filters__header\"\r\n>\r\n  <div nz-col [nzXs]=\"8\"\r\n       [nzLg]=\"0\"\r\n       class=\"team-reservations-filters__header-action\"\r\n  >\r\n    <button nz-button\r\n            [nzType]=\"'link'\"\r\n    >\r\n      {{'Close' | dictionary | translate}}\r\n    </button>\r\n  </div>\r\n\r\n  <h3 nz-col\r\n      [nzXs]=\"8\"\r\n      [nzLg]=\"12\"\r\n      class=\"team-reservations-filters__header-title\"\r\n  >\r\n    {{'Filters' | dictionary | translate}}\r\n  </h3>\r\n\r\n  <div nz-col\r\n       [nzXs]=\"8\"\r\n       [nzLg]=\"12\"\r\n       class=\"team-reservations-filters__header-action _right\"\r\n  >\r\n    <button nz-button\r\n            [nzType]=\"'link'\"\r\n            (click)=\"clear()\"\r\n    >\r\n      {{'Clear' | dictionary | translate}}\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<nz-spin [nzSpinning]=\"loading\"\r\n         class=\"team-reservations-filters__form-wrapper\"\r\n>\r\n  <form nz-form\r\n        [nzLayout]=\"'vertical'\"\r\n        [formGroup]=\"formGroup\"\r\n        [ngSwitch]=\"type\"\r\n        class=\"team-reservations-filters__form\"\r\n  >\r\n    <perfect-scrollbar [config]=\"{suppressScrollX: true}\"\r\n                       class=\"team-reservations-filters__form-scroll\"\r\n    >\r\n      <div *ngSwitchDefault\r\n           app-team-reservations-filters-workplace\r\n           [formGroup]=\"formGroup\"\r\n      >\r\n      </div>\r\n    </perfect-scrollbar>\r\n  </form>\r\n</nz-spin>\r\n\r\n","import { FormControl } from '@angular/forms';\r\nimport { IFilterCheckboxGroups, IFilterCheckBoxOptions } from '@base/filters/models/filter-checkbox.model';\r\nimport { mapCheckBoxOptions } from '@shared/common/utils/filter.util';\r\nimport {\r\n  IDictionary,\r\n  IDictionaryBuildings,\r\n  IDictionaryFloorMaps\r\n} from '@shared/dictionaries/dictionaries.model';\r\nimport { IStatuses } from '@shared/dictionaries/models/statuses.model';\r\n\r\nexport function mapBuildingsOptions(\r\n  buildings: IDictionaryBuildings,\r\n  buildingIdControl: FormControl\r\n): IFilterCheckBoxOptions {\r\n  return mapCheckBoxOptions(buildings, 'id', 'name', buildingIdControl);\r\n}\r\n\r\nexport function mapFloorMapsOptions(\r\n  floorMaps: IDictionaryFloorMaps,\r\n  buildings: IDictionaryBuildings,\r\n  floorMapIdsControl: FormControl\r\n): IFilterCheckboxGroups {\r\n  return buildings.map(({ name: label, id }) => {\r\n    const floorMapOptions: IFilterCheckBoxOptions = mapCheckBoxOptions(\r\n      floorMaps.filter(({ buildingId }) => buildingId === id),\r\n      'id',\r\n      'name',\r\n      floorMapIdsControl\r\n    );\r\n    const checked: boolean = floorMapOptions.every(({ checked }) => checked);\r\n\r\n    return {\r\n      label,\r\n      value: id,\r\n      checked,\r\n      indeterminate: !checked && floorMapOptions.some(({ checked }) => checked),\r\n      options: floorMapOptions\r\n    }\r\n  }).filter(group => !!group.options.length);\r\n}\r\n\r\nexport function mapUserOptions(labels: IDictionary, labelIdsControl: FormControl): IFilterCheckBoxOptions {\r\n  return mapCheckBoxOptions(labels, 'id', 'name', labelIdsControl).map((userOption) =>\r\n    ({ ...userOption, checked: true })\r\n  );\r\n}\r\n\r\nexport function mapStatusesOptions(statuses: IStatuses, statusesControl: FormControl): IFilterCheckBoxOptions {\r\n  return mapCheckBoxOptions(statuses, 'code', 'name', statusesControl)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export enum WorkplaceTypes {\r\n  DEFAULT = 'Рабочее место',\r\n  COMPLEMENTARY = 'Дополнительное рабочее место',\r\n  PARKING_LOT = 'Парковочное место'\r\n}\r\n\r\nexport const getTypeName = (type) => WorkplaceTypes[type] || WorkplaceTypes.DEFAULT;\r\n\r\nexport const WorkplaceTypesMap = [\r\n  {\r\n    value: 'DEFAULT',\r\n    name: WorkplaceTypes.DEFAULT\r\n  },\r\n  {\r\n    value: 'COMPLEMENTARY',\r\n    name: WorkplaceTypes.COMPLEMENTARY\r\n  },\r\n  {\r\n    value: 'PARKING_LOT',\r\n    name: WorkplaceTypes.PARKING_LOT\r\n  }\r\n];\r\n"],"sourceRoot":"webpack:///"}