{"version":3,"sources":["./src/app/presentation/auth/components/container/container.component.ts","./src/app/presentation/auth/components/container/container.component.html","(webpack)/buildin/harmony-module.js","./src/app/base/password-field/password-field.module.ts","./src/app/presentation/auth/components/login/login.component.ts","./src/app/presentation/auth/components/login/login.component.html","./src/app/presentation/auth/auth.module.ts","./node_modules/angular-oauth2-oidc/__ivy_ngcc__/fesm2015/angular-oauth2-oidc.js","./src/app/presentation/auth/auth-routing.module.ts","./src/app/presentation/auth/components/oauth-login/oauth-login.service.ts","(webpack)/buildin/amd-options.js","./src/app/core/decorators/trigger.decorator.ts","./src/app/presentation/auth/auth.dictionary.ts","./src/app/base/password-field/password-field.component.ts","./src/app/base/password-field/password-field.component.html","./src/app/base/captcha/captcha.component.ts","./src/app/base/captcha/captcha.component.html","./src/app/base/captcha/captcha.module.ts","./src/app/presentation/auth/components/oauth-login/oauth-login-success/oauth-login-success.component.ts","./src/app/presentation/auth/components/oauth-login/oauth-login-success/oauth-login-success.component.html","./src/app/presentation/auth/components/oauth-login/oauth-finish/oauth-finish.component.ts","./src/app/presentation/auth/components/oauth-login/oauth-finish/oauth-finish.component.html","./src/app/presentation/auth/components/oauth-login/oauth-login.component.ts","./src/app/presentation/auth/components/oauth-login/oauth-login.component.html","./src/app/presentation/auth/components/otp-login/otp-login.component.ts","./src/app/presentation/auth/components/otp-login/otp-login.component.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAwE;;;AAQjE,MAAM,kBAAkB;IAN/B;QAOkB,UAAK,GAAG,EAAE,CAAC;KAC5B;;oFAFY,kBAAkB;kGAAlB,kBAAkB;;QCR/B,yEAGE;QAAA,yEACE;QAAA,wEAAyB;QAAA,uDAAS;QAAA,4DAAK;QACvC,sEACE;QAAA,6DAAyB;QAC3B,4DAAM;QACR,4DAAM;QACR,4DAAM;;QALuB,0DAAS;QAAT,0EAAS;;6FDIzB,kBAAkB;cAN9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,4BAA4B;gBACzC,SAAS,EAAE,CAAC,4BAA4B,CAAC;gBACzC,eAAe,EAAE,qEAAuB,CAAC,MAAM;aAChD;gBAEiB,KAAK;kBAApB,mDAAK;;;;;;;;;;;;;AETR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACM;AACqB;;;AAU7D,MAAM,mBAAmB;;kGAAnB,mBAAmB;gKAAnB,mBAAmB,kBAJrB;YACP,4DAAU,CAAC,QAAQ,EAAE;SACtB;mIAEU,mBAAmB,mBANd,gFAAsB,sFAC3B,gFAAsB;6FAKtB,mBAAmB;cAP/B,sDAAQ;eAAC;gBACR,YAAY,EAAE,CAAE,gFAAsB,CAAE;gBACxC,OAAO,EAAE,CAAE,gFAAsB,CAAE;gBACnC,OAAO,EAAE;oBACP,4DAAU,CAAC,QAAQ,EAAE;iBACtB;aACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHsB;AAC6C;AACK;AAEN;AACV;AACR;AACY;;;;;;;;;;;;;;;;;;;;;;;;ICXrD,+EACE;IAAA,0EAKW;;IACb,4DAAe;;IAJX,0DAAkB;IAAlB,2EAAkB;;;;IAJxB,wEACE;IAAA,0JAOe;;IAEf,+EACE;IAAA,oFACE;IAAA,2EAOF;IAFI,2WAAqC;IALvC,4DAOF;IAAA,4DAAiB;IACnB,4DAAe;IAEf,+EACE;IAAA,wFAKA;IAFE,uXAAsC;IAExC,4DAAqB;IACvB,4DAAe;IAEf,6EAQE;IAFA,gVAAuB;;IAEvB,wDACF;;IAAA,4DAAS;IACX,qEAAe;;;IAxCE,0DAAoB;IAApB,gJAAoB;IAUjB,0DAAkB;IAAlB,2EAAkB;IAI9B,0DAAkC;IAAlC,sKAAkC;IASpC,0DAAgB;IAAhB,yEAAgB;IASlB,0DAAoB;IAApB,6EAAoB;IAMpB,0DACF;IADE,sJACF;;;IAGF,wEAA2D;;;IAE3D,wEAME;IAAA,uDACF;;;IAAA,4DAAI;;;IALD,yGAAyC;IAI1C,0DACF;IADE,4NACF;;;IArDF,wEACE;IAAA,6IAyCe;IAEf,uIAA2D;IAE3D,qHAOI;IACN,qEAAe;;;IArDE,0DAAY;IAAZ,+EAAY;IA2Cd,0DAA+B;IAA/B,yGAA+B;IAExC,0DAAqB;IAArB,wFAAqB;;;;IAa7B,kFAAiD;IAAxB,uUAAuB;IAAC,4DAAc;;;IAI/D,qEAAsD;;;IAAhC,uJAAyB;;ADtC1C,MAAM,cAAc;IA2BzB,YACU,KAAkB,EAClB,KAAkB,EAClB,cAA6B,EAC7B,MAAsB,EACtB,cAA6B,EAC7B,IAAuB;QALvB,UAAK,GAAL,KAAK,CAAa;QAClB,UAAK,GAAL,KAAK,CAAa;QAClB,mBAAc,GAAd,cAAc,CAAe;QAC7B,WAAM,GAAN,MAAM,CAAgB;QACtB,mBAAc,GAAd,cAAc,CAAe;QAC7B,SAAI,GAAJ,IAAI,CAAmB;QAhC1B,UAAK,GAAG,EAAE,CAAC;QACX,aAAQ,GAAG,EAAE,CAAC;QAGd,UAAK,GAAG,IAAI,oDAAe,CAAW,KAAK,CAAE,CAAC;QAC9C,YAAO,GAAG,IAAI,oDAAe,CAAW,KAAK,CAAE,CAAC;QAChD,oBAAe,GAAY,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;QAEtD,gBAAW,GAAY,IAAI,CAAC;QAC5B,WAAM,GAAsB,OAAO,CAAC;QAWpC,iBAAY,GAAc,IAAI,wDAAS,CAAE;YAC9C,iBAAiB,EAAE,IAAI,0DAAW,CAAE,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAAE;SAChE,CAAE,CAAC;IAYJ,CAAC;IAGM,aAAa,CAAE,MAAM;QAC1B,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;YACtB,OAAO;SACR;QAED,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;IACvD,CAAC;IAEM,WAAW,CAAE,QAAQ,GAAG,IAAI;QACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;QAC1B,MAAM,WAAW,GAAG,yDAAW,CAAC,iBAAiB,CAC/C,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,QAAQ,CACd,CAAC;QACF,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK;aAClB,KAAK,CAAE,WAAW,CAAE;aACpB,IAAI,CACH,4DAAK,EAAE,EACP,gEAAS,CAAE,CAAE,EAAC,OAAO,EAAE,IAAI,EAAC,EAAG,EAAE;YAC/B,IAAI,OAAO,EAAE;gBACX,IAAI,CAAC,KAAK,CAAC,OAAO,CAChB,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,IAAI,EACT,WAAW,CACZ,CAAC;gBACF,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAE,IAAI,CAAE,CAAC;gBAC5B,OAAO,qDAAQ,CAAE;oBACf,OAAO,EAAE,+CAAE,CAAE,OAAO,CAAE;oBACtB,IAAI,EAAE,+CAAE,CAAE,IAAI,CAAE;oBAChB,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,+CAAE,CAAE,IAAI,CAAE;oBAC7D,IAAI,EAAE,QAAQ;wBACZ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAE;4BAClC,OAAO,EAAE,IAAI,CAAC,OAAO;yBACtB,CAAE;wBACH,CAAC,CAAC,+CAAE,CAAE,IAAI,CAAE;iBACf,CAAE,CAAC;aACL;iBAAM;gBACL,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAC/B,OAAO,qDAAQ,CAAE;oBACf,OAAO,EAAE,+CAAE,CAAE,OAAO,CAAE;oBACtB,IAAI,EAAE,+CAAE,CAAE,IAAI,CAAE;oBAChB,GAAG,EAAE,+CAAE,CAAE,IAAI,CAAE;oBACf,IAAI,EAAE,+CAAE,CAAE,IAAI,CAAE;iBACjB,CAAE,CAAC;aACL;QACH,CAAC,CAAE,EACH,gEAAS,CAAE,CAAE,EAAC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAC,EAAG,EAAE;;YAC1C,IAAI,QAAQ,IAAI,OAAO,IAAI,GAAG,IAAI,QAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,0CAAE,cAAc,GAAE;gBAC7D,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACrC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAE;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,CACpC,4BAA4B,CAC7B;oBACD,SAAS,EAAE,IAAI,CAAC,aAAa;oBAC7B,MAAM,EAAE,GAAG,EAAE;wBACX,IAAI,CAAC,cAAc;6BAChB,SAAS,CAAE,EAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAE;6BACxD,IAAI,CAAE,4DAAK,EAAE,CAAE;6BACf,SAAS,CAAE,GAAG,EAAE;4BACf,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;4BAC1B,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAE,4DAAK,CAAE,IAAI,CAAE,CAAE,CAAC;4BACtD,2BAA2B;wBAC7B,CAAC,CAAE,CAAC;oBACR,CAAC;oBACD,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAE,MAAM,CAAE;oBACjD,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAE,QAAQ,CAAE;iBACxD,CAAE,CAAC;gBACJ,OAAO,+CAAE,CAAE,IAAI,CAAE,CAAC;aACnB;iBAAM;gBACL,OAAO,OAAO;oBACZ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAE,4DAAK,CAAE,IAAI,CAAE,CAAE;oBACvD,CAAC,CAAC,+CAAE,CAAE,KAAK,CAAE,CAAC;aACjB;QACH,CAAC,CAAE,CACJ;aACA,SAAS,CAAE,CAAE,KAAc,EAAG,EAAE;YAC/B,IAAI,KAAK,KAAK,IAAI,EAAE;gBAClB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAE,CAAC,KAAK,CAAE,CAAC;aAC3B;YACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;QAC7B,CAAC,CAAE,CAAC;IACR,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAC9B,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAGD,cAAc;QACZ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IAGM,WAAW,CAAE,KAAa;QAC/B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAGM,cAAc,CAAE,QAAgB;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAE,CAAE,UAAU,EAAG,EAAE;YAC/D,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC;YAChC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QACjC,CAAC,CAAE,CAAC;QAEJ,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC;SACjE;QAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;IACtC,CAAC;IAED,eAAe;QACb,UAAU,CAAE,GAAG,EAAE;YACf,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QAC3B,CAAC,EAAE,GAAG,CAAE,CAAC;IACX,CAAC;IAEO,cAAc;;QACpB,IAAI,CAAC,WAAW;YACd,WAAI,CAAC,KAAK,0CAAE,MAAM,IAAG,CAAC;gBACtB,WAAI,CAAC,QAAQ,0CAAE,MAAM,IAAG,CAAC;gBACzB,CAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAE,CAAC;IAC3D,CAAC;;4EA9KU,cAAc;8FAAd,cAAc;;;;;;;;4JAAd,yBAAqB;;QC3BlC,mFACE;QAAA,0EACE;QAAA,4HAsDe;QACjB,4DAAO;QACT,4DAAgB;QAEhB,sMAEc;QAEd,sMAEc;;;QAjEE,0DAAuB;QAAvB,gFAAuB;QACpB,0DAAoB;QAApB,kFAAoB;;AD4CrC;IADC,8FAAa,EAAE;2CACE;AAkHlB;IADC,kFAAO,CAAE,gBAAgB,CAAE;oDAK3B;AAGD;IADC,kFAAO,CAAE,gBAAgB,CAAE;iDAG3B;AAGD;IADC,kFAAO,CAAE,gBAAgB,CAAE;oDAG3B;6FAnJU,cAAc;cAN1B,uDAAS;eAAE;gBACV,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAE,wBAAwB,CAAE;gBACvC,eAAe,EAAE,qEAAuB,CAAC,MAAM;aAChD;2gBAcQ,WAAW;kBADjB,uDAAS;mBAAE,YAAY,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;YAIlC,aAAa;kBADnB,uDAAS;mBAAE,eAAe,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;YAI5C,GAAG,MAmBI,aAAa;kBADnB,0DAAY;mBAAE,eAAe,EAAE,CAAE,QAAQ,CAAE;YAgG5C,cAAc,MAOP,WAAW,MAKX,cAAc;;;;;;;;;;;;;AE5KvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACN;AACwC;AAClC;AACW;AACsB;AACZ;AACW;AACM;AACf;AACF;AAClB;AACsE;AACpB;AACvC;AACT;AAC8C;AAC7C;AACC;;;;AAwB/C,MAAM,UAAU;IACrB;QACE,mFAAiB,CAAC,GAAG,CAAC,kFAAc,CAAC,CAAC;IACxC,CAAC;;yFAHU,UAAU;8IAAV,UAAU,mBAFV,CAAC,gHAAiB,CAAC,YAXrB;YACP,4DAAY;YACZ,sEAAiB;YACjB,4DAAU,CAAC,QAAQ,EAAE;YACrB,8FAAmB;YACnB,gEAAW,CAAC,OAAO,EAAE;YACrB,kEAAa;YACb,2EAAa;YACb,mEAAmB;YACnB,oEAAe;SAChB;mIAGU,UAAU,mBApBnB,gFAAc;QACd,2FAAiB;QACjB,4FAAkB;QAClB,iGAAmB;QACnB,qIAA0B;QAC1B,iHAAoB,aAGpB,4DAAY;QACZ,sEAAiB,gEAEjB,8FAAmB,oEAEnB,kEAAa;QACb,2EAAa;QACb,mEAAmB;QACnB,oEAAe;6FAIN,UAAU;cAtBtB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,gFAAc;oBACd,2FAAiB;oBACjB,4FAAkB;oBAClB,iGAAmB;oBACnB,qIAA0B;oBAC1B,iHAAoB;iBACrB;gBACD,OAAO,EAAE;oBACP,4DAAY;oBACZ,sEAAiB;oBACjB,4DAAU,CAAC,QAAQ,EAAE;oBACrB,8FAAmB;oBACnB,gEAAW,CAAC,OAAO,EAAE;oBACrB,kEAAa;oBACb,2EAAa;oBACb,mEAAmB;oBACnB,oEAAe;iBAChB;gBACD,SAAS,EAAE,CAAC,gHAAiB,CAAC;aAC/B;;;;;;;;;;;;;;ACzCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+F;AACtC;AACqC;AAC5D;AAC+C;AAC6C;;AAEtF;AACO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,yEAAyE;AACnJ,+BAA+B,gEAAyB,EAAE,sEAAsE;AAChI,0DAA0D,mEAA4B;AACtF,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,mCAAmC;AAC3F,sBAAsB,gEAAyB,EAAE,oDAAoD;AACrG,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAS;AACxB;AACA,6EAA6E,yBAAyB,iBAAiB;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,sCAAsC;AACpG,yBAAyB,gEAAyB,EAAE,0DAA0D;AAC9G,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,eAAe,EAAE;;AAEtkCAAkC;AAClC;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uDAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvmBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,wCAAwC;AAC1G,2BAA2B,gEAAyB,EAAE,8DAA8D;AACpH,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC,kDAAkD,4CAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6DAAM;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,kBAAkB,0DAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,GAAG,6DAAM;AAClB,8EAA8E,mEAAY;AAC1F;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6DAAM;AACxB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,+CAAE;AACpD,sBAAsB,4DAAK;AAC3B;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+CAAE;AAChD,sBAAsB,4DAAK;AAC3B;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,4DAA4D,qBAAqB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,gEAAW;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gEAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,gEAAW;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gEAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+DAAU,EAAE,yCAAyC;AAC9E;AACA;AACA;AACA,mCAAmC,cAAc,GAAG,uBAAuB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb,sDAAsD,UAAU;AAChE;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+DAAU,EAAE,yCAAyC;AAClF;AACA;AACA;AACA,8BAA8B,gEAAW;AACzC;AACA,uCAAuC,cAAc,GAAG,uBAAuB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU;AAC7D,sBAAsB,gEAAS;AAC/B;AACA,2BAA2B,iDAAI,qFAAqF,0DAAG,yCAAyC,0DAAG;AACnK;AACA;AACA,2BAA2B,+CAAE;AAC7B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,wCAAwC,6DAAM,uCAAuC,4DAAK;AAC1F,yCAAyC,6DAAM,sCAAsC,4DAAK;AAC1F,wBAAwB,+CAAE,2DAA2D,4DAAK;AAC1F,eAAe,iDAAI;AACnB,kBAAkB,0DAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,QAAQ,wCAAwC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,MAAM,UAAU,OAAO,OAAO,IAAI,QAAQ,KAAK;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6DAAM;AACxB;AACA,gDAAgD,4DAAK;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG;AACpG,eAAe,uDAAS;AACxsBAAsB,6DAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+DAAU,EAAE,yCAAyC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gEAAW;AACrC;AACA,mCAAmC,cAAc,GAAG,uBAAuB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjiCAAiC,0BAA0B,kBAAkB,cAAc;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACbgCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,4BAA4B,EAAE,UAAU,EAAE;AAC1C,4BAA4B,EAAE,WAAW,EAAE;AAC3C;AACA;AACA,6BAA6B,+DAAU,EAAE,yCAAyC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,sBAAsB,6DAAM;AAC5B;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+DAAU,EAAE,yCAAyC;AAC9E,0BAA0B,gEAAW;AACrC;AACA,mCAAmC,cAAc,GAAG,uBAAuB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,UAAU;AAChG;AACA;AACA,oCAAoC,+CAAE;AACtC;AACA;AACA;AACA;AACA;AACA,uFAAuF,UAAU;AACjG;A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","file":"auth-auth-module.js","sourcesContent":["import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-container',\r\n  templateUrl: './container.component.html',\r\n  styleUrls: ['./container.component.less'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContainerComponent {\r\n  @Input() public title = '';\r\n}\r\n","<div class=\"container\"\r\n     style=\"background-image: url('./assets/images/auth_bg.svg')\"\r\n>\r\n  <div class=\"container__content\">\r\n    <h1 class=\"_text-center\">{{title}}</h1>\r\n    <div>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n</div>\r\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import { NgModule } from '@angular/core';\r\nimport { CoreModule } from '@core/core.module';\r\nimport { PasswordFieldComponent } from './password-field.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ PasswordFieldComponent ],\r\n  exports: [ PasswordFieldComponent ],\r\n  imports: [\r\n    CoreModule.forChild()\r\n  ]\r\n})\r\nexport class PasswordFieldModule {\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostListener,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Subscriptions } from '@core/decorators/subscriptions.decorator';\r\nimport { UserService } from '@core/services/user.service';\r\nimport { BehaviorSubject, forkJoin, of, Subscription } from 'rxjs';\r\nimport { first, mapTo, switchMap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth.service';\r\nimport { Trigger } from '@core/decorators/trigger.decorator';\r\nimport { DpaApiService } from '@src/app/shared/http/services/dpa-api.service';\r\nimport { NzModalService } from 'ng-zorro-antd/modal';\r\nimport { TranslatePipe } from '@ngx-translate/core';\r\nimport { AuthMethod } from '@presentation/auth/auth.model';\r\n\r\n@Component( {\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: [ './login.component.less' ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n} )\r\nexport class LoginComponent implements OnInit, AfterViewInit {\r\n  public login = '';\r\n  public password = '';\r\n  public isCaptchaResolved: boolean;\r\n  public isBotDetected: boolean;\r\n  public error = new BehaviorSubject<boolean>( false );\r\n  public loading = new BehaviorSubject<boolean>( false );\r\n  public oauth2Available: boolean = this.$auth.oauth2Available;\r\n  public oauth2AuthorizationUrl: string;\r\n  public isFormValid: boolean = true;\r\n  public method: AuthMethod | null = 'basic';\r\n\r\n  @ViewChild( 'captchaRef', {static: false} )\r\n  public captchaElem: any;\r\n\r\n  @ViewChild( 'dpaContentTpl', {static: false} )\r\n  public dpaContentTpl: any;\r\n\r\n  @Subscriptions()\r\n  sub: Subscription;\r\n\r\n  public reactiveForm: FormGroup = new FormGroup( {\r\n    recaptchaReactive: new FormControl( null, Validators.required ),\r\n  } );\r\n\r\n  htmlBodyDpa: string;\r\n\r\n  constructor(\r\n    private $auth: AuthService,\r\n    private _user: UserService,\r\n    private $dpaApiService: DpaApiService,\r\n    private $modal: NzModalService,\r\n    private $translatePipe: TranslatePipe,\r\n    private $cdr: ChangeDetectorRef\r\n  ) {\r\n  }\r\n\r\n  @HostListener( 'keydown.enter', [ '$event' ] )\r\n  public keyPressEnter( $event ): void {\r\n    if (this.loading.value) {\r\n      return;\r\n    }\r\n\r\n    this.loginAction();\r\n  }\r\n\r\n  get showCaptcha(): boolean {\r\n    return this.isBotDetected && !this.isCaptchaResolved;\r\n  }\r\n\r\n  public loginAction( checkDpa = true ): void {\r\n    this.loading.next( true );\r\n    const credentials = AuthService.base64credentials(\r\n      this.login,\r\n      this.password\r\n    );\r\n    this.sub = this.$auth\r\n      .login( credentials )\r\n      .pipe(\r\n        first(),\r\n        switchMap( ( {success, data} ) => {\r\n          if (success) {\r\n            this._user.setUser(\r\n              data.labelId,\r\n              data.deviceId,\r\n              data.uuid,\r\n              credentials\r\n            );\r\n            this.$auth.setLogin( true );\r\n            return forkJoin( {\r\n              success: of( success ),\r\n              data: of( data ),\r\n              dpa: checkDpa ? this.$dpaApiService.getLastDPA() : of( null ),\r\n              sign: checkDpa\r\n                ? this.$dpaApiService.checkLastDPA( {\r\n                  labelId: data.labelId,\r\n                } )\r\n                : of( null ),\r\n            } );\r\n          } else {\r\n            this.isCaptchaResolved = false;\r\n            return forkJoin( {\r\n              success: of( success ),\r\n              data: of( data ),\r\n              dpa: of( null ),\r\n              sign: of( null ),\r\n            } );\r\n          }\r\n        } ),\r\n        switchMap( ( {success, data, dpa, sign} ) => {\r\n          if (checkDpa && success && dpa && !sign?.data?.RESULT_SUCCESS) {\r\n            this.htmlBodyDpa = dpa.data.htmlBody;\r\n            this.$modal.confirm( {\r\n              nzWidth: '80%',\r\n              nzTitle: this.$translatePipe.transform(\r\n                'Sign the Terms of Service?'\r\n              ),\r\n              nzContent: this.dpaContentTpl,\r\n              nzOnOk: () => {\r\n                this.$dpaApiService\r\n                  .assignDPA( {dpaId: dpa.data.id, labelId: data.labelId} )\r\n                  .pipe( first() )\r\n                  .subscribe( () => {\r\n                    this.loading.next( true );\r\n                    this.$auth.initializeSettings().pipe( mapTo( true ) );\r\n                    // this.loginAction(false);\r\n                  } );\r\n              },\r\n              nzOkText: this.$translatePipe.transform( 'Sign' ),\r\n              nzCancelText: this.$translatePipe.transform( 'Refuse' ),\r\n            } );\r\n            return of( null );\r\n          } else {\r\n            return success\r\n              ? this.$auth.initializeSettings().pipe( mapTo( true ) )\r\n              : of( false );\r\n          }\r\n        } )\r\n      )\r\n      .subscribe( ( state: boolean ) => {\r\n        if (state !== null) {\r\n          this.error.next( !state );\r\n        }\r\n        this.loading.next( false );\r\n      } );\r\n  }\r\n\r\n  resolved(): void {\r\n    this.isCaptchaResolved = true;\r\n    this.resetLoginForm();\r\n  }\r\n\r\n  @Trigger( 'checkFormValid' )\r\n  resetLoginForm(): void {\r\n    this.error.next( false );\r\n    this.login = '';\r\n    this.password = '';\r\n  }\r\n\r\n  @Trigger( 'checkFormValid' )\r\n  public changeLogin( login: string ): void {\r\n    this.login = login;\r\n  }\r\n\r\n  @Trigger( 'checkFormValid' )\r\n  public changePassword( password: string ): void {\r\n    this.password = password;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.sub = this.$auth.isBotDetected$.subscribe( ( isDetected ) => {\r\n      this.isBotDetected = isDetected;\r\n      this.isCaptchaResolved = false;\r\n    } );\r\n\r\n    if (this.oauth2Available) {\r\n      this.oauth2AuthorizationUrl = this.$auth.oauth2AuthorizationUrl;\r\n    }\r\n\r\n    this.method = this.$auth.authMethod;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout( () => {\r\n      this.checkFormValid();\r\n      this.$cdr.markForCheck();\r\n    }, 100 );\r\n  }\r\n\r\n  private checkFormValid(): void {\r\n    this.isFormValid =\r\n      this.login?.length > 0 &&\r\n      this.password?.length > 0 &&\r\n      ( this.isBotDetected ? this.isCaptchaResolved : true );\r\n  }\r\n}\r\n","<app-container title=\"Вход в систему\">\r\n  <form nz-form [nzLayout]=\"'vertical'\">\r\n    <ng-container *ngIf=\"!showCaptcha; else captcha\">\r\n      <ng-container *ngIf=\"method\">\r\n        <nz-form-item *ngIf=\"error | async as error\">\r\n          <nz-alert\r\n            nzShowIcon\r\n            [nzType]=\"'error'\"\r\n            [nzMessage]=\"'WrongCredentials' | translate\"\r\n          >\r\n          </nz-alert>\r\n        </nz-form-item>\r\n\r\n        <nz-form-item>\r\n          <nz-input-group [nzSize]=\"'large'\">\r\n            <input\r\n              nz-input\r\n              name=\"login\"\r\n              [placeholder]=\"'Имя пользователя'\"\r\n              [ngModel]=\"login\"\r\n              (ngModelChange)=\"changeLogin($event)\"\r\n            />\r\n          </nz-input-group>\r\n        </nz-form-item>\r\n\r\n        <nz-form-item>\r\n          <app-password-field\r\n            [size]=\"'large'\"\r\n            [value]=\"password\"\r\n            (valueChange)=\"changePassword($event)\"\r\n          >\r\n          </app-password-field>\r\n        </nz-form-item>\r\n\r\n        <button\r\n          nz-button\r\n          [nzType]=\"'primary'\"\r\n          [disabled]=\"!isFormValid\"\r\n          [nzLoading]=\"loading | async\"\r\n          [nzBlock]=\"true\"\r\n          (click)=\"loginAction()\"\r\n        >\r\n          {{'Login' | translate}}\r\n        </button>\r\n      </ng-container>\r\n\r\n      <nz-divider *ngIf=\"oauth2Available && method\"></nz-divider>\r\n\r\n      <a *ngIf=\"oauth2Available\"\r\n         nz-button\r\n         [nzType]=\"method ? 'default' : 'primary'\"\r\n         [nzBlock]=\"true\"\r\n         [href]=\"oauth2AuthorizationUrl\"\r\n      >\r\n        {{ \"LoginWithSso\" | dictionary | translate }}\r\n      </a>\r\n    </ng-container>\r\n  </form>\r\n</app-container>\r\n\r\n<ng-template #captcha>\r\n  <app-captcha width=\"304\" (resolved)=\"resolved()\"></app-captcha>\r\n</ng-template>\r\n\r\n<ng-template #dpaContentTpl>\r\n  <div class=\"dpa-text\" [innerHTML]=\"htmlBodyDpa\"></div>\r\n</ng-template>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { PasswordFieldModule } from '@base/password-field/password-field.module';\r\nimport { CoreModule } from '@core/core.module';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { ContainerComponent } from './components/container/container.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { OtpLoginComponent } from './components/otp-login/otp-login.component';\r\nimport { OauthLoginComponent } from './components/oauth-login/oauth-login.component';\r\nimport { DictionaryService } from '@core/services/dictionary.service';\r\nimport { AuthDictionary } from '@presentation/auth/auth.dictionary';\r\nimport { OAuthModule } from 'angular-oauth2-oidc';\r\nimport { OauthLoginSuccessComponent } from './components/oauth-login/oauth-login-success/oauth-login-success.component';\r\nimport { OauthFinishComponent } from './components/oauth-login/oauth-finish/oauth-finish.component';\r\nimport { CaptchaModule } from '@base/captcha/captcha.module';\r\nimport { NzSpaceModule } from 'ng-zorro-antd/space';\r\nimport { OauthLoginService } from '@presentation/auth/components/oauth-login/oauth-login.service';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    OtpLoginComponent,\r\n    ContainerComponent,\r\n    OauthLoginComponent,\r\n    OauthLoginSuccessComponent,\r\n    OauthFinishComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AuthRoutingModule,\r\n    CoreModule.forChild(),\r\n    PasswordFieldModule,\r\n    OAuthModule.forRoot(),\r\n    NzSpaceModule,\r\n    CaptchaModule,\r\n    ReactiveFormsModule,\r\n    TranslateModule,\r\n  ],\r\n  providers: [OauthLoginService],\r\n})\r\nexport class AuthModule {\r\n  constructor() {\r\n    DictionaryService.set(AuthDictionary);\r\n  }\r\n}\r\n","import { Injectable, NgZone, Optional, Inject, NgModule, InjectionToken } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { HttpHeaders, HttpParams, HttpClient, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { __awaiter } from 'tslib';\nimport { Subject, of, from, race, throwError, combineLatest, merge } from 'rxjs';\nimport { filter, tap, debounceTime, delay, switchMap, map, first, catchError, timeout, take, mergeMap } from 'rxjs/operators';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nclass DateTimeProvider {\r\n}\r\nclass SystemDateTimeProvider extends DateTimeProvider {\r\n    now() {\r\n        return Date.now();\r\n    }\r\n    new() {\r\n        return new Date();\r\n    }\r\n}\nSystemDateTimeProvider.ɵfac = function SystemDateTimeProvider_Factory(t) { return ɵSystemDateTimeProvider_BaseFactory(t || SystemDateTimeProvider); };\nSystemDateTimeProvider.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SystemDateTimeProvider, factory: SystemDateTimeProvider.ɵfac });\nconst ɵSystemDateTimeProvider_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(SystemDateTimeProvider);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SystemDateTimeProvider, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\r\n * Additional options that can be passed to tryLogin.\r\n */\r\nclass LoginOptions {\r\n    constructor() {\r\n        /**\r\n         * Set this to true to disable the nonce\r\n         * check which is used to avoid\r\n         * replay attacks.\r\n         * This flag should never be true in\r\n         * production environments.\r\n         */\r\n        this.disableNonceCheck = false;\r\n        /**\r\n         * Normally, you want to clear your hash fragment after\r\n         * the lib read the token(s) so that they are not displayed\r\n         * anymore in the url. If not, set this to true. For code flow\r\n         * this controls removing query string values.\r\n         */\r\n        this.preventClearHashAfterLogin = false;\r\n    }\r\n}\r\n/**\r\n * Defines the logging interface the OAuthService uses\r\n * internally. Is compatible with the `console` object,\r\n * but you can provide your own implementation as well\r\n * through dependency injection.\r\n */\r\nclass OAuthLogger {\r\n}\r\n/**\r\n * Defines a simple storage that can be used for\r\n * storing the tokens at client side.\r\n * Is compatible to localStorage and sessionStorage,\r\n * but you can also create your own implementations.\r\n */\r\nclass OAuthStorage {\r\n}\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.data = new Map();\r\n    }\r\n    getItem(key) {\r\n        return this.data.get(key);\r\n    }\r\n    removeItem(key) {\r\n        this.data.delete(key);\r\n    }\r\n    setItem(key, data) {\r\n        this.data.set(key, data);\r\n    }\r\n}\nMemoryStorage.ɵfac = function MemoryStorage_Factory(t) { return new (t || MemoryStorage)(); };\nMemoryStorage.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MemoryStorage, factory: MemoryStorage.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MemoryStorage, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\r\n/**\r\n * Represents the received tokens, the received state\r\n * and the parsed claims from the id-token.\r\n */\r\nclass ReceivedTokens {\r\n}\n\n// see: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_.22Unicode_Problem.22\r\nfunction b64DecodeUnicode(str) {\r\n    const base64 = str.replace(/\\-/g, '+').replace(/\\_/g, '/');\r\n    return decodeURIComponent(atob(base64)\r\n        .split('')\r\n        .map(function (c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n    })\r\n        .join(''));\r\n}\r\nfunction base64UrlEncode(str) {\r\n    const base64 = btoa(str);\r\n    return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r\n}\n\n/**\r\n * Interface for Handlers that are hooked in to\r\n * validate tokens.\r\n */\r\nclass ValidationHandler {\r\n}\r\n/**\r\n * This abstract implementation of ValidationHandler already implements\r\n * the method validateAtHash. However, to make use of it,\r\n * you have to override the method calcHash.\r\n */\r\nclass AbstractValidationHandler {\r\n    /**\r\n     * Validates the at_hash in an id_token against the received access_token.\r\n     */\r\n    validateAtHash(params) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let hashAlg = this.inferHashAlgorithm(params.idTokenHeader);\r\n            let tokenHash = yield this.calcHash(params.accessToken, hashAlg); // sha256(accessToken, { asString: true });\r\n            let leftMostHalf = tokenHash.substr(0, tokenHash.length / 2);\r\n            let atHash = base64UrlEncode(leftMostHalf);\r\n            let claimsAtHash = params.idTokenClaims['at_hash'].replace(/=/g, '');\r\n            if (atHash !== claimsAtHash) {\r\n                console.error('exptected at_hash: ' + atHash);\r\n                console.error('actual at_hash: ' + claimsAtHash);\r\n            }\r\n            return atHash === claimsAtHash;\r\n        });\r\n    }\r\n    /**\r\n     * Infers the name of the hash algorithm to use\r\n     * from the alg field of an id_token.\r\n     *\r\n     * @param jwtHeader the id_token's parsed header\r\n     */\r\n    inferHashAlgorithm(jwtHeader) {\r\n        let alg = jwtHeader['alg'];\r\n        if (!alg.match(/^.S[0-9]{3}$/)) {\r\n            throw new Error('Algorithm not supported: ' + alg);\r\n        }\r\n        return 'sha-' + alg.substr(2);\r\n    }\r\n}\n\nclass UrlHelperService {\r\n    getHashFragmentParams(customHashFragment) {\r\n        let hash = customHashFragment || window.location.hash;\r\n        hash = decodeURIComponent(hash);\r\n        if (hash.indexOf('#') !== 0) {\r\n            return {};\r\n        }\r\n        const questionMarkPosition = hash.indexOf('?');\r\n        if (questionMarkPosition > -1) {\r\n            hash = hash.substr(questionMarkPosition + 1);\r\n        }\r\n        else {\r\n            hash = hash.substr(1);\r\n        }\r\n        return this.parseQueryString(hash);\r\n    }\r\n    parseQueryString(queryString) {\r\n        const data = {};\r\n        let pairs, pair, separatorIndex, escapedKey, escapedValue, key, value;\r\n        if (queryString === null) {\r\n            return data;\r\n        }\r\n        pairs = queryString.split('&');\r\n        for (let i = 0; i < pairs.length; i++) {\r\n            pair = pairs[i];\r\n            separatorIndex = pair.indexOf('=');\r\n            if (separatorIndex === -1) {\r\n                escapedKey = pair;\r\n                escapedValue = null;\r\n            }\r\n            else {\r\n                escapedKey = pair.substr(0, separatorIndex);\r\n                escapedValue = pair.substr(separatorIndex + 1);\r\n            }\r\n            key = decodeURIComponent(escapedKey);\r\n            value = decodeURIComponent(escapedValue);\r\n            if (key.substr(0, 1) === '/') {\r\n                key = key.substr(1);\r\n            }\r\n            data[key] = value;\r\n        }\r\n        return data;\r\n    }\r\n}\nUrlHelperService.ɵfac = function UrlHelperService_Factory(t) { return new (t || UrlHelperService)(); };\nUrlHelperService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: UrlHelperService, factory: UrlHelperService.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UrlHelperService, [{\n        type: Injectable\n    }], null, null); })();\n\nclass OAuthEvent {\r\n    constructor(type) {\r\n        this.type = type;\r\n    }\r\n}\r\nclass OAuthSuccessEvent extends OAuthEvent {\r\n    constructor(type, info = null) {\r\n        super(type);\r\n        this.info = info;\r\n    }\r\n}\r\nclass OAuthInfoEvent extends OAuthEvent {\r\n    constructor(type, info = null) {\r\n        super(type);\r\n        this.info = info;\r\n    }\r\n}\r\nclass OAuthErrorEvent extends OAuthEvent {\r\n    constructor(type, reason, params = null) {\r\n        super(type);\r\n        this.reason = reason;\r\n        this.params = params;\r\n    }\r\n}\n\nclass AuthConfig {\r\n    constructor(json) {\r\n        /**\r\n         * The client's id as registered with the auth server\r\n         */\r\n        this.clientId = '';\r\n        /**\r\n         * The client's redirectUri as registered with the auth server\r\n         */\r\n        this.redirectUri = '';\r\n        /**\r\n         * An optional second redirectUri where the auth server\r\n         * redirects the user to after logging out.\r\n         */\r\n        this.postLogoutRedirectUri = '';\r\n        /**\r\n         * Defines whether to use 'redirectUri' as a replacement\r\n         * of 'postLogoutRedirectUri' if the latter is not set.\r\n         */\r\n        this.redirectUriAsPostLogoutRedirectUriFallback = true;\r\n        /**\r\n         * The auth server's endpoint that allows to log\r\n         * the user in when using implicit flow.\r\n         */\r\n        this.loginUrl = '';\r\n        /**\r\n         * The requested scopes\r\n         */\r\n        this.scope = 'openid profile';\r\n        this.resource = '';\r\n        this.rngUrl = '';\r\n        /**\r\n         * Defines whether to use OpenId Connect during\r\n         * implicit flow.\r\n         */\r\n        this.oidc = true;\r\n        /**\r\n         * Defines whether to request an access token during\r\n         * implicit flow.\r\n         */\r\n        this.requestAccessToken = true;\r\n        this.options = null;\r\n        /**\r\n         * The issuer's uri.\r\n         */\r\n        this.issuer = '';\r\n        /**\r\n         * The logout url.\r\n         */\r\n        this.logoutUrl = '';\r\n        /**\r\n         * Defines whether to clear the hash fragment after logging in.\r\n         */\r\n        this.clearHashAfterLogin = true;\r\n        /**\r\n         * Url of the token endpoint as defined by OpenId Connect and OAuth 2.\r\n         */\r\n        this.tokenEndpoint = null;\r\n        /**\r\n         * Url of the revocation endpoint as defined by OpenId Connect and OAuth 2.\r\n         */\r\n        this.revocationEndpoint = null;\r\n        /**\r\n         * Names of known parameters sent out in the TokenResponse. https://tools.ietf.org/html/rfc6749#section-5.1\r\n         */\r\n        this.customTokenParameters = [];\r\n        /**\r\n         * Url of the userinfo endpoint as defined by OpenId Connect.\r\n         */\r\n        this.userinfoEndpoint = null;\r\n        this.responseType = '';\r\n        /**\r\n         * Defines whether additional debug information should\r\n         * be shown at the console. Note that in certain browsers\r\n         * the verbosity of the console needs to be explicitly set\r\n         * to include Debug level messages.\r\n         */\r\n        this.showDebugInformation = false;\r\n        /**\r\n         * The redirect uri used when doing silent refresh.\r\n         */\r\n        this.silentRefreshRedirectUri = '';\r\n        this.silentRefreshMessagePrefix = '';\r\n        /**\r\n         * Set this to true to display the iframe used for\r\n         * silent refresh for debugging.\r\n         */\r\n        this.silentRefreshShowIFrame = false;\r\n        /**\r\n         * Timeout for silent refresh.\r\n         * @internal\r\n         * depreacted b/c of typo, see silentRefreshTimeout\r\n         */\r\n        this.siletRefreshTimeout = 1000 * 20;\r\n        /**\r\n         * Timeout for silent refresh.\r\n         */\r\n        this.silentRefreshTimeout = 1000 * 20;\r\n        /**\r\n         * Some auth servers don't allow using password flow\r\n         * w/o a client secret while the standards do not\r\n         * demand for it. In this case, you can set a password\r\n         * here. As this password is exposed to the public\r\n         * it does not bring additional security and is therefore\r\n         * as good as using no password.\r\n         */\r\n        this.dummyClientSecret = null;\r\n        /**\r\n         * Defines whether https is required.\r\n         * The default value is remoteOnly which only allows\r\n         * http for localhost, while every other domains need\r\n         * to be used with https.\r\n         */\r\n        this.requireHttps = 'remoteOnly';\r\n        /**\r\n         * Defines whether every url provided by the discovery\r\n         * document has to start with the issuer's url.\r\n         */\r\n        this.strictDiscoveryDocumentValidation = true;\r\n        /**\r\n         * JSON Web Key Set (https://tools.ietf.org/html/rfc7517)\r\n         * with keys used to validate received id_tokens.\r\n         * This is taken out of the disovery document. Can be set manually too.\r\n         */\r\n        this.jwks = null;\r\n        /**\r\n         * Map with additional query parameter that are appended to\r\n         * the request when initializing implicit flow.\r\n         */\r\n        this.customQueryParams = null;\r\n        this.silentRefreshIFrameName = 'angular-oauth-oidc-silent-refresh-iframe';\r\n        /**\r\n         * Defines when the token_timeout event should be raised.\r\n         * If you set this to the default value 0.75, the event\r\n         * is triggered after 75% of the token's life time.\r\n         */\r\n        this.timeoutFactor = 0.75;\r\n        /**\r\n         * If true, the lib will try to check whether the user\r\n         * is still logged in on a regular basis as described\r\n         * in http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification\r\n         */\r\n        this.sessionChecksEnabled = false;\r\n        /**\r\n         * Interval in msec for checking the session\r\n         * according to http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification\r\n         */\r\n        this.sessionCheckIntervall = 3 * 1000;\r\n        /**\r\n         * Url for the iframe used for session checks\r\n         */\r\n        this.sessionCheckIFrameUrl = null;\r\n        /**\r\n         * Name of the iframe to use for session checks\r\n         */\r\n        this.sessionCheckIFrameName = 'angular-oauth-oidc-check-session-iframe';\r\n        /**\r\n         * This property has been introduced to disable at_hash checks\r\n         * and is indented for Identity Provider that does not deliver\r\n         * an at_hash EVEN THOUGH its recommended by the OIDC specs.\r\n         * Of course, when disabling these checks then we are bypassing\r\n         * a security check which means we are more vulnerable.\r\n         */\r\n        this.disableAtHashCheck = false;\r\n        /**\r\n         * Defines wether to check the subject of a refreshed token after silent refresh.\r\n         * Normally, it should be the same as before.\r\n         */\r\n        this.skipSubjectCheck = false;\r\n        this.useIdTokenHintForSilentRefresh = false;\r\n        /**\r\n         * Defined whether to skip the validation of the issuer in the discovery document.\r\n         * Normally, the discovey document's url starts with the url of the issuer.\r\n         */\r\n        this.skipIssuerCheck = false;\r\n        /**\r\n         * final state sent to issuer is built as follows:\r\n         * state = nonce + nonceStateSeparator + additional state\r\n         * Default separator is ';' (encoded %3B).\r\n         * In rare cases, this character might be forbidden or inconvenient to use by the issuer so it can be customized.\r\n         */\r\n        this.nonceStateSeparator = ';';\r\n        /**\r\n         * Set this to true to use HTTP BASIC auth for AJAX calls\r\n         */\r\n        this.useHttpBasicAuth = false;\r\n        /**\r\n         * The interceptors waits this time span if there is no token\r\n         */\r\n        this.waitForTokenInMsec = 0;\r\n        /**\r\n         * Code Flow is by defauld used together with PKCI which is also higly recommented.\r\n         * You can disbale it here by setting this flag to true.\r\n         * https://tools.ietf.org/html/rfc7636#section-1.1\r\n         */\r\n        this.disablePKCE = false;\r\n        /**\r\n         * This property allows you to override the method that is used to open the login url,\r\n         * allowing a way for implementations to specify their own method of routing to new\r\n         * urls.\r\n         */\r\n        this.openUri = (uri) => {\r\n            location.href = uri;\r\n        };\r\n        if (json) {\r\n            Object.assign(this, json);\r\n        }\r\n    }\r\n}\n\n/**\r\n * This custom encoder allows charactes like +, % and / to be used in passwords\r\n */\r\nclass WebHttpUrlEncodingCodec {\r\n    encodeKey(k) {\r\n        return encodeURIComponent(k);\r\n    }\r\n    encodeValue(v) {\r\n        return encodeURIComponent(v);\r\n    }\r\n    decodeKey(k) {\r\n        return decodeURIComponent(k);\r\n    }\r\n    decodeValue(v) {\r\n        return decodeURIComponent(v);\r\n    }\r\n}\n\n/**\r\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\r\n *\r\n * @version 0.9.0\r\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n * @copyright Chen, Yi-Cyuan 2014-2017\r\n * @license MIT\r\n */\r\n/*jslint bitwise: true */\r\nvar ERROR = 'input is invalid type';\r\nvar WINDOW = typeof window === 'object';\r\nvar root = WINDOW ? window : {};\r\nif (root.JS_SHA256_NO_WINDOW) {\r\n    WINDOW = false;\r\n}\r\nvar WEB_WORKER = !WINDOW && typeof self === 'object';\r\nvar NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\r\nif (NODE_JS) {\r\n    root = global;\r\n}\r\nelse if (WEB_WORKER) {\r\n    root = self;\r\n}\r\nvar COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;\r\nvar AMD = typeof define === 'function' && define.amd;\r\nvar ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\r\nvar HEX_CHARS = '0123456789abcdef'.split('');\r\nvar EXTRA = [-2147483648, 8388608, 32768, 128];\r\nvar SHIFT = [24, 16, 8, 0];\r\nvar K = [\r\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n];\r\nvar OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];\r\nvar blocks = [];\r\nif (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {\r\n    Array.isArray = function (obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Array]';\r\n    };\r\n}\r\nif (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\r\n    ArrayBuffer.isView = function (obj) {\r\n        return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\r\n    };\r\n}\r\nvar createOutputMethod = function (outputType, is224) {\r\n    return function (message) {\r\n        return new Sha256(is224, true).update(message)[outputType]();\r\n    };\r\n};\r\nconst ɵ0 = createOutputMethod;\r\nvar createMethod = function (is224) {\r\n    var method = createOutputMethod('hex', is224);\r\n    if (NODE_JS) {\r\n        method = nodeWrap(method, is224);\r\n    }\r\n    method.create = function () {\r\n        return new Sha256(is224);\r\n    };\r\n    method.update = function (message) {\r\n        return method.create().update(message);\r\n    };\r\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\r\n        var type = OUTPUT_TYPES[i];\r\n        method[type] = createOutputMethod(type, is224);\r\n    }\r\n    return method;\r\n};\r\nconst ɵ1 = createMethod;\r\nvar nodeWrap = function (method, is224) {\r\n    var crypto = eval(\"require('crypto')\");\r\n    var Buffer = eval(\"require('buffer').Buffer\");\r\n    var algorithm = is224 ? 'sha224' : 'sha256';\r\n    var nodeMethod = function (message) {\r\n        if (typeof message === 'string') {\r\n            return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');\r\n        }\r\n        else {\r\n            if (message === null || message === undefined) {\r\n                throw new Error(ERROR);\r\n            }\r\n            else if (message.constructor === ArrayBuffer) {\r\n                message = new Uint8Array(message);\r\n            }\r\n        }\r\n        if (Array.isArray(message) || ArrayBuffer.isView(message) ||\r\n            message.constructor === Buffer) {\r\n            return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');\r\n        }\r\n        else {\r\n            return method(message);\r\n        }\r\n    };\r\n    return nodeMethod;\r\n};\r\nconst ɵ2 = nodeWrap;\r\nvar createHmacOutputMethod = function (outputType, is224) {\r\n    return function (key, message) {\r\n        return new HmacSha256(key, is224, true).update(message)[outputType]();\r\n    };\r\n};\r\nconst ɵ3 = createHmacOutputMethod;\r\nvar createHmacMethod = function (is224) {\r\n    var method = createHmacOutputMethod('hex', is224);\r\n    method.create = function (key) {\r\n        return new HmacSha256(key, is224);\r\n    };\r\n    method.update = function (key, message) {\r\n        return method.create(key).update(message);\r\n    };\r\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\r\n        var type = OUTPUT_TYPES[i];\r\n        method[type] = createHmacOutputMethod(type, is224);\r\n    }\r\n    return method;\r\n};\r\nconst ɵ4 = createHmacMethod;\r\nfunction Sha256(is224, sharedMemory) {\r\n    if (sharedMemory) {\r\n        blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n            blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n                blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n                    blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n        this.blocks = blocks;\r\n    }\r\n    else {\r\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    }\r\n    if (is224) {\r\n        this.h0 = 0xc1059ed8;\r\n        this.h1 = 0x367cd507;\r\n        this.h2 = 0x3070dd17;\r\n        this.h3 = 0xf70e5939;\r\n        this.h4 = 0xffc00b31;\r\n        this.h5 = 0x68581511;\r\n        this.h6 = 0x64f98fa7;\r\n        this.h7 = 0xbefa4fa4;\r\n    }\r\n    else { // 256\r\n        this.h0 = 0x6a09e667;\r\n        this.h1 = 0xbb67ae85;\r\n        this.h2 = 0x3c6ef372;\r\n        this.h3 = 0xa54ff53a;\r\n        this.h4 = 0x510e527f;\r\n        this.h5 = 0x9b05688c;\r\n        this.h6 = 0x1f83d9ab;\r\n        this.h7 = 0x5be0cd19;\r\n    }\r\n    this.block = this.start = this.bytes = this.hBytes = 0;\r\n    this.finalized = this.hashed = false;\r\n    this.first = true;\r\n    this.is224 = is224;\r\n}\r\nSha256.prototype.update = function (message) {\r\n    if (this.finalized) {\r\n        return;\r\n    }\r\n    var notString, type = typeof message;\r\n    if (type !== 'string') {\r\n        if (type === 'object') {\r\n            if (message === null) {\r\n                throw new Error(ERROR);\r\n            }\r\n            else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\r\n                message = new Uint8Array(message);\r\n            }\r\n            else if (!Array.isArray(message)) {\r\n                if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\r\n                    throw new Error(ERROR);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(ERROR);\r\n        }\r\n        notString = true;\r\n    }\r\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\r\n    while (index < length) {\r\n        if (this.hashed) {\r\n            this.hashed = false;\r\n            blocks[0] = this.block;\r\n            blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n                blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n                    blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n                        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n        }\r\n        if (notString) {\r\n            for (i = this.start; index < length && i < 64; ++index) {\r\n                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\r\n            }\r\n        }\r\n        else {\r\n            for (i = this.start; index < length && i < 64; ++index) {\r\n                code = message.charCodeAt(index);\r\n                if (code < 0x80) {\r\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\r\n                }\r\n                else if (code < 0x800) {\r\n                    blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\r\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n                }\r\n                else if (code < 0xd800 || code >= 0xe000) {\r\n                    blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\r\n                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n                }\r\n                else {\r\n                    code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n                    blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\r\n                    blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\r\n                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n                }\r\n            }\r\n        }\r\n        this.lastByteIndex = i;\r\n        this.bytes += i - this.start;\r\n        if (i >= 64) {\r\n            this.block = blocks[16];\r\n            this.start = i - 64;\r\n            this.hash();\r\n            this.hashed = true;\r\n        }\r\n        else {\r\n            this.start = i;\r\n        }\r\n    }\r\n    if (this.bytes > 4294967295) {\r\n        this.hBytes += this.bytes / 4294967296 << 0;\r\n        this.bytes = this.bytes % 4294967296;\r\n    }\r\n    return this;\r\n};\r\nSha256.prototype.finalize = function () {\r\n    if (this.finalized) {\r\n        return;\r\n    }\r\n    this.finalized = true;\r\n    var blocks = this.blocks, i = this.lastByteIndex;\r\n    blocks[16] = this.block;\r\n    blocks[i >> 2] |= EXTRA[i & 3];\r\n    this.block = blocks[16];\r\n    if (i >= 56) {\r\n        if (!this.hashed) {\r\n            this.hash();\r\n        }\r\n        blocks[0] = this.block;\r\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n            blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n                blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n                    blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n    }\r\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\r\n    blocks[15] = this.bytes << 3;\r\n    this.hash();\r\n};\r\nSha256.prototype.hash = function () {\r\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6, h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\r\n    for (j = 16; j < 64; ++j) {\r\n        // rightrotate\r\n        t1 = blocks[j - 15];\r\n        s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);\r\n        t1 = blocks[j - 2];\r\n        s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);\r\n        blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;\r\n    }\r\n    bc = b & c;\r\n    for (j = 0; j < 64; j += 4) {\r\n        if (this.first) {\r\n            if (this.is224) {\r\n                ab = 300032;\r\n                t1 = blocks[0] - 1413257819;\r\n                h = t1 - 150054599 << 0;\r\n                d = t1 + 24177077 << 0;\r\n            }\r\n            else {\r\n                ab = 704751109;\r\n                t1 = blocks[0] - 210244248;\r\n                h = t1 - 1521486534 << 0;\r\n                d = t1 + 143694565 << 0;\r\n            }\r\n            this.first = false;\r\n        }\r\n        else {\r\n            s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));\r\n            s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));\r\n            ab = a & b;\r\n            maj = ab ^ (a & c) ^ bc;\r\n            ch = (e & f) ^ (~e & g);\r\n            t1 = h + s1 + ch + K[j] + blocks[j];\r\n            t2 = s0 + maj;\r\n            h = d + t1 << 0;\r\n            d = t1 + t2 << 0;\r\n        }\r\n        s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));\r\n        s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));\r\n        da = d & a;\r\n        maj = da ^ (d & b) ^ ab;\r\n        ch = (h & e) ^ (~h & f);\r\n        t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];\r\n        t2 = s0 + maj;\r\n        g = c + t1 << 0;\r\n        c = t1 + t2 << 0;\r\n        s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));\r\n        s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));\r\n        cd = c & d;\r\n        maj = cd ^ (c & a) ^ da;\r\n        ch = (g & h) ^ (~g & e);\r\n        t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];\r\n        t2 = s0 + maj;\r\n        f = b + t1 << 0;\r\n        b = t1 + t2 << 0;\r\n        s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));\r\n        s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));\r\n        bc = b & c;\r\n        maj = bc ^ (b & d) ^ cd;\r\n        ch = (f & g) ^ (~f & h);\r\n        t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\r\n        t2 = s0 + maj;\r\n        e = a + t1 << 0;\r\n        a = t1 + t2 << 0;\r\n    }\r\n    this.h0 = this.h0 + a << 0;\r\n    this.h1 = this.h1 + b << 0;\r\n    this.h2 = this.h2 + c << 0;\r\n    this.h3 = this.h3 + d << 0;\r\n    this.h4 = this.h4 + e << 0;\r\n    this.h5 = this.h5 + f << 0;\r\n    this.h6 = this.h6 + g << 0;\r\n    this.h7 = this.h7 + h << 0;\r\n};\r\nSha256.prototype.hex = function () {\r\n    this.finalize();\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;\r\n    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\r\n        HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\r\n        HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\r\n        HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\r\n        HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\r\n        HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\r\n        HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\r\n        HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\r\n        HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\r\n        HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\r\n        HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\r\n        HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\r\n        HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +\r\n        HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\r\n        HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\r\n        HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\r\n        HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +\r\n        HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +\r\n        HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +\r\n        HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +\r\n        HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +\r\n        HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +\r\n        HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +\r\n        HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +\r\n        HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +\r\n        HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +\r\n        HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +\r\n        HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];\r\n    if (!this.is224) {\r\n        hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +\r\n            HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +\r\n            HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +\r\n            HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];\r\n    }\r\n    return hex;\r\n};\r\nSha256.prototype.toString = Sha256.prototype.hex;\r\nSha256.prototype.digest = function () {\r\n    this.finalize();\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;\r\n    var arr = [\r\n        (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\r\n        (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\r\n        (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\r\n        (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\r\n        (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,\r\n        (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,\r\n        (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF\r\n    ];\r\n    if (!this.is224) {\r\n        arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);\r\n    }\r\n    return arr;\r\n};\r\nSha256.prototype.array = Sha256.prototype.digest;\r\nSha256.prototype.arrayBuffer = function () {\r\n    this.finalize();\r\n    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\r\n    var dataView = new DataView(buffer);\r\n    dataView.setUint32(0, this.h0);\r\n    dataView.setUint32(4, this.h1);\r\n    dataView.setUint32(8, this.h2);\r\n    dataView.setUint32(12, this.h3);\r\n    dataView.setUint32(16, this.h4);\r\n    dataView.setUint32(20, this.h5);\r\n    dataView.setUint32(24, this.h6);\r\n    if (!this.is224) {\r\n        dataView.setUint32(28, this.h7);\r\n    }\r\n    return buffer;\r\n};\r\nfunction HmacSha256(key, is224, sharedMemory) {\r\n    var i, type = typeof key;\r\n    if (type === 'string') {\r\n        var bytes = [], length = key.length, index = 0, code;\r\n        for (i = 0; i < length; ++i) {\r\n            code = key.charCodeAt(i);\r\n            if (code < 0x80) {\r\n                bytes[index++] = code;\r\n            }\r\n            else if (code < 0x800) {\r\n                bytes[index++] = (0xc0 | (code >> 6));\r\n                bytes[index++] = (0x80 | (code & 0x3f));\r\n            }\r\n            else if (code < 0xd800 || code >= 0xe000) {\r\n                bytes[index++] = (0xe0 | (code >> 12));\r\n                bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\r\n                bytes[index++] = (0x80 | (code & 0x3f));\r\n            }\r\n            else {\r\n                code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));\r\n                bytes[index++] = (0xf0 | (code >> 18));\r\n                bytes[index++] = (0x80 | ((code >> 12) & 0x3f));\r\n                bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\r\n                bytes[index++] = (0x80 | (code & 0x3f));\r\n            }\r\n        }\r\n        key = bytes;\r\n    }\r\n    else {\r\n        if (type === 'object') {\r\n            if (key === null) {\r\n                throw new Error(ERROR);\r\n            }\r\n            else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {\r\n                key = new Uint8Array(key);\r\n            }\r\n            else if (!Array.isArray(key)) {\r\n                if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {\r\n                    throw new Error(ERROR);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(ERROR);\r\n        }\r\n    }\r\n    if (key.length > 64) {\r\n        key = (new Sha256(is224, true)).update(key).array();\r\n    }\r\n    var oKeyPad = [], iKeyPad = [];\r\n    for (i = 0; i < 64; ++i) {\r\n        var b = key[i] || 0;\r\n        oKeyPad[i] = 0x5c ^ b;\r\n        iKeyPad[i] = 0x36 ^ b;\r\n    }\r\n    Sha256.call(this, is224, sharedMemory);\r\n    this.update(iKeyPad);\r\n    this.oKeyPad = oKeyPad;\r\n    this.inner = true;\r\n    this.sharedMemory = sharedMemory;\r\n}\r\nHmacSha256.prototype = new Sha256();\r\nHmacSha256.prototype.finalize = function () {\r\n    Sha256.prototype.finalize.call(this);\r\n    if (this.inner) {\r\n        this.inner = false;\r\n        var innerHash = this.array();\r\n        Sha256.call(this, this.is224, this.sharedMemory);\r\n        this.update(this.oKeyPad);\r\n        this.update(innerHash);\r\n        Sha256.prototype.finalize.call(this);\r\n    }\r\n};\r\nvar exports = createMethod();\r\nexports.sha256 = exports;\r\nexports.sha224 = createMethod(true);\r\nexports.sha256.hmac = createHmacMethod();\r\nexports.sha224.hmac = createHmacMethod(true);\n\n/**\r\n * Abstraction for crypto algorithms\r\n */\r\nclass HashHandler {\r\n}\r\nclass DefaultHashHandler {\r\n    calcHash(valueToHash, algorithm) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // const encoder = new TextEncoder();\r\n            // const hashArray = await window.crypto.subtle.digest(algorithm, data);\r\n            // const data = encoder.encode(valueToHash);\r\n            const hashArray = exports.array(valueToHash);\r\n            // const hashString = this.toHashString(hashArray);\r\n            const hashString = this.toHashString2(hashArray);\r\n            return hashString;\r\n        });\r\n    }\r\n    toHashString2(byteArray) {\r\n        let result = '';\r\n        for (let e of byteArray) {\r\n            result += String.fromCharCode(e);\r\n        }\r\n        return result;\r\n    }\r\n    toHashString(buffer) {\r\n        const byteArray = new Uint8Array(buffer);\r\n        let result = '';\r\n        for (let e of byteArray) {\r\n            result += String.fromCharCode(e);\r\n        }\r\n        return result;\r\n    }\r\n}\nDefaultHashHandler.ɵfac = function DefaultHashHandler_Factory(t) { return new (t || DefaultHashHandler)(); };\nDefaultHashHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DefaultHashHandler, factory: DefaultHashHandler.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DefaultHashHandler, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\r\n * Service for logging in and logging out with\r\n * OIDC and OAuth2. Supports implicit flow and\r\n * password flow.\r\n */\r\nclass OAuthService extends AuthConfig {\r\n    constructor(ngZone, http, storage, tokenValidationHandler, config, urlHelper, logger, crypto, document, dateTimeService) {\r\n        var _a;\r\n        super();\r\n        this.ngZone = ngZone;\r\n        this.http = http;\r\n        this.config = config;\r\n        this.urlHelper = urlHelper;\r\n        this.logger = logger;\r\n        this.crypto = crypto;\r\n        this.dateTimeService = dateTimeService;\r\n        /**\r\n         * @internal\r\n         * Deprecated:  use property events instead\r\n         */\r\n        this.discoveryDocumentLoaded = false;\r\n        /**\r\n         * The received (passed around) state, when logging\r\n         * in with implicit flow.\r\n         */\r\n        this.state = '';\r\n        this.eventsSubject = new Subject();\r\n        this.discoveryDocumentLoadedSubject = new Subject();\r\n        this.grantTypesSupported = [];\r\n        this.inImplicitFlow = false;\r\n        this.saveNoncesInLocalStorage = false;\r\n        this.debug('angular-oauth2-oidc v10');\r\n        // See https://github.com/manfredsteyer/angular-oauth2-oidc/issues/773 for why this is needed\r\n        this.document = document;\r\n        if (!config) {\r\n            config = {};\r\n        }\r\n        this.discoveryDocumentLoaded$ =\r\n            this.discoveryDocumentLoadedSubject.asObservable();\r\n        this.events = this.eventsSubject.asObservable();\r\n        if (tokenValidationHandler) {\r\n            this.tokenValidationHandler = tokenValidationHandler;\r\n        }\r\n        if (config) {\r\n            this.configure(config);\r\n        }\r\n        try {\r\n            if (storage) {\r\n                this.setStorage(storage);\r\n            }\r\n            else if (typeof sessionStorage !== 'undefined') {\r\n                this.setStorage(sessionStorage);\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error('No OAuthStorage provided and cannot access default (sessionStorage).' +\r\n                'Consider providing a custom OAuthStorage implementation in your module.', e);\r\n        }\r\n        // in IE, sessionStorage does not always survive a redirect\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window['localStorage'] !== 'undefined') {\r\n            const ua = (_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent;\r\n            const msie = (ua === null || ua === void 0 ? void 0 : ua.includes('MSIE ')) || (ua === null || ua === void 0 ? void 0 : ua.includes('Trident'));\r\n            if (msie) {\r\n                this.saveNoncesInLocalStorage = true;\r\n            }\r\n        }\r\n        this.setupRefreshTimer();\r\n    }\r\n    /**\r\n     * Use this method to configure the service\r\n     * @param config the configuration\r\n     */\r\n    configure(config) {\r\n        // For the sake of downward compatibility with\r\n        // original configuration API\r\n        Object.assign(this, new AuthConfig(), config);\r\n        this.config = Object.assign({}, new AuthConfig(), config);\r\n        if (this.sessionChecksEnabled) {\r\n            this.setupSessionCheck();\r\n        }\r\n        this.configChanged();\r\n    }\r\n    configChanged() {\r\n        this.setupRefreshTimer();\r\n    }\r\n    restartSessionChecksIfStillLoggedIn() {\r\n        if (this.hasValidIdToken()) {\r\n            this.initSessionCheck();\r\n        }\r\n    }\r\n    restartRefreshTimerIfStillLoggedIn() {\r\n        this.setupExpirationTimers();\r\n    }\r\n    setupSessionCheck() {\r\n        this.events\r\n            .pipe(filter((e) => e.type === 'token_received'))\r\n            .subscribe((e) => {\r\n            this.initSessionCheck();\r\n        });\r\n    }\r\n    /**\r\n     * Will setup up silent refreshing for when the token is\r\n     * about to expire. When the user is logged out via this.logOut method, the\r\n     * silent refreshing will pause and not refresh the tokens until the user is\r\n     * logged back in via receiving a new token.\r\n     * @param params Additional parameter to pass\r\n     * @param listenTo Setup automatic refresh of a specific token type\r\n     */\r\n    setupAutomaticSilentRefresh(params = {}, listenTo, noPrompt = true) {\r\n        let shouldRunSilentRefresh = true;\r\n        this.clearAutomaticRefreshTimer();\r\n        this.automaticRefreshSubscription = this.events\r\n            .pipe(tap((e) => {\r\n            if (e.type === 'token_received') {\r\n                shouldRunSilentRefresh = true;\r\n            }\r\n            else if (e.type === 'logout') {\r\n                shouldRunSilentRefresh = false;\r\n            }\r\n        }), filter((e) => e.type === 'token_expires' &&\r\n            (listenTo == null || listenTo === 'any' || e.info === listenTo)), debounceTime(1000))\r\n            .subscribe((_) => {\r\n            if (shouldRunSilentRefresh) {\r\n                // this.silentRefresh(params, noPrompt).catch(_ => {\r\n                this.refreshInternal(params, noPrompt).catch((_) => {\r\n                    this.debug('Automatic silent refresh did not work');\r\n                });\r\n            }\r\n        });\r\n        this.restartRefreshTimerIfStillLoggedIn();\r\n    }\r\n    refreshInternal(params, noPrompt) {\r\n        if (!this.useSilentRefresh && this.responseType === 'code') {\r\n            return this.refreshToken();\r\n        }\r\n        else {\r\n            return this.silentRefresh(params, noPrompt);\r\n        }\r\n    }\r\n    /**\r\n     * Convenience method that first calls `loadDiscoveryDocument(...)` and\r\n     * directly chains using the `then(...)` part of the promise to call\r\n     * the `tryLogin(...)` method.\r\n     *\r\n     * @param options LoginOptions to pass through to `tryLogin(...)`\r\n     */\r\n    loadDiscoveryDocumentAndTryLogin(options = null) {\r\n        return this.loadDiscoveryDocument().then((doc) => {\r\n            return this.tryLogin(options);\r\n        });\r\n    }\r\n    /**\r\n     * Convenience method that first calls `loadDiscoveryDocumentAndTryLogin(...)`\r\n     * and if then chains to `initLoginFlow()`, but only if there is no valid\r\n     * IdToken or no valid AccessToken.\r\n     *\r\n     * @param options LoginOptions to pass through to `tryLogin(...)`\r\n     */\r\n    loadDiscoveryDocumentAndLogin(options = null) {\r\n        options = options || {};\r\n        return this.loadDiscoveryDocumentAndTryLogin(options).then((_) => {\r\n            if (!this.hasValidIdToken() || !this.hasValidAccessToken()) {\r\n                const state = typeof options.state === 'string' ? options.state : '';\r\n                this.initLoginFlow(state);\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n    debug(...args) {\r\n        if (this.showDebugInformation) {\r\n            this.logger.debug.apply(this.logger, args);\r\n        }\r\n    }\r\n    validateUrlFromDiscoveryDocument(url) {\r\n        const errors = [];\r\n        const httpsCheck = this.validateUrlForHttps(url);\r\n        const issuerCheck = this.validateUrlAgainstIssuer(url);\r\n        if (!httpsCheck) {\r\n            errors.push('https for all urls required. Also for urls received by discovery.');\r\n        }\r\n        if (!issuerCheck) {\r\n            errors.push('Every url in discovery document has to start with the issuer url.' +\r\n                'Also see property strictDiscoveryDocumentValidation.');\r\n        }\r\n        return errors;\r\n    }\r\n    validateUrlForHttps(url) {\r\n        if (!url) {\r\n            return true;\r\n        }\r\n        const lcUrl = url.toLowerCase();\r\n        if (this.requireHttps === false) {\r\n            return true;\r\n        }\r\n        if ((lcUrl.match(/^http:\\/\\/localhost($|[:\\/])/) ||\r\n            lcUrl.match(/^http:\\/\\/localhost($|[:\\/])/)) &&\r\n            this.requireHttps === 'remoteOnly') {\r\n            return true;\r\n        }\r\n        return lcUrl.startsWith('https://');\r\n    }\r\n    assertUrlNotNullAndCorrectProtocol(url, description) {\r\n        if (!url) {\r\n            throw new Error(`'${description}' should not be null`);\r\n        }\r\n        if (!this.validateUrlForHttps(url)) {\r\n            throw new Error(`'${description}' must use HTTPS (with TLS), or config value for property 'requireHttps' must be set to 'false' and allow HTTP (without TLS).`);\r\n        }\r\n    }\r\n    validateUrlAgainstIssuer(url) {\r\n        if (!this.strictDiscoveryDocumentValidation) {\r\n            return true;\r\n        }\r\n        if (!url) {\r\n            return true;\r\n        }\r\n        return url.toLowerCase().startsWith(this.issuer.toLowerCase());\r\n    }\r\n    setupRefreshTimer() {\r\n        if (typeof window === 'undefined') {\r\n            this.debug('timer not supported on this plattform');\r\n            return;\r\n        }\r\n        if (this.hasValidIdToken() || this.hasValidAccessToken()) {\r\n            this.clearAccessTokenTimer();\r\n            this.clearIdTokenTimer();\r\n            this.setupExpirationTimers();\r\n        }\r\n        if (this.tokenReceivedSubscription)\r\n            this.tokenReceivedSubscription.unsubscribe();\r\n        this.tokenReceivedSubscription = this.events\r\n            .pipe(filter((e) => e.type === 'token_received'))\r\n            .subscribe((_) => {\r\n            this.clearAccessTokenTimer();\r\n            this.clearIdTokenTimer();\r\n            this.setupExpirationTimers();\r\n        });\r\n    }\r\n    setupExpirationTimers() {\r\n        if (this.hasValidAccessToken()) {\r\n            this.setupAccessTokenTimer();\r\n        }\r\n        if (this.hasValidIdToken()) {\r\n            this.setupIdTokenTimer();\r\n        }\r\n    }\r\n    setupAccessTokenTimer() {\r\n        const expiration = this.getAccessTokenExpiration();\r\n        const storedAt = this.getAccessTokenStoredAt();\r\n        const timeout = this.calcTimeout(storedAt, expiration);\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.accessTokenTimeoutSubscription = of(new OAuthInfoEvent('token_expires', 'access_token'))\r\n                .pipe(delay(timeout))\r\n                .subscribe((e) => {\r\n                this.ngZone.run(() => {\r\n                    this.eventsSubject.next(e);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    setupIdTokenTimer() {\r\n        const expiration = this.getIdTokenExpiration();\r\n        const storedAt = this.getIdTokenStoredAt();\r\n        const timeout = this.calcTimeout(storedAt, expiration);\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.idTokenTimeoutSubscription = of(new OAuthInfoEvent('token_expires', 'id_token'))\r\n                .pipe(delay(timeout))\r\n                .subscribe((e) => {\r\n                this.ngZone.run(() => {\r\n                    this.eventsSubject.next(e);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Stops timers for automatic refresh.\r\n     * To restart it, call setupAutomaticSilentRefresh again.\r\n     */\r\n    stopAutomaticRefresh() {\r\n        this.clearAccessTokenTimer();\r\n        this.clearIdTokenTimer();\r\n        this.clearAutomaticRefreshTimer();\r\n    }\r\n    clearAccessTokenTimer() {\r\n        if (this.accessTokenTimeoutSubscription) {\r\n            this.accessTokenTimeoutSubscription.unsubscribe();\r\n        }\r\n    }\r\n    clearIdTokenTimer() {\r\n        if (this.idTokenTimeoutSubscription) {\r\n            this.idTokenTimeoutSubscription.unsubscribe();\r\n        }\r\n    }\r\n    clearAutomaticRefreshTimer() {\r\n        if (this.automaticRefreshSubscription) {\r\n            this.automaticRefreshSubscription.unsubscribe();\r\n        }\r\n    }\r\n    calcTimeout(storedAt, expiration) {\r\n        const now = this.dateTimeService.now();\r\n        const delta = (expiration - storedAt) * this.timeoutFactor - (now - storedAt);\r\n        return Math.max(0, delta);\r\n    }\r\n    /**\r\n     * DEPRECATED. Use a provider for OAuthStorage instead:\r\n     *\r\n     * { provide: OAuthStorage, useFactory: oAuthStorageFactory }\r\n     * export function oAuthStorageFactory(): OAuthStorage { return localStorage; }\r\n     * Sets a custom storage used to store the received\r\n     * tokens on client side. By default, the browser's\r\n     * sessionStorage is used.\r\n     * @ignore\r\n     *\r\n     * @param storage\r\n     */\r\n    setStorage(storage) {\r\n        this._storage = storage;\r\n        this.configChanged();\r\n    }\r\n    /**\r\n     * Loads the discovery document to configure most\r\n     * properties of this service. The url of the discovery\r\n     * document is infered from the issuer's url according\r\n     * to the OpenId Connect spec. To use another url you\r\n     * can pass it to to optional parameter fullUrl.\r\n     *\r\n     * @param fullUrl\r\n     */\r\n    loadDiscoveryDocument(fullUrl = null) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!fullUrl) {\r\n                fullUrl = this.issuer || '';\r\n                if (!fullUrl.endsWith('/')) {\r\n                    fullUrl += '/';\r\n                }\r\n                fullUrl += '.well-known/openid-configuration';\r\n            }\r\n            if (!this.validateUrlForHttps(fullUrl)) {\r\n                reject(\"issuer  must use HTTPS (with TLS), or config value for property 'requireHttps' must be set to 'false' and allow HTTP (without TLS).\");\r\n                return;\r\n            }\r\n            this.http.get(fullUrl).subscribe((doc) => {\r\n                if (!this.validateDiscoveryDocument(doc)) {\r\n                    this.eventsSubject.next(new OAuthErrorEvent('discovery_document_validation_error', null));\r\n                    reject('discovery_document_validation_error');\r\n                    return;\r\n                }\r\n                this.loginUrl = doc.authorization_endpoint;\r\n                this.logoutUrl = doc.end_session_endpoint || this.logoutUrl;\r\n                this.grantTypesSupported = doc.grant_types_supported;\r\n                this.issuer = doc.issuer;\r\n                this.tokenEndpoint = doc.token_endpoint;\r\n                this.userinfoEndpoint =\r\n                    doc.userinfo_endpoint || this.userinfoEndpoint;\r\n                this.jwksUri = doc.jwks_uri;\r\n                this.sessionCheckIFrameUrl =\r\n                    doc.check_session_iframe || this.sessionCheckIFrameUrl;\r\n                this.discoveryDocumentLoaded = true;\r\n                this.discoveryDocumentLoadedSubject.next(doc);\r\n                this.revocationEndpoint =\r\n                    doc.revocation_endpoint || this.revocationEndpoint;\r\n                if (this.sessionChecksEnabled) {\r\n                    this.restartSessionChecksIfStillLoggedIn();\r\n                }\r\n                this.loadJwks()\r\n                    .then((jwks) => {\r\n                    const result = {\r\n                        discoveryDocument: doc,\r\n                        jwks: jwks,\r\n                    };\r\n                    const event = new OAuthSuccessEvent('discovery_document_loaded', result);\r\n                    this.eventsSubject.next(event);\r\n                    resolve(event);\r\n                    return;\r\n                })\r\n                    .catch((err) => {\r\n                    this.eventsSubject.next(new OAuthErrorEvent('discovery_document_load_error', err));\r\n                    reject(err);\r\n                    return;\r\n                });\r\n            }, (err) => {\r\n                this.logger.error('error loading discovery document', err);\r\n                this.eventsSubject.next(new OAuthErrorEvent('discovery_document_load_error', err));\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    loadJwks() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.jwksUri) {\r\n                this.http.get(this.jwksUri).subscribe((jwks) => {\r\n                    this.jwks = jwks;\r\n                    this.eventsSubject.next(new OAuthSuccessEvent('discovery_document_loaded'));\r\n                    resolve(jwks);\r\n                }, (err) => {\r\n                    this.logger.error('error loading jwks', err);\r\n                    this.eventsSubject.next(new OAuthErrorEvent('jwks_load_error', err));\r\n                    reject(err);\r\n                });\r\n            }\r\n            else {\r\n                resolve(null);\r\n            }\r\n        });\r\n    }\r\n    validateDiscoveryDocument(doc) {\r\n        let errors;\r\n        if (!this.skipIssuerCheck && doc.issuer !== this.issuer) {\r\n            this.logger.error('invalid issuer in discovery document', 'expected: ' + this.issuer, 'current: ' + doc.issuer);\r\n            return false;\r\n        }\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.authorization_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating authorization_endpoint in discovery document', errors);\r\n            return false;\r\n        }\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.end_session_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating end_session_endpoint in discovery document', errors);\r\n            return false;\r\n        }\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.token_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating token_endpoint in discovery document', errors);\r\n        }\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.revocation_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating revocation_endpoint in discovery document', errors);\r\n        }\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.userinfo_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating userinfo_endpoint in discovery document', errors);\r\n            return false;\r\n        }\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.jwks_uri);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating jwks_uri in discovery document', errors);\r\n            return false;\r\n        }\r\n        if (this.sessionChecksEnabled && !doc.check_session_iframe) {\r\n            this.logger.warn('sessionChecksEnabled is activated but discovery document' +\r\n                ' does not contain a check_session_iframe field');\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Uses password flow to exchange userName and password for an\r\n     * access_token. After receiving the access_token, this method\r\n     * uses it to query the userinfo endpoint in order to get information\r\n     * about the user in question.\r\n     *\r\n     * When using this, make sure that the property oidc is set to false.\r\n     * Otherwise stricter validations take place that make this operation\r\n     * fail.\r\n     *\r\n     * @param userName\r\n     * @param password\r\n     * @param headers Optional additional http-headers.\r\n     */\r\n    fetchTokenUsingPasswordFlowAndLoadUserProfile(userName, password, headers = new HttpHeaders()) {\r\n        return this.fetchTokenUsingPasswordFlow(userName, password, headers).then(() => this.loadUserProfile());\r\n    }\r\n    /**\r\n     * Loads the user profile by accessing the user info endpoint defined by OpenId Connect.\r\n     *\r\n     * When using this with OAuth2 password flow, make sure that the property oidc is set to false.\r\n     * Otherwise stricter validations take place that make this operation fail.\r\n     */\r\n    loadUserProfile() {\r\n        if (!this.hasValidAccessToken()) {\r\n            throw new Error('Can not load User Profile without access_token');\r\n        }\r\n        if (!this.validateUrlForHttps(this.userinfoEndpoint)) {\r\n            throw new Error(\"userinfoEndpoint must use HTTPS (with TLS), or config value for property 'requireHttps' must be set to 'false' and allow HTTP (without TLS).\");\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.getAccessToken());\r\n            this.http\r\n                .get(this.userinfoEndpoint, {\r\n                headers,\r\n                observe: 'response',\r\n                responseType: 'text',\r\n            })\r\n                .subscribe((response) => {\r\n                this.debug('userinfo received', JSON.stringify(response));\r\n                if (response.headers\r\n                    .get('content-type')\r\n                    .startsWith('application/json')) {\r\n                    let info = JSON.parse(response.body);\r\n                    const existingClaims = this.getIdentityClaims() || {};\r\n                    if (!this.skipSubjectCheck) {\r\n                        if (this.oidc &&\r\n                            (!existingClaims['sub'] || info.sub !== existingClaims['sub'])) {\r\n                            const err = 'if property oidc is true, the received user-id (sub) has to be the user-id ' +\r\n                                'of the user that has logged in with oidc.\\n' +\r\n                                'if you are not using oidc but just oauth2 password flow set oidc to false';\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                    }\r\n                    info = Object.assign({}, existingClaims, info);\r\n                    this._storage.setItem('id_token_claims_obj', JSON.stringify(info));\r\n                    this.eventsSubject.next(new OAuthSuccessEvent('user_profile_loaded'));\r\n                    resolve({ info });\r\n                }\r\n                else {\r\n                    this.debug('userinfo is not JSON, treating it as JWE/JWS');\r\n                    this.eventsSubject.next(new OAuthSuccessEvent('user_profile_loaded'));\r\n                    resolve(JSON.parse(response.body));\r\n                }\r\n            }, (err) => {\r\n                this.logger.error('error loading user info', err);\r\n                this.eventsSubject.next(new OAuthErrorEvent('user_profile_load_error', err));\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Uses password flow to exchange userName and password for an access_token.\r\n     * @param userName\r\n     * @param password\r\n     * @param headers Optional additional http-headers.\r\n     */\r\n    fetchTokenUsingPasswordFlow(userName, password, headers = new HttpHeaders()) {\r\n        const parameters = {\r\n            username: userName,\r\n            password: password,\r\n        };\r\n        return this.fetchTokenUsingGrant('password', parameters, headers);\r\n    }\r\n    /**\r\n     * Uses a custom grant type to retrieve tokens.\r\n     * @param grantType Grant type.\r\n     * @param parameters Parameters to pass.\r\n     * @param headers Optional additional HTTP headers.\r\n     */\r\n    fetchTokenUsingGrant(grantType, parameters, headers = new HttpHeaders()) {\r\n        this.assertUrlNotNullAndCorrectProtocol(this.tokenEndpoint, 'tokenEndpoint');\r\n        /**\r\n         * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\r\n         * serialize and parse URL parameter keys and values.\r\n         *\r\n         * @stable\r\n         */\r\n        let params = new HttpParams({ encoder: new WebHttpUrlEncodingCodec() })\r\n            .set('grant_type', grantType)\r\n            .set('scope', this.scope);\r\n        if (this.useHttpBasicAuth) {\r\n            const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\r\n            headers = headers.set('Authorization', 'Basic ' + header);\r\n        }\r\n        if (!this.useHttpBasicAuth) {\r\n            params = params.set('client_id', this.clientId);\r\n        }\r\n        if (!this.useHttpBasicAuth && this.dummyClientSecret) {\r\n            params = params.set('client_secret', this.dummyClientSecret);\r\n        }\r\n        if (this.customQueryParams) {\r\n            for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                params = params.set(key, this.customQueryParams[key]);\r\n            }\r\n        }\r\n        // set explicit parameters last, to allow overwriting\r\n        for (const key of Object.keys(parameters)) {\r\n            params = params.set(key, parameters[key]);\r\n        }\r\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n        return new Promise((resolve, reject) => {\r\n            this.http\r\n                .post(this.tokenEndpoint, params, { headers })\r\n                .subscribe((tokenResponse) => {\r\n                this.debug('tokenResponse', tokenResponse);\r\n                this.storeAccessTokenResponse(tokenResponse.access_token, tokenResponse.refresh_token, tokenResponse.expires_in ||\r\n                    this.fallbackAccessTokenExpirationTimeInSec, tokenResponse.scope, this.extractRecognizedCustomParameters(tokenResponse));\r\n                if (this.oidc && tokenResponse.id_token) {\r\n                    this.processIdToken(tokenResponse.id_token, tokenResponse.access_token).then((result) => {\r\n                        this.storeIdToken(result);\r\n                        resolve(tokenResponse);\r\n                    });\r\n                }\r\n                this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                resolve(tokenResponse);\r\n            }, (err) => {\r\n                this.logger.error('Error performing ${grantType} flow', err);\r\n                this.eventsSubject.next(new OAuthErrorEvent('token_error', err));\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Refreshes the token using a refresh_token.\r\n     * This does not work for implicit flow, b/c\r\n     * there is no refresh_token in this flow.\r\n     * A solution for this is provided by the\r\n     * method silentRefresh.\r\n     */\r\n    refreshToken() {\r\n        this.assertUrlNotNullAndCorrectProtocol(this.tokenEndpoint, 'tokenEndpoint');\r\n        return new Promise((resolve, reject) => {\r\n            let params = new HttpParams({ encoder: new WebHttpUrlEncodingCodec() })\r\n                .set('grant_type', 'refresh_token')\r\n                .set('scope', this.scope)\r\n                .set('refresh_token', this._storage.getItem('refresh_token'));\r\n            let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\r\n            if (this.useHttpBasicAuth) {\r\n                const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\r\n                headers = headers.set('Authorization', 'Basic ' + header);\r\n            }\r\n            if (!this.useHttpBasicAuth) {\r\n                params = params.set('client_id', this.clientId);\r\n            }\r\n            if (!this.useHttpBasicAuth && this.dummyClientSecret) {\r\n                params = params.set('client_secret', this.dummyClientSecret);\r\n            }\r\n            if (this.customQueryParams) {\r\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    params = params.set(key, this.customQueryParams[key]);\r\n                }\r\n            }\r\n            this.http\r\n                .post(this.tokenEndpoint, params, { headers })\r\n                .pipe(switchMap((tokenResponse) => {\r\n                if (tokenResponse.id_token) {\r\n                    return from(this.processIdToken(tokenResponse.id_token, tokenResponse.access_token, true)).pipe(tap((result) => this.storeIdToken(result)), map((_) => tokenResponse));\r\n                }\r\n                else {\r\n                    return of(tokenResponse);\r\n                }\r\n            }))\r\n                .subscribe((tokenResponse) => {\r\n                this.debug('refresh tokenResponse', tokenResponse);\r\n                this.storeAccessTokenResponse(tokenResponse.access_token, tokenResponse.refresh_token, tokenResponse.expires_in ||\r\n                    this.fallbackAccessTokenExpirationTimeInSec, tokenResponse.scope, this.extractRecognizedCustomParameters(tokenResponse));\r\n                this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\r\n                resolve(tokenResponse);\r\n            }, (err) => {\r\n                this.logger.error('Error refreshing token', err);\r\n                this.eventsSubject.next(new OAuthErrorEvent('token_refresh_error', err));\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    removeSilentRefreshEventListener() {\r\n        if (this.silentRefreshPostMessageEventListener) {\r\n            window.removeEventListener('message', this.silentRefreshPostMessageEventListener);\r\n            this.silentRefreshPostMessageEventListener = null;\r\n        }\r\n    }\r\n    setupSilentRefreshEventListener() {\r\n        this.removeSilentRefreshEventListener();\r\n        this.silentRefreshPostMessageEventListener = (e) => {\r\n            const message = this.processMessageEventMessage(e);\r\n            this.tryLogin({\r\n                customHashFragment: message,\r\n                preventClearHashAfterLogin: true,\r\n                customRedirectUri: this.silentRefreshRedirectUri || this.redirectUri,\r\n            }).catch((err) => this.debug('tryLogin during silent refresh failed', err));\r\n        };\r\n        window.addEventListener('message', this.silentRefreshPostMessageEventListener);\r\n    }\r\n    /**\r\n     * Performs a silent refresh for implicit flow.\r\n     * Use this method to get new tokens when/before\r\n     * the existing tokens expire.\r\n     */\r\n    silentRefresh(params = {}, noPrompt = true) {\r\n        const claims = this.getIdentityClaims() || {};\r\n        if (this.useIdTokenHintForSilentRefresh && this.hasValidIdToken()) {\r\n            params['id_token_hint'] = this.getIdToken();\r\n        }\r\n        if (!this.validateUrlForHttps(this.loginUrl)) {\r\n            throw new Error(\"loginUrl  must use HTTPS (with TLS), or config value for property 'requireHttps' must be set to 'false' and allow HTTP (without TLS).\");\r\n        }\r\n        if (typeof this.document === 'undefined') {\r\n            throw new Error('silent refresh is not supported on this platform');\r\n        }\r\n        const existingIframe = this.document.getElementById(this.silentRefreshIFrameName);\r\n        if (existingIframe) {\r\n            this.document.body.removeChild(existingIframe);\r\n        }\r\n        this.silentRefreshSubject = claims['sub'];\r\n        const iframe = this.document.createElement('iframe');\r\n        iframe.id = this.silentRefreshIFrameName;\r\n        this.setupSilentRefreshEventListener();\r\n        const redirectUri = this.silentRefreshRedirectUri || this.redirectUri;\r\n        this.createLoginUrl(null, null, redirectUri, noPrompt, params).then((url) => {\r\n            iframe.setAttribute('src', url);\r\n            if (!this.silentRefreshShowIFrame) {\r\n                iframe.style['display'] = 'none';\r\n            }\r\n            this.document.body.appendChild(iframe);\r\n        });\r\n        const errors = this.events.pipe(filter((e) => e instanceof OAuthErrorEvent), first());\r\n        const success = this.events.pipe(filter((e) => e.type === 'token_received'), first());\r\n        const timeout = of(new OAuthErrorEvent('silent_refresh_timeout', null)).pipe(delay(this.silentRefreshTimeout));\r\n        return race([errors, success, timeout])\r\n            .pipe(map((e) => {\r\n            if (e instanceof OAuthErrorEvent) {\r\n                if (e.type === 'silent_refresh_timeout') {\r\n                    this.eventsSubject.next(e);\r\n                }\r\n                else {\r\n                    e = new OAuthErrorEvent('silent_refresh_error', e);\r\n                    this.eventsSubject.next(e);\r\n                }\r\n                throw e;\r\n            }\r\n            else if (e.type === 'token_received') {\r\n                e = new OAuthSuccessEvent('silently_refreshed');\r\n                this.eventsSubject.next(e);\r\n            }\r\n            return e;\r\n        }))\r\n            .toPromise();\r\n    }\r\n    /**\r\n     * This method exists for backwards compatibility.\r\n     * {@link OAuthService#initLoginFlowInPopup} handles both code\r\n     * and implicit flows.\r\n     */\r\n    initImplicitFlowInPopup(options) {\r\n        return this.initLoginFlowInPopup(options);\r\n    }\r\n    initLoginFlowInPopup(options) {\r\n        options = options || {};\r\n        return this.createLoginUrl(null, null, this.silentRefreshRedirectUri, false, {\r\n            display: 'popup',\r\n        }).then((url) => {\r\n            return new Promise((resolve, reject) => {\r\n                /**\r\n                 * Error handling section\r\n                 */\r\n                const checkForPopupClosedInterval = 500;\r\n                let windowRef = null;\r\n                // If we got no window reference we open a window\r\n                // else we are using the window already opened\r\n                if (!options.windowRef) {\r\n                    windowRef = window.open(url, 'ngx-oauth2-oidc-login', this.calculatePopupFeatures(options));\r\n                }\r\n                else if (options.windowRef && !options.windowRef.closed) {\r\n                    windowRef = options.windowRef;\r\n                    windowRef.location.href = url;\r\n                }\r\n                let checkForPopupClosedTimer;\r\n                const tryLogin = (hash) => {\r\n                    this.tryLogin({\r\n                        customHashFragment: hash,\r\n                        preventClearHashAfterLogin: true,\r\n                        customRedirectUri: this.silentRefreshRedirectUri,\r\n                    }).then(() => {\r\n                        cleanup();\r\n                        resolve(true);\r\n                    }, (err) => {\r\n                        cleanup();\r\n                        reject(err);\r\n                    });\r\n                };\r\n                const checkForPopupClosed = () => {\r\n                    if (!windowRef || windowRef.closed) {\r\n                        cleanup();\r\n                        reject(new OAuthErrorEvent('popup_closed', {}));\r\n                    }\r\n                };\r\n                if (!windowRef) {\r\n                    reject(new OAuthErrorEvent('popup_blocked', {}));\r\n                }\r\n                else {\r\n                    checkForPopupClosedTimer = window.setInterval(checkForPopupClosed, checkForPopupClosedInterval);\r\n                }\r\n                const cleanup = () => {\r\n                    window.clearInterval(checkForPopupClosedTimer);\r\n                    window.removeEventListener('storage', storageListener);\r\n                    window.removeEventListener('message', listener);\r\n                    if (windowRef !== null) {\r\n                        windowRef.close();\r\n                    }\r\n                    windowRef = null;\r\n                };\r\n                const listener = (e) => {\r\n                    const message = this.processMessageEventMessage(e);\r\n                    if (message && message !== null) {\r\n                        window.removeEventListener('storage', storageListener);\r\n                        tryLogin(message);\r\n                    }\r\n                    else {\r\n                        console.log('false event firing');\r\n                    }\r\n                };\r\n                const storageListener = (event) => {\r\n                    if (event.key === 'auth_hash') {\r\n                        window.removeEventListener('message', listener);\r\n                        tryLogin(event.newValue);\r\n                    }\r\n                };\r\n                window.addEventListener('message', listener);\r\n                window.addEventListener('storage', storageListener);\r\n            });\r\n        });\r\n    }\r\n    calculatePopupFeatures(options) {\r\n        // Specify an static height and width and calculate centered position\r\n        const height = options.height || 470;\r\n        const width = options.width || 500;\r\n        const left = window.screenLeft + (window.outerWidth - width) / 2;\r\n        const top = window.screenTop + (window.outerHeight - height) / 2;\r\n        return `location=no,toolbar=no,width=${width},height=${height},top=${top},left=${left}`;\r\n    }\r\n    processMessageEventMessage(e) {\r\n        let expectedPrefix = '#';\r\n        if (this.silentRefreshMessagePrefix) {\r\n            expectedPrefix += this.silentRefreshMessagePrefix;\r\n        }\r\n        if (!e || !e.data || typeof e.data !== 'string') {\r\n            return;\r\n        }\r\n        const prefixedMessage = e.data;\r\n        if (!prefixedMessage.startsWith(expectedPrefix)) {\r\n            return;\r\n        }\r\n        return '#' + prefixedMessage.substr(expectedPrefix.length);\r\n    }\r\n    canPerformSessionCheck() {\r\n        if (!this.sessionChecksEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.sessionCheckIFrameUrl) {\r\n            console.warn('sessionChecksEnabled is activated but there is no sessionCheckIFrameUrl');\r\n            return false;\r\n        }\r\n        const sessionState = this.getSessionState();\r\n        if (!sessionState) {\r\n            console.warn('sessionChecksEnabled is activated but there is no session_state');\r\n            return false;\r\n        }\r\n        if (typeof this.document === 'undefined') {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    setupSessionCheckEventListener() {\r\n        this.removeSessionCheckEventListener();\r\n        this.sessionCheckEventListener = (e) => {\r\n            const origin = e.origin.toLowerCase();\r\n            const issuer = this.issuer.toLowerCase();\r\n            this.debug('sessionCheckEventListener');\r\n            if (!issuer.startsWith(origin)) {\r\n                this.debug('sessionCheckEventListener', 'wrong origin', origin, 'expected', issuer, 'event', e);\r\n                return;\r\n            }\r\n            // only run in Angular zone if it is 'changed' or 'error'\r\n            switch (e.data) {\r\n                case 'unchanged':\r\n                    this.ngZone.run(() => {\r\n                        this.handleSessionUnchanged();\r\n                    });\r\n                    break;\r\n                case 'changed':\r\n                    this.ngZone.run(() => {\r\n                        this.handleSessionChange();\r\n                    });\r\n                    break;\r\n                case 'error':\r\n                    this.ngZone.run(() => {\r\n                        this.handleSessionError();\r\n                    });\r\n                    break;\r\n            }\r\n            this.debug('got info from session check inframe', e);\r\n        };\r\n        // prevent Angular from refreshing the view on every message (runs in intervals)\r\n        this.ngZone.runOutsideAngular(() => {\r\n            window.addEventListener('message', this.sessionCheckEventListener);\r\n        });\r\n    }\r\n    handleSessionUnchanged() {\r\n        this.debug('session check', 'session unchanged');\r\n        this.eventsSubject.next(new OAuthInfoEvent('session_unchanged'));\r\n    }\r\n    handleSessionChange() {\r\n        this.eventsSubject.next(new OAuthInfoEvent('session_changed'));\r\n        this.stopSessionCheckTimer();\r\n        if (!this.useSilentRefresh && this.responseType === 'code') {\r\n            this.refreshToken()\r\n                .then((_) => {\r\n                this.debug('token refresh after session change worked');\r\n            })\r\n                .catch((_) => {\r\n                this.debug('token refresh did not work after session changed');\r\n                this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\r\n                this.logOut(true);\r\n            });\r\n        }\r\n        else if (this.silentRefreshRedirectUri) {\r\n            this.silentRefresh().catch((_) => this.debug('silent refresh failed after session changed'));\r\n            this.waitForSilentRefreshAfterSessionChange();\r\n        }\r\n        else {\r\n            this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\r\n            this.logOut(true);\r\n        }\r\n    }\r\n    waitForSilentRefreshAfterSessionChange() {\r\n        this.events\r\n            .pipe(filter((e) => e.type === 'silently_refreshed' ||\r\n            e.type === 'silent_refresh_timeout' ||\r\n            e.type === 'silent_refresh_error'), first())\r\n            .subscribe((e) => {\r\n            if (e.type !== 'silently_refreshed') {\r\n                this.debug('silent refresh did not work after session changed');\r\n                this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\r\n                this.logOut(true);\r\n            }\r\n        });\r\n    }\r\n    handleSessionError() {\r\n        this.stopSessionCheckTimer();\r\n        this.eventsSubject.next(new OAuthInfoEvent('session_error'));\r\n    }\r\n    removeSessionCheckEventListener() {\r\n        if (this.sessionCheckEventListener) {\r\n            window.removeEventListener('message', this.sessionCheckEventListener);\r\n            this.sessionCheckEventListener = null;\r\n        }\r\n    }\r\n    initSessionCheck() {\r\n        if (!this.canPerformSessionCheck()) {\r\n            return;\r\n        }\r\n        const existingIframe = this.document.getElementById(this.sessionCheckIFrameName);\r\n        if (existingIframe) {\r\n            this.document.body.removeChild(existingIframe);\r\n        }\r\n        const iframe = this.document.createElement('iframe');\r\n        iframe.id = this.sessionCheckIFrameName;\r\n        this.setupSessionCheckEventListener();\r\n        const url = this.sessionCheckIFrameUrl;\r\n        iframe.setAttribute('src', url);\r\n        iframe.style.display = 'none';\r\n        this.document.body.appendChild(iframe);\r\n        this.startSessionCheckTimer();\r\n    }\r\n    startSessionCheckTimer() {\r\n        this.stopSessionCheckTimer();\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.sessionCheckTimer = setInterval(this.checkSession.bind(this), this.sessionCheckIntervall);\r\n        });\r\n    }\r\n    stopSessionCheckTimer() {\r\n        if (this.sessionCheckTimer) {\r\n            clearInterval(this.sessionCheckTimer);\r\n            this.sessionCheckTimer = null;\r\n        }\r\n    }\r\n    checkSession() {\r\n        const iframe = this.document.getElementById(this.sessionCheckIFrameName);\r\n        if (!iframe) {\r\n            this.logger.warn('checkSession did not find iframe', this.sessionCheckIFrameName);\r\n        }\r\n        const sessionState = this.getSessionState();\r\n        if (!sessionState) {\r\n            this.stopSessionCheckTimer();\r\n        }\r\n        const message = this.clientId + ' ' + sessionState;\r\n        iframe.contentWindow.postMessage(message, this.issuer);\r\n    }\r\n    createLoginUrl(state = '', loginHint = '', customRedirectUri = '', noPrompt = false, params = {}) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const that = this;\r\n            let redirectUri;\r\n            if (customRedirectUri) {\r\n                redirectUri = customRedirectUri;\r\n            }\r\n            else {\r\n                redirectUri = this.redirectUri;\r\n            }\r\n            const nonce = yield this.createAndSaveNonce();\r\n            if (state) {\r\n                state =\r\n                    nonce + this.config.nonceStateSeparator + encodeURIComponent(state);\r\n            }\r\n            else {\r\n                state = nonce;\r\n            }\r\n            if (!this.requestAccessToken && !this.oidc) {\r\n                throw new Error('Either requestAccessToken or oidc or both must be true');\r\n            }\r\n            if (this.config.responseType) {\r\n                this.responseType = this.config.responseType;\r\n            }\r\n            else {\r\n                if (this.oidc && this.requestAccessToken) {\r\n                    this.responseType = 'id_token token';\r\n                }\r\n                else if (this.oidc && !this.requestAccessToken) {\r\n                    this.responseType = 'id_token';\r\n                }\r\n                else {\r\n                    this.responseType = 'token';\r\n                }\r\n            }\r\n            const seperationChar = that.loginUrl.indexOf('?') > -1 ? '&' : '?';\r\n            let scope = that.scope;\r\n            if (this.oidc && !scope.match(/(^|\\s)openid($|\\s)/)) {\r\n                scope = 'openid ' + scope;\r\n            }\r\n            let url = that.loginUrl +\r\n                seperationChar +\r\n                'response_type=' +\r\n                encodeURIComponent(that.responseType) +\r\n                '&client_id=' +\r\n                encodeURIComponent(that.clientId) +\r\n                '&state=' +\r\n                encodeURIComponent(state) +\r\n                '&redirect_uri=' +\r\n                encodeURIComponent(redirectUri) +\r\n                '&scope=' +\r\n                encodeURIComponent(scope);\r\n            if (this.responseType.includes('code') && !this.disablePKCE) {\r\n                const [challenge, verifier] = yield this.createChallangeVerifierPairForPKCE();\r\n                if (this.saveNoncesInLocalStorage &&\r\n                    typeof window['localStorage'] !== 'undefined') {\r\n                    localStorage.setItem('PKCE_verifier', verifier);\r\n                }\r\n                else {\r\n                    this._storage.setItem('PKCE_verifier', verifier);\r\n                }\r\n                url += '&code_challenge=' + challenge;\r\n                url += '&code_challenge_method=S256';\r\n            }\r\n            if (loginHint) {\r\n                url += '&login_hint=' + encodeURIComponent(loginHint);\r\n            }\r\n            if (that.resource) {\r\n                url += '&resource=' + encodeURIComponent(that.resource);\r\n            }\r\n            if (that.oidc) {\r\n                url += '&nonce=' + encodeURIComponent(nonce);\r\n            }\r\n            if (noPrompt) {\r\n                url += '&prompt=none';\r\n            }\r\n            for (const key of Object.keys(params)) {\r\n                url +=\r\n                    '&' + encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\r\n            }\r\n            if (this.customQueryParams) {\r\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    url +=\r\n                        '&' + key + '=' + encodeURIComponent(this.customQueryParams[key]);\r\n                }\r\n            }\r\n            return url;\r\n        });\r\n    }\r\n    initImplicitFlowInternal(additionalState = '', params = '') {\r\n        if (this.inImplicitFlow) {\r\n            return;\r\n        }\r\n        this.inImplicitFlow = true;\r\n        if (!this.validateUrlForHttps(this.loginUrl)) {\r\n            throw new Error(\"loginUrl  must use HTTPS (with TLS), or config value for property 'requireHttps' must be set to 'false' and allow HTTP (without TLS).\");\r\n        }\r\n        let addParams = {};\r\n        let loginHint = null;\r\n        if (typeof params === 'string') {\r\n            loginHint = params;\r\n        }\r\n        else if (typeof params === 'object') {\r\n            addParams = params;\r\n        }\r\n        this.createLoginUrl(additionalState, loginHint, null, false, addParams)\r\n            .then(this.config.openUri)\r\n            .catch((error) => {\r\n            console.error('Error in initImplicitFlow', error);\r\n            this.inImplicitFlow = false;\r\n        });\r\n    }\r\n    /**\r\n     * Starts the implicit flow and redirects to user to\r\n     * the auth servers' login url.\r\n     *\r\n     * @param additionalState Optional state that is passed around.\r\n     *  You'll find this state in the property `state` after `tryLogin` logged in the user.\r\n     * @param params Hash with additional parameter. If it is a string, it is used for the\r\n     *               parameter loginHint (for the sake of compatibility with former versions)\r\n     */\r\n    initImplicitFlow(additionalState = '', params = '') {\r\n        if (this.loginUrl !== '') {\r\n            this.initImplicitFlowInternal(additionalState, params);\r\n        }\r\n        else {\r\n            this.events\r\n                .pipe(filter((e) => e.type === 'discovery_document_loaded'))\r\n                .subscribe((_) => this.initImplicitFlowInternal(additionalState, params));\r\n        }\r\n    }\r\n    /**\r\n     * Reset current implicit flow\r\n     *\r\n     * @description This method allows resetting the current implict flow in order to be initialized again.\r\n     */\r\n    resetImplicitFlow() {\r\n        this.inImplicitFlow = false;\r\n    }\r\n    callOnTokenReceivedIfExists(options) {\r\n        const that = this;\r\n        if (options.onTokenReceived) {\r\n            const tokenParams = {\r\n                idClaims: that.getIdentityClaims(),\r\n                idToken: that.getIdToken(),\r\n                accessToken: that.getAccessToken(),\r\n                state: that.state,\r\n            };\r\n            options.onTokenReceived(tokenParams);\r\n        }\r\n    }\r\n    storeAccessTokenResponse(accessToken, refreshToken, expiresIn, grantedScopes, customParameters) {\r\n        this._storage.setItem('access_token', accessToken);\r\n        if (grantedScopes && !Array.isArray(grantedScopes)) {\r\n            this._storage.setItem('granted_scopes', JSON.stringify(grantedScopes.split(' ')));\r\n        }\r\n        else if (grantedScopes && Array.isArray(grantedScopes)) {\r\n            this._storage.setItem('granted_scopes', JSON.stringify(grantedScopes));\r\n        }\r\n        this._storage.setItem('access_token_stored_at', '' + this.dateTimeService.now());\r\n        if (expiresIn) {\r\n            const expiresInMilliSeconds = expiresIn * 1000;\r\n            const now = this.dateTimeService.new();\r\n            const expiresAt = now.getTime() + expiresInMilliSeconds;\r\n            this._storage.setItem('expires_at', '' + expiresAt);\r\n        }\r\n        if (refreshToken) {\r\n            this._storage.setItem('refresh_token', refreshToken);\r\n        }\r\n        if (customParameters) {\r\n            customParameters.forEach((value, key) => {\r\n                this._storage.setItem(key, value);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Delegates to tryLoginImplicitFlow for the sake of competability\r\n     * @param options Optional options.\r\n     */\r\n    tryLogin(options = null) {\r\n        if (this.config.responseType === 'code') {\r\n            return this.tryLoginCodeFlow(options).then((_) => true);\r\n        }\r\n        else {\r\n            return this.tryLoginImplicitFlow(options);\r\n        }\r\n    }\r\n    parseQueryString(queryString) {\r\n        if (!queryString || queryString.length === 0) {\r\n            return {};\r\n        }\r\n        if (queryString.charAt(0) === '?') {\r\n            queryString = queryString.substr(1);\r\n        }\r\n        return this.urlHelper.parseQueryString(queryString);\r\n    }\r\n    tryLoginCodeFlow(options = null) {\r\n        options = options || {};\r\n        const querySource = options.customHashFragment\r\n            ? options.customHashFragment.substring(1)\r\n            : window.location.search;\r\n        const parts = this.getCodePartsFromUrl(querySource);\r\n        const code = parts['code'];\r\n        const state = parts['state'];\r\n        const sessionState = parts['session_state'];\r\n        if (!options.preventClearHashAfterLogin) {\r\n            const href = location.origin +\r\n                location.pathname +\r\n                location.search\r\n                    .replace(/code=[^&\\$]*/, '')\r\n                    .replace(/scope=[^&\\$]*/, '')\r\n                    .replace(/state=[^&\\$]*/, '')\r\n                    .replace(/session_state=[^&\\$]*/, '')\r\n                    .replace(/^\\?&/, '?')\r\n                    .replace(/&$/, '')\r\n                    .replace(/^\\?$/, '')\r\n                    .replace(/&+/g, '&')\r\n                    .replace(/\\?&/, '?')\r\n                    .replace(/\\?$/, '') +\r\n                location.hash;\r\n            history.replaceState(null, window.name, href);\r\n        }\r\n        let [nonceInState, userState] = this.parseState(state);\r\n        this.state = userState;\r\n        if (parts['error']) {\r\n            this.debug('error trying to login');\r\n            this.handleLoginError(options, parts);\r\n            const err = new OAuthErrorEvent('code_error', {}, parts);\r\n            this.eventsSubject.next(err);\r\n            return Promise.reject(err);\r\n        }\r\n        if (!options.disableNonceCheck) {\r\n            if (!nonceInState) {\r\n                return Promise.resolve();\r\n            }\r\n            if (!options.disableOAuth2StateCheck) {\r\n                const success = this.validateNonce(nonceInState);\r\n                if (!success) {\r\n                    const event = new OAuthErrorEvent('invalid_nonce_in_state', null);\r\n                    this.eventsSubject.next(event);\r\n                    return Promise.reject(event);\r\n                }\r\n            }\r\n            this.storeSessionState(sessionState);\r\n            if (code) {\r\n                return this.getTokenFromCode(code, options).then((_) => null);\r\n            }\r\n            else {\r\n                return Promise.resolve();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Retrieve the returned auth code from the redirect uri that has been called.\r\n     * If required also check hash, as we could use hash location strategy.\r\n     */\r\n    getCodePartsFromUrl(queryString) {\r\n        if (!queryString || queryString.length === 0) {\r\n            return this.urlHelper.getHashFragmentParams();\r\n        }\r\n        // normalize query string\r\n        if (queryString.charAt(0) === '?') {\r\n            queryString = queryString.substr(1);\r\n        }\r\n        return this.urlHelper.parseQueryString(queryString);\r\n    }\r\n    /**\r\n     * Get token using an intermediate code. Works for the Authorization Code flow.\r\n     */\r\n    getTokenFromCode(code, options) {\r\n        let params = new HttpParams({ encoder: new WebHttpUrlEncodingCodec() })\r\n            .set('grant_type', 'authorization_code')\r\n            .set('code', code)\r\n            .set('redirect_uri', options.customRedirectUri || this.redirectUri);\r\n        if (!this.disablePKCE) {\r\n            let PKCEVerifier;\r\n            if (this.saveNoncesInLocalStorage &&\r\n                typeof window['localStorage'] !== 'undefined') {\r\n                PKCEVerifier = localStorage.getItem('PKCE_verifier');\r\n            }\r\n            else {\r\n                PKCEVerifier = this._storage.getItem('PKCE_verifier');\r\n            }\r\n            if (!PKCEVerifier) {\r\n                console.warn('No PKCE verifier found in oauth storage!');\r\n            }\r\n            else {\r\n                params = params.set('code_verifier', PKCEVerifier);\r\n            }\r\n        }\r\n        return this.fetchAndProcessToken(params, options);\r\n    }\r\n    fetchAndProcessToken(params, options) {\r\n        options = options || {};\r\n        this.assertUrlNotNullAndCorrectProtocol(this.tokenEndpoint, 'tokenEndpoint');\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\r\n        if (this.useHttpBasicAuth) {\r\n            const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\r\n            headers = headers.set('Authorization', 'Basic ' + header);\r\n        }\r\n        if (!this.useHttpBasicAuth) {\r\n            params = params.set('client_id', this.clientId);\r\n        }\r\n        if (!this.useHttpBasicAuth && this.dummyClientSecret) {\r\n            params = params.set('client_secret', this.dummyClientSecret);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            if (this.customQueryParams) {\r\n                for (let key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    params = params.set(key, this.customQueryParams[key]);\r\n                }\r\n            }\r\n            this.http\r\n                .post(this.tokenEndpoint, params, { headers })\r\n                .subscribe((tokenResponse) => {\r\n                this.debug('refresh tokenResponse', tokenResponse);\r\n                this.storeAccessTokenResponse(tokenResponse.access_token, tokenResponse.refresh_token, tokenResponse.expires_in ||\r\n                    this.fallbackAccessTokenExpirationTimeInSec, tokenResponse.scope, this.extractRecognizedCustomParameters(tokenResponse));\r\n                if (this.oidc && tokenResponse.id_token) {\r\n                    this.processIdToken(tokenResponse.id_token, tokenResponse.access_token, options.disableNonceCheck)\r\n                        .then((result) => {\r\n                        this.storeIdToken(result);\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\r\n                        resolve(tokenResponse);\r\n                    })\r\n                        .catch((reason) => {\r\n                        this.eventsSubject.next(new OAuthErrorEvent('token_validation_error', reason));\r\n                        console.error('Error validating tokens');\r\n                        console.error(reason);\r\n                        reject(reason);\r\n                    });\r\n                }\r\n                else {\r\n                    this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                    this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\r\n                    resolve(tokenResponse);\r\n                }\r\n            }, (err) => {\r\n                console.error('Error getting token', err);\r\n                this.eventsSubject.next(new OAuthErrorEvent('token_refresh_error', err));\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Checks whether there are tokens in the hash fragment\r\n     * as a result of the implicit flow. These tokens are\r\n     * parsed, validated and used to sign the user in to the\r\n     * current client.\r\n     *\r\n     * @param options Optional options.\r\n     */\r\n    tryLoginImplicitFlow(options = null) {\r\n        options = options || {};\r\n        let parts;\r\n        if (options.customHashFragment) {\r\n            parts = this.urlHelper.getHashFragmentParams(options.customHashFragment);\r\n        }\r\n        else {\r\n            parts = this.urlHelper.getHashFragmentParams();\r\n        }\r\n        this.debug('parsed url', parts);\r\n        const state = parts['state'];\r\n        let [nonceInState, userState] = this.parseState(state);\r\n        this.state = userState;\r\n        if (parts['error']) {\r\n            this.debug('error trying to login');\r\n            this.handleLoginError(options, parts);\r\n            const err = new OAuthErrorEvent('token_error', {}, parts);\r\n            this.eventsSubject.next(err);\r\n            return Promise.reject(err);\r\n        }\r\n        const accessToken = parts['access_token'];\r\n        const idToken = parts['id_token'];\r\n        const sessionState = parts['session_state'];\r\n        const grantedScopes = parts['scope'];\r\n        if (!this.requestAccessToken && !this.oidc) {\r\n            return Promise.reject('Either requestAccessToken or oidc (or both) must be true.');\r\n        }\r\n        if (this.requestAccessToken && !accessToken) {\r\n            return Promise.resolve(false);\r\n        }\r\n        if (this.requestAccessToken && !options.disableOAuth2StateCheck && !state) {\r\n            return Promise.resolve(false);\r\n        }\r\n        if (this.oidc && !idToken) {\r\n            return Promise.resolve(false);\r\n        }\r\n        if (this.sessionChecksEnabled && !sessionState) {\r\n            this.logger.warn('session checks (Session Status Change Notification) ' +\r\n                'were activated in the configuration but the id_token ' +\r\n                'does not contain a session_state claim');\r\n        }\r\n        if (this.requestAccessToken && !options.disableNonceCheck) {\r\n            const success = this.validateNonce(nonceInState);\r\n            if (!success) {\r\n                const event = new OAuthErrorEvent('invalid_nonce_in_state', null);\r\n                this.eventsSubject.next(event);\r\n                return Promise.reject(event);\r\n            }\r\n        }\r\n        if (this.requestAccessToken) {\r\n            this.storeAccessTokenResponse(accessToken, null, parts['expires_in'] || this.fallbackAccessTokenExpirationTimeInSec, grantedScopes);\r\n        }\r\n        if (!this.oidc) {\r\n            this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n            if (this.clearHashAfterLogin && !options.preventClearHashAfterLogin) {\r\n                this.clearLocationHash();\r\n            }\r\n            this.callOnTokenReceivedIfExists(options);\r\n            return Promise.resolve(true);\r\n        }\r\n        return this.processIdToken(idToken, accessToken, options.disableNonceCheck)\r\n            .then((result) => {\r\n            if (options.validationHandler) {\r\n                return options\r\n                    .validationHandler({\r\n                    accessToken: accessToken,\r\n                    idClaims: result.idTokenClaims,\r\n                    idToken: result.idToken,\r\n                    state: state,\r\n                })\r\n                    .then((_) => result);\r\n            }\r\n            return result;\r\n        })\r\n            .then((result) => {\r\n            this.storeIdToken(result);\r\n            this.storeSessionState(sessionState);\r\n            if (this.clearHashAfterLogin && !options.preventClearHashAfterLogin) {\r\n                this.clearLocationHash();\r\n            }\r\n            this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n            this.callOnTokenReceivedIfExists(options);\r\n            this.inImplicitFlow = false;\r\n            return true;\r\n        })\r\n            .catch((reason) => {\r\n            this.eventsSubject.next(new OAuthErrorEvent('token_validation_error', reason));\r\n            this.logger.error('Error validating tokens');\r\n            this.logger.error(reason);\r\n            return Promise.reject(reason);\r\n        });\r\n    }\r\n    parseState(state) {\r\n        let nonce = state;\r\n        let userState = '';\r\n        if (state) {\r\n            const idx = state.indexOf(this.config.nonceStateSeparator);\r\n            if (idx > -1) {\r\n                nonce = state.substr(0, idx);\r\n                userState = state.substr(idx + this.config.nonceStateSeparator.length);\r\n            }\r\n        }\r\n        return [nonce, userState];\r\n    }\r\n    validateNonce(nonceInState) {\r\n        let savedNonce;\r\n        if (this.saveNoncesInLocalStorage &&\r\n            typeof window['localStorage'] !== 'undefined') {\r\n            savedNonce = localStorage.getItem('nonce');\r\n        }\r\n        else {\r\n            savedNonce = this._storage.getItem('nonce');\r\n        }\r\n        if (savedNonce !== nonceInState) {\r\n            const err = 'Validating access_token failed, wrong state/nonce.';\r\n            console.error(err, savedNonce, nonceInState);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    storeIdToken(idToken) {\r\n        this._storage.setItem('id_token', idToken.idToken);\r\n        this._storage.setItem('id_token_claims_obj', idToken.idTokenClaimsJson);\r\n        this._storage.setItem('id_token_expires_at', '' + idToken.idTokenExpiresAt);\r\n        this._storage.setItem('id_token_stored_at', '' + this.dateTimeService.now());\r\n    }\r\n    storeSessionState(sessionState) {\r\n        this._storage.setItem('session_state', sessionState);\r\n    }\r\n    getSessionState() {\r\n        return this._storage.getItem('session_state');\r\n    }\r\n    handleLoginError(options, parts) {\r\n        if (options.onLoginError) {\r\n            options.onLoginError(parts);\r\n        }\r\n        if (this.clearHashAfterLogin && !options.preventClearHashAfterLogin) {\r\n            this.clearLocationHash();\r\n        }\r\n    }\r\n    getClockSkewInMsec(defaultSkewMsc = 600000) {\r\n        if (!this.clockSkewInSec) {\r\n            return defaultSkewMsc;\r\n        }\r\n        return this.clockSkewInSec * 1000;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    processIdToken(idToken, accessToken, skipNonceCheck = false) {\r\n        const tokenParts = idToken.split('.');\r\n        const headerBase64 = this.padBase64(tokenParts[0]);\r\n        const headerJson = b64DecodeUnicode(headerBase64);\r\n        const header = JSON.parse(headerJson);\r\n        const claimsBase64 = this.padBase64(tokenParts[1]);\r\n        const claimsJson = b64DecodeUnicode(claimsBase64);\r\n        const claims = JSON.parse(claimsJson);\r\n        let savedNonce;\r\n        if (this.saveNoncesInLocalStorage &&\r\n            typeof window['localStorage'] !== 'undefined') {\r\n            savedNonce = localStorage.getItem('nonce');\r\n        }\r\n        else {\r\n            savedNonce = this._storage.getItem('nonce');\r\n        }\r\n        if (Array.isArray(claims.aud)) {\r\n            if (claims.aud.every((v) => v !== this.clientId)) {\r\n                const err = 'Wrong audience: ' + claims.aud.join(',');\r\n                this.logger.warn(err);\r\n                return Promise.reject(err);\r\n            }\r\n        }\r\n        else {\r\n            if (claims.aud !== this.clientId) {\r\n                const err = 'Wrong audience: ' + claims.aud;\r\n                this.logger.warn(err);\r\n                return Promise.reject(err);\r\n            }\r\n        }\r\n        if (!claims.sub) {\r\n            const err = 'No sub claim in id_token';\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        /* For now, we only check whether the sub against\r\n         * silentRefreshSubject when sessionChecksEnabled is on\r\n         * We will reconsider in a later version to do this\r\n         * in every other case too.\r\n         */\r\n        if (this.sessionChecksEnabled &&\r\n            this.silentRefreshSubject &&\r\n            this.silentRefreshSubject !== claims['sub']) {\r\n            const err = 'After refreshing, we got an id_token for another user (sub). ' +\r\n                `Expected sub: ${this.silentRefreshSubject}, received sub: ${claims['sub']}`;\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        if (!claims.iat) {\r\n            const err = 'No iat claim in id_token';\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        if (!this.skipIssuerCheck && claims.iss !== this.issuer) {\r\n            const err = 'Wrong issuer: ' + claims.iss;\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        if (!skipNonceCheck && claims.nonce !== savedNonce) {\r\n            const err = 'Wrong nonce: ' + claims.nonce;\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        // at_hash is not applicable to authorization code flow\r\n        // addressing https://github.com/manfredsteyer/angular-oauth2-oidc/issues/661\r\n        // i.e. Based on spec the at_hash check is only true for implicit code flow on Ping Federate\r\n        // https://www.pingidentity.com/developer/en/resources/openid-connect-developers-guide.html\r\n        if (this.hasOwnProperty('responseType') &&\r\n            (this.responseType === 'code' || this.responseType === 'id_token')) {\r\n            this.disableAtHashCheck = true;\r\n        }\r\n        if (!this.disableAtHashCheck &&\r\n            this.requestAccessToken &&\r\n            !claims['at_hash']) {\r\n            const err = 'An at_hash is needed!';\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        const now = this.dateTimeService.now();\r\n        const issuedAtMSec = claims.iat * 1000;\r\n        const expiresAtMSec = claims.exp * 1000;\r\n        const clockSkewInMSec = this.getClockSkewInMsec(); // (this.getClockSkewInMsec() || 600) * 1000;\r\n        if (issuedAtMSec - clockSkewInMSec >= now ||\r\n            expiresAtMSec + clockSkewInMSec <= now) {\r\n            const err = 'Token has expired';\r\n            console.error(err);\r\n            console.error({\r\n                now: now,\r\n                issuedAtMSec: issuedAtMSec,\r\n                expiresAtMSec: expiresAtMSec,\r\n            });\r\n            return Promise.reject(err);\r\n        }\r\n        const validationParams = {\r\n            accessToken: accessToken,\r\n            idToken: idToken,\r\n            jwks: this.jwks,\r\n            idTokenClaims: claims,\r\n            idTokenHeader: header,\r\n            loadKeys: () => this.loadJwks(),\r\n        };\r\n        if (this.disableAtHashCheck) {\r\n            return this.checkSignature(validationParams).then((_) => {\r\n                const result = {\r\n                    idToken: idToken,\r\n                    idTokenClaims: claims,\r\n                    idTokenClaimsJson: claimsJson,\r\n                    idTokenHeader: header,\r\n                    idTokenHeaderJson: headerJson,\r\n                    idTokenExpiresAt: expiresAtMSec,\r\n                };\r\n                return result;\r\n            });\r\n        }\r\n        return this.checkAtHash(validationParams).then((atHashValid) => {\r\n            if (!this.disableAtHashCheck && this.requestAccessToken && !atHashValid) {\r\n                const err = 'Wrong at_hash';\r\n                this.logger.warn(err);\r\n                return Promise.reject(err);\r\n            }\r\n            return this.checkSignature(validationParams).then((_) => {\r\n                const atHashCheckEnabled = !this.disableAtHashCheck;\r\n                const result = {\r\n                    idToken: idToken,\r\n                    idTokenClaims: claims,\r\n                    idTokenClaimsJson: claimsJson,\r\n                    idTokenHeader: header,\r\n                    idTokenHeaderJson: headerJson,\r\n                    idTokenExpiresAt: expiresAtMSec,\r\n                };\r\n                if (atHashCheckEnabled) {\r\n                    return this.checkAtHash(validationParams).then((atHashValid) => {\r\n                        if (this.requestAccessToken && !atHashValid) {\r\n                            const err = 'Wrong at_hash';\r\n                            this.logger.warn(err);\r\n                            return Promise.reject(err);\r\n                        }\r\n                        else {\r\n                            return result;\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    return result;\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Returns the received claims about the user.\r\n     */\r\n    getIdentityClaims() {\r\n        const claims = this._storage.getItem('id_token_claims_obj');\r\n        if (!claims) {\r\n            return null;\r\n        }\r\n        return JSON.parse(claims);\r\n    }\r\n    /**\r\n     * Returns the granted scopes from the server.\r\n     */\r\n    getGrantedScopes() {\r\n        const scopes = this._storage.getItem('granted_scopes');\r\n        if (!scopes) {\r\n            return null;\r\n        }\r\n        return JSON.parse(scopes);\r\n    }\r\n    /**\r\n     * Returns the current id_token.\r\n     */\r\n    getIdToken() {\r\n        return this._storage ? this._storage.getItem('id_token') : null;\r\n    }\r\n    padBase64(base64data) {\r\n        while (base64data.length % 4 !== 0) {\r\n            base64data += '=';\r\n        }\r\n        return base64data;\r\n    }\r\n    /**\r\n     * Returns the current access_token.\r\n     */\r\n    getAccessToken() {\r\n        return this._storage ? this._storage.getItem('access_token') : null;\r\n    }\r\n    getRefreshToken() {\r\n        return this._storage ? this._storage.getItem('refresh_token') : null;\r\n    }\r\n    /**\r\n     * Returns the expiration date of the access_token\r\n     * as milliseconds since 1970.\r\n     */\r\n    getAccessTokenExpiration() {\r\n        if (!this._storage.getItem('expires_at')) {\r\n            return null;\r\n        }\r\n        return parseInt(this._storage.getItem('expires_at'), 10);\r\n    }\r\n    getAccessTokenStoredAt() {\r\n        return parseInt(this._storage.getItem('access_token_stored_at'), 10);\r\n    }\r\n    getIdTokenStoredAt() {\r\n        return parseInt(this._storage.getItem('id_token_stored_at'), 10);\r\n    }\r\n    /**\r\n     * Returns the expiration date of the id_token\r\n     * as milliseconds since 1970.\r\n     */\r\n    getIdTokenExpiration() {\r\n        if (!this._storage.getItem('id_token_expires_at')) {\r\n            return null;\r\n        }\r\n        return parseInt(this._storage.getItem('id_token_expires_at'), 10);\r\n    }\r\n    /**\r\n     * Checkes, whether there is a valid access_token.\r\n     */\r\n    hasValidAccessToken() {\r\n        if (this.getAccessToken()) {\r\n            const expiresAt = this._storage.getItem('expires_at');\r\n            const now = this.dateTimeService.new();\r\n            if (expiresAt &&\r\n                parseInt(expiresAt, 10) < now.getTime() - this.getClockSkewInMsec()) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Checks whether there is a valid id_token.\r\n     */\r\n    hasValidIdToken() {\r\n        if (this.getIdToken()) {\r\n            const expiresAt = this._storage.getItem('id_token_expires_at');\r\n            const now = this.dateTimeService.new();\r\n            if (expiresAt &&\r\n                parseInt(expiresAt, 10) < now.getTime() - this.getClockSkewInMsec()) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Retrieve a saved custom property of the TokenReponse object. Only if predefined in authconfig.\r\n     */\r\n    getCustomTokenResponseProperty(requestedProperty) {\r\n        return this._storage &&\r\n            this.config.customTokenParameters &&\r\n            this.config.customTokenParameters.indexOf(requestedProperty) >= 0 &&\r\n            this._storage.getItem(requestedProperty) !== null\r\n            ? JSON.parse(this._storage.getItem(requestedProperty))\r\n            : null;\r\n    }\r\n    /**\r\n     * Returns the auth-header that can be used\r\n     * to transmit the access_token to a service\r\n     */\r\n    authorizationHeader() {\r\n        return 'Bearer ' + this.getAccessToken();\r\n    }\r\n    logOut(customParameters = {}, state = '') {\r\n        let noRedirectToLogoutUrl = false;\r\n        if (typeof customParameters === 'boolean') {\r\n            noRedirectToLogoutUrl = customParameters;\r\n            customParameters = {};\r\n        }\r\n        const id_token = this.getIdToken();\r\n        this._storage.removeItem('access_token');\r\n        this._storage.removeItem('id_token');\r\n        this._storage.removeItem('refresh_token');\r\n        if (this.saveNoncesInLocalStorage) {\r\n            localStorage.removeItem('nonce');\r\n            localStorage.removeItem('PKCE_verifier');\r\n        }\r\n        else {\r\n            this._storage.removeItem('nonce');\r\n            this._storage.removeItem('PKCE_verifier');\r\n        }\r\n        this._storage.removeItem('expires_at');\r\n        this._storage.removeItem('id_token_claims_obj');\r\n        this._storage.removeItem('id_token_expires_at');\r\n        this._storage.removeItem('id_token_stored_at');\r\n        this._storage.removeItem('access_token_stored_at');\r\n        this._storage.removeItem('granted_scopes');\r\n        this._storage.removeItem('session_state');\r\n        if (this.config.customTokenParameters) {\r\n            this.config.customTokenParameters.forEach((customParam) => this._storage.removeItem(customParam));\r\n        }\r\n        this.silentRefreshSubject = null;\r\n        this.eventsSubject.next(new OAuthInfoEvent('logout'));\r\n        if (!this.logoutUrl) {\r\n            return;\r\n        }\r\n        if (noRedirectToLogoutUrl) {\r\n            return;\r\n        }\r\n        if (!id_token && !this.postLogoutRedirectUri) {\r\n            return;\r\n        }\r\n        let logoutUrl;\r\n        if (!this.validateUrlForHttps(this.logoutUrl)) {\r\n            throw new Error(\"logoutUrl  must use HTTPS (with TLS), or config value for property 'requireHttps' must be set to 'false' and allow HTTP (without TLS).\");\r\n        }\r\n        // For backward compatibility\r\n        if (this.logoutUrl.indexOf('{{') > -1) {\r\n            logoutUrl = this.logoutUrl\r\n                .replace(/\\{\\{id_token\\}\\}/, encodeURIComponent(id_token))\r\n                .replace(/\\{\\{client_id\\}\\}/, encodeURIComponent(this.clientId));\r\n        }\r\n        else {\r\n            let params = new HttpParams({ encoder: new WebHttpUrlEncodingCodec() });\r\n            if (id_token) {\r\n                params = params.set('id_token_hint', id_token);\r\n            }\r\n            const postLogoutUrl = this.postLogoutRedirectUri ||\r\n                (this.redirectUriAsPostLogoutRedirectUriFallback && this.redirectUri) ||\r\n                '';\r\n            if (postLogoutUrl) {\r\n                params = params.set('post_logout_redirect_uri', postLogoutUrl);\r\n                if (state) {\r\n                    params = params.set('state', state);\r\n                }\r\n            }\r\n            for (let key in customParameters) {\r\n                params = params.set(key, customParameters[key]);\r\n            }\r\n            logoutUrl =\r\n                this.logoutUrl +\r\n                    (this.logoutUrl.indexOf('?') > -1 ? '&' : '?') +\r\n                    params.toString();\r\n        }\r\n        this.config.openUri(logoutUrl);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    createAndSaveNonce() {\r\n        const that = this;\r\n        return this.createNonce().then(function (nonce) {\r\n            // Use localStorage for nonce if possible\r\n            // localStorage is the only storage who survives a\r\n            // redirect in ALL browsers (also IE)\r\n            // Otherwiese we'd force teams who have to support\r\n            // IE into using localStorage for everything\r\n            if (that.saveNoncesInLocalStorage &&\r\n                typeof window['localStorage'] !== 'undefined') {\r\n                localStorage.setItem('nonce', nonce);\r\n            }\r\n            else {\r\n                that._storage.setItem('nonce', nonce);\r\n            }\r\n            return nonce;\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    ngOnDestroy() {\r\n        this.clearAccessTokenTimer();\r\n        this.clearIdTokenTimer();\r\n        this.removeSilentRefreshEventListener();\r\n        const silentRefreshFrame = this.document.getElementById(this.silentRefreshIFrameName);\r\n        if (silentRefreshFrame) {\r\n            silentRefreshFrame.remove();\r\n        }\r\n        this.stopSessionCheckTimer();\r\n        this.removeSessionCheckEventListener();\r\n        const sessionCheckFrame = this.document.getElementById(this.sessionCheckIFrameName);\r\n        if (sessionCheckFrame) {\r\n            sessionCheckFrame.remove();\r\n        }\r\n    }\r\n    createNonce() {\r\n        return new Promise((resolve) => {\r\n            if (this.rngUrl) {\r\n                throw new Error('createNonce with rng-web-api has not been implemented so far');\r\n            }\r\n            /*\r\n             * This alphabet is from:\r\n             * https://tools.ietf.org/html/rfc7636#section-4.1\r\n             *\r\n             * [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\"\r\n             */\r\n            const unreserved = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';\r\n            let size = 45;\r\n            let id = '';\r\n            const crypto = typeof self === 'undefined' ? null : self.crypto || self['msCrypto'];\r\n            if (crypto) {\r\n                let bytes = new Uint8Array(size);\r\n                crypto.getRandomValues(bytes);\r\n                // Needed for IE\r\n                if (!bytes.map) {\r\n                    bytes.map = Array.prototype.map;\r\n                }\r\n                bytes = bytes.map((x) => unreserved.charCodeAt(x % unreserved.length));\r\n                id = String.fromCharCode.apply(null, bytes);\r\n            }\r\n            else {\r\n                while (0 < size--) {\r\n                    id += unreserved[(Math.random() * unreserved.length) | 0];\r\n                }\r\n            }\r\n            resolve(base64UrlEncode(id));\r\n        });\r\n    }\r\n    checkAtHash(params) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.tokenValidationHandler) {\r\n                this.logger.warn('No tokenValidationHandler configured. Cannot check at_hash.');\r\n                return true;\r\n            }\r\n            return this.tokenValidationHandler.validateAtHash(params);\r\n        });\r\n    }\r\n    checkSignature(params) {\r\n        if (!this.tokenValidationHandler) {\r\n            this.logger.warn('No tokenValidationHandler configured. Cannot check signature.');\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.tokenValidationHandler.validateSignature(params);\r\n    }\r\n    /**\r\n     * Start the implicit flow or the code flow,\r\n     * depending on your configuration.\r\n     */\r\n    initLoginFlow(additionalState = '', params = {}) {\r\n        if (this.responseType === 'code') {\r\n            return this.initCodeFlow(additionalState, params);\r\n        }\r\n        else {\r\n            return this.initImplicitFlow(additionalState, params);\r\n        }\r\n    }\r\n    /**\r\n     * Starts the authorization code flow and redirects to user to\r\n     * the auth servers login url.\r\n     */\r\n    initCodeFlow(additionalState = '', params = {}) {\r\n        if (this.loginUrl !== '') {\r\n            this.initCodeFlowInternal(additionalState, params);\r\n        }\r\n        else {\r\n            this.events\r\n                .pipe(filter((e) => e.type === 'discovery_document_loaded'))\r\n                .subscribe((_) => this.initCodeFlowInternal(additionalState, params));\r\n        }\r\n    }\r\n    initCodeFlowInternal(additionalState = '', params = {}) {\r\n        if (!this.validateUrlForHttps(this.loginUrl)) {\r\n            throw new Error(\"loginUrl  must use HTTPS (with TLS), or config value for property 'requireHttps' must be set to 'false' and allow HTTP (without TLS).\");\r\n        }\r\n        let addParams = {};\r\n        let loginHint = null;\r\n        if (typeof params === 'string') {\r\n            loginHint = params;\r\n        }\r\n        else if (typeof params === 'object') {\r\n            addParams = params;\r\n        }\r\n        this.createLoginUrl(additionalState, loginHint, null, false, addParams)\r\n            .then(this.config.openUri)\r\n            .catch((error) => {\r\n            console.error('Error in initAuthorizationCodeFlow');\r\n            console.error(error);\r\n        });\r\n    }\r\n    createChallangeVerifierPairForPKCE() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.crypto) {\r\n                throw new Error('PKCE support for code flow needs a CryptoHander. Did you import the OAuthModule using forRoot() ?');\r\n            }\r\n            const verifier = yield this.createNonce();\r\n            const challengeRaw = yield this.crypto.calcHash(verifier, 'sha-256');\r\n            const challenge = base64UrlEncode(challengeRaw);\r\n            return [challenge, verifier];\r\n        });\r\n    }\r\n    extractRecognizedCustomParameters(tokenResponse) {\r\n        let foundParameters = new Map();\r\n        if (!this.config.customTokenParameters) {\r\n            return foundParameters;\r\n        }\r\n        this.config.customTokenParameters.forEach((recognizedParameter) => {\r\n            if (tokenResponse[recognizedParameter]) {\r\n                foundParameters.set(recognizedParameter, JSON.stringify(tokenResponse[recognizedParameter]));\r\n            }\r\n        });\r\n        return foundParameters;\r\n    }\r\n    /**\r\n     * Revokes the auth token to secure the vulnarability\r\n     * of the token issued allowing the authorization server to clean\r\n     * up any security credentials associated with the authorization\r\n     */\r\n    revokeTokenAndLogout(customParameters = {}, ignoreCorsIssues = false) {\r\n        let revokeEndpoint = this.revocationEndpoint;\r\n        let accessToken = this.getAccessToken();\r\n        let refreshToken = this.getRefreshToken();\r\n        if (!accessToken) {\r\n            return;\r\n        }\r\n        let params = new HttpParams({ encoder: new WebHttpUrlEncodingCodec() });\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\r\n        if (this.useHttpBasicAuth) {\r\n            const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\r\n            headers = headers.set('Authorization', 'Basic ' + header);\r\n        }\r\n        if (!this.useHttpBasicAuth) {\r\n            params = params.set('client_id', this.clientId);\r\n        }\r\n        if (!this.useHttpBasicAuth && this.dummyClientSecret) {\r\n            params = params.set('client_secret', this.dummyClientSecret);\r\n        }\r\n        if (this.customQueryParams) {\r\n            for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                params = params.set(key, this.customQueryParams[key]);\r\n            }\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let revokeAccessToken;\r\n            let revokeRefreshToken;\r\n            if (accessToken) {\r\n                let revokationParams = params\r\n                    .set('token', accessToken)\r\n                    .set('token_type_hint', 'access_token');\r\n                revokeAccessToken = this.http.post(revokeEndpoint, revokationParams, { headers });\r\n            }\r\n            else {\r\n                revokeAccessToken = of(null);\r\n            }\r\n            if (refreshToken) {\r\n                let revokationParams = params\r\n                    .set('token', refreshToken)\r\n                    .set('token_type_hint', 'refresh_token');\r\n                revokeRefreshToken = this.http.post(revokeEndpoint, revokationParams, { headers });\r\n            }\r\n            else {\r\n                revokeRefreshToken = of(null);\r\n            }\r\n            if (ignoreCorsIssues) {\r\n                revokeAccessToken = revokeAccessToken.pipe(catchError((err) => {\r\n                    if (err.status === 0) {\r\n                        return of(null);\r\n                    }\r\n                    return throwError(err);\r\n                }));\r\n                revokeRefreshToken = revokeRefreshToken.pipe(catchError((err) => {\r\n                    if (err.status === 0) {\r\n                        return of(null);\r\n                    }\r\n                    return throwError(err);\r\n                }));\r\n            }\r\n            combineLatest([revokeAccessToken, revokeRefreshToken]).subscribe((res) => {\r\n                this.logOut(customParameters);\r\n                resolve(res);\r\n                this.logger.info('Token successfully revoked');\r\n            }, (err) => {\r\n                this.logger.error('Error revoking token', err);\r\n                this.eventsSubject.next(new OAuthErrorEvent('token_revoke_error', err));\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Clear location.hash if it's present\r\n     */\r\n    clearLocationHash() {\r\n        // Checking for empty hash is necessary for Firefox\r\n        // as setting an empty hash to an empty string adds # to the URL\r\n        if (location.hash != '') {\r\n            location.hash = '';\r\n        }\r\n    }\r\n}\nOAuthService.ɵfac = function OAuthService_Factory(t) { return new (t || OAuthService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(OAuthStorage, 8), ɵngcc0.ɵɵinject(ValidationHandler, 8), ɵngcc0.ɵɵinject(AuthConfig, 8), ɵngcc0.ɵɵinject(UrlHelperService), ɵngcc0.ɵɵinject(OAuthLogger), ɵngcc0.ɵɵinject(HashHandler, 8), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(DateTimeProvider)); };\nOAuthService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OAuthService, factory: OAuthService.ɵfac });\r\nOAuthService.ctorParameters = () => [\r\n    { type: NgZone },\r\n    { type: HttpClient },\r\n    { type: OAuthStorage, decorators: [{ type: Optional }] },\r\n    { type: ValidationHandler, decorators: [{ type: Optional }] },\r\n    { type: AuthConfig, decorators: [{ type: Optional }] },\r\n    { type: UrlHelperService },\r\n    { type: OAuthLogger },\r\n    { type: HashHandler, decorators: [{ type: Optional }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: DateTimeProvider }\r\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OAuthService, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.HttpClient }, { type: OAuthStorage, decorators: [{\n                type: Optional\n            }] }, { type: ValidationHandler, decorators: [{\n                type: Optional\n            }] }, { type: AuthConfig, decorators: [{\n                type: Optional\n            }] }, { type: UrlHelperService }, { type: OAuthLogger }, { type: HashHandler, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: DateTimeProvider }]; }, null); })();\n\nclass OAuthModuleConfig {\r\n}\r\nclass OAuthResourceServerConfig {\r\n}\n\nclass OAuthResourceServerErrorHandler {\r\n}\r\nclass OAuthNoopResourceServerErrorHandler {\r\n    handleError(err) {\r\n        return throwError(err);\r\n    }\r\n}\n\nclass DefaultOAuthInterceptor {\r\n    constructor(oAuthService, errorHandler, moduleConfig) {\r\n        this.oAuthService = oAuthService;\r\n        this.errorHandler = errorHandler;\r\n        this.moduleConfig = moduleConfig;\r\n    }\r\n    checkUrl(url) {\r\n        if (this.moduleConfig.resourceServer.customUrlValidation) {\r\n            return this.moduleConfig.resourceServer.customUrlValidation(url);\r\n        }\r\n        if (this.moduleConfig.resourceServer.allowedUrls) {\r\n            return !!this.moduleConfig.resourceServer.allowedUrls.find((u) => url.toLowerCase().startsWith(u.toLowerCase()));\r\n        }\r\n        return true;\r\n    }\r\n    intercept(req, next) {\r\n        const url = req.url.toLowerCase();\r\n        if (!this.moduleConfig ||\r\n            !this.moduleConfig.resourceServer ||\r\n            !this.checkUrl(url)) {\r\n            return next.handle(req);\r\n        }\r\n        const sendAccessToken = this.moduleConfig.resourceServer.sendAccessToken;\r\n        if (!sendAccessToken) {\r\n            return next\r\n                .handle(req)\r\n                .pipe(catchError((err) => this.errorHandler.handleError(err)));\r\n        }\r\n        return merge(of(this.oAuthService.getAccessToken()).pipe(filter((token) => !!token)), this.oAuthService.events.pipe(filter((e) => e.type === 'token_received'), timeout(this.oAuthService.waitForTokenInMsec || 0), catchError((_) => of(null)), // timeout is not an error\r\n        map((_) => this.oAuthService.getAccessToken()))).pipe(take(1), mergeMap((token) => {\r\n            if (token) {\r\n                const header = 'Bearer ' + token;\r\n                const headers = req.headers.set('Authorization', header);\r\n                req = req.clone({ headers });\r\n            }\r\n            return next\r\n                .handle(req)\r\n                .pipe(catchError((err) => this.errorHandler.handleError(err)));\r\n        }));\r\n    }\r\n}\nDefaultOAuthInterceptor.ɵfac = function DefaultOAuthInterceptor_Factory(t) { return new (t || DefaultOAuthInterceptor)(ɵngcc0.ɵɵinject(OAuthService), ɵngcc0.ɵɵinject(OAuthResourceServerErrorHandler), ɵngcc0.ɵɵinject(OAuthModuleConfig, 8)); };\nDefaultOAuthInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DefaultOAuthInterceptor, factory: DefaultOAuthInterceptor.ɵfac });\r\nDefaultOAuthInterceptor.ctorParameters = () => [\r\n    { type: OAuthService },\r\n    { type: OAuthResourceServerErrorHandler },\r\n    { type: OAuthModuleConfig, decorators: [{ type: Optional }] }\r\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DefaultOAuthInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: OAuthService }, { type: OAuthResourceServerErrorHandler }, { type: OAuthModuleConfig, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\r\n * A validation handler that isn't validating nothing.\r\n * Can be used to skip validation (at your own risk).\r\n */\r\nclass NullValidationHandler {\r\n    validateSignature(validationParams) {\r\n        return Promise.resolve(null);\r\n    }\r\n    validateAtHash(validationParams) {\r\n        return Promise.resolve(true);\r\n    }\r\n}\n\nfunction createDefaultLogger() {\r\n    return console;\r\n}\r\nfunction createDefaultStorage() {\r\n    return typeof sessionStorage !== 'undefined'\r\n        ? sessionStorage\r\n        : new MemoryStorage();\r\n}\n\nclass OAuthModule {\r\n    static forRoot(config = null, validationHandlerClass = NullValidationHandler) {\r\n        return {\r\n            ngModule: OAuthModule,\r\n            providers: [\r\n                OAuthService,\r\n                UrlHelperService,\r\n                { provide: OAuthLogger, useFactory: createDefaultLogger },\r\n                { provide: OAuthStorage, useFactory: createDefaultStorage },\r\n                { provide: ValidationHandler, useClass: validationHandlerClass },\r\n                { provide: HashHandler, useClass: DefaultHashHandler },\r\n                {\r\n                    provide: OAuthResourceServerErrorHandler,\r\n                    useClass: OAuthNoopResourceServerErrorHandler,\r\n                },\r\n                { provide: OAuthModuleConfig, useValue: config },\r\n                {\r\n                    provide: HTTP_INTERCEPTORS,\r\n                    useClass: DefaultOAuthInterceptor,\r\n                    multi: true,\r\n                },\r\n                { provide: DateTimeProvider, useClass: SystemDateTimeProvider },\r\n            ],\r\n        };\r\n    }\r\n}\nOAuthModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OAuthModule });\nOAuthModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OAuthModule_Factory(t) { return new (t || OAuthModule)(); }, imports: [[CommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OAuthModule, { imports: function () { return [CommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OAuthModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                declarations: [],\n                exports: []\n            }]\n    }], null, null); })();\n\nconst err = `PLEASE READ THIS CAREFULLY:\n\nBeginning with angular-oauth2-oidc version 9, the JwksValidationHandler\nhas been moved to an library of its own. If you need it for implementing\nOAuth2/OIDC **implicit flow**, please install it using npm:\n\n  npm i angular-oauth2-oidc-jwks --save\n\nAfter that, you can import it into your application:\n\n  import { JwksValidationHandler } from 'angular-oauth2-oidc-jwks';\n\nPlease note, that this dependency is not needed for the **code flow**,\nwhich is nowadays the **recommented** one for single page applications.\nThis also results in smaller bundle sizes.\n`;\r\n/**\r\n * This is just a dummy of the JwksValidationHandler\r\n * telling the users that the real one has been moved\r\n * to an library of its own, namely angular-oauth2-oidc-utils\r\n */\r\nclass JwksValidationHandler extends NullValidationHandler {\r\n    constructor() {\r\n        super();\r\n        console.error(err);\r\n    }\r\n}\n\nconst AUTH_CONFIG = new InjectionToken('AUTH_CONFIG');\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AUTH_CONFIG, AbstractValidationHandler, AuthConfig, DateTimeProvider, DefaultHashHandler, DefaultOAuthInterceptor, HashHandler, JwksValidationHandler, LoginOptions, MemoryStorage, NullValidationHandler, OAuthErrorEvent, OAuthEvent, OAuthInfoEvent, OAuthLogger, OAuthModule, OAuthModuleConfig, OAuthNoopResourceServerErrorHandler, OAuthResourceServerConfig, OAuthResourceServerErrorHandler, OAuthService, OAuthStorage, OAuthSuccessEvent, ReceivedTokens, SystemDateTimeProvider, UrlHelperService, ValidationHandler, createDefaultLogger as ɵa, createDefaultStorage as ɵb };\n\n//# sourceMappingURL=angular-oauth2-oidc.js.map","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes, ROUTES } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { OtpLoginComponent } from './components/otp-login/otp-login.component';\r\nimport { OauthLoginSuccessComponent } from '@presentation/auth/components/oauth-login/oauth-login-success/oauth-login-success.component';\r\n\r\n@NgModule({\r\n  imports: [ RouterModule ],\r\n  exports: [ RouterModule ],\r\n  providers: [ {\r\n    provide: ROUTES,\r\n    useFactory: configAuthMethodHandlerRoutes,\r\n    deps: [ AuthService ],\r\n    multi: true,\r\n  } ],\r\n})\r\nexport class AuthRoutingModule {\r\n}\r\n\r\nexport function configAuthMethodHandlerRoutes($auth: AuthService): Routes {\r\n  let routes: Routes;\r\n  switch ($auth.authMethod) {\r\n    case 'otp':\r\n      return [ {\r\n        path: '',\r\n        component: OtpLoginComponent,\r\n      } ];\r\n\r\n    default:\r\n      routes = [ {\r\n        path: '',\r\n        component: LoginComponent,\r\n      } ];\r\n  }\r\n\r\n  if ($auth.oauth2Available) {\r\n    routes.push({\r\n      path: $auth.oauthSuccessRoute,\r\n      component: OauthLoginSuccessComponent\r\n    });\r\n  }\r\n\r\n  return routes;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ConfigService } from '@core/services/config.service';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { NavigationService } from '@core/services/navigation.service';\r\n\r\n@Injectable()\r\nexport class OauthLoginService {\r\n  private _oauthRedirectUrl: string;\r\n  private _oauthWindow: Window;\r\n  private _isOauthActive: boolean = true;\r\n\r\n  constructor(\r\n    private $config: ConfigService,\r\n    private $oauth: OAuthService,\r\n    private $navigation: NavigationService\r\n  ) {\r\n  }\r\n\r\n  public get isOauthActive(): boolean {\r\n    return this._isOauthActive;\r\n  }\r\n\r\n  public configureOauth(): void {\r\n    const hostUrl: string = this.$config.get('hostUrl');\r\n    const oauth2AuthorizationUrl: string = this.$config.get('oauth2AuthorizationUrl');\r\n\r\n    this._oauthRedirectUrl = `${hostUrl}${oauth2AuthorizationUrl}`;\r\n  }\r\n\r\n  public loginOauth(): void {\r\n    this.createOauthWindow();\r\n  }\r\n\r\n  public goToRootAuth(): void {\r\n    this.$navigation.go('auth');\r\n  }\r\n\r\n  private createOauthWindow(\r\n    name = 'Authorization',\r\n    width = 1000,\r\n    height = 800,\r\n    left = 0,\r\n    top = 0\r\n  ): void {\r\n    let oauthWindowInterval: any;\r\n\r\n    if (!this._oauthRedirectUrl) {\r\n      return null;\r\n    }\r\n\r\n    if (this._oauthWindow) {\r\n      this._oauthWindow.focus();\r\n      return;\r\n    }\r\n\r\n    const options = `width=${width},height=${height},left=${left},top=${top}`;\r\n    this._oauthWindow = window.open(this._oauthRedirectUrl, name, options);\r\n\r\n    oauthWindowInterval = setInterval(() => {\r\n        if (this._oauthWindow.closed) {\r\n          clearInterval(oauthWindowInterval);\r\n          this._oauthWindow = null;\r\n        }\r\n      },\r\n      500\r\n    );\r\n  }\r\n}\r\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","import { CommonFunction } from '../types/function.type';\r\n\r\nexport function Trigger(method: string, type: 'before' | 'after' = 'after'): MethodDecorator {\r\n  return (\r\n    target: any,\r\n    propertyKey: string,\r\n    descriptor: PropertyDescriptor\r\n  ): PropertyDescriptor => {\r\n    const originalMethod: CommonFunction = descriptor.value;\r\n\r\n    descriptor.value = function newMethod(...args) {\r\n      const calledMethod: CommonFunction = this[method];\r\n      if (type === 'before' && calledMethod) {\r\n        calledMethod.call(this);\r\n      }\r\n\r\n      originalMethod.apply(this, args);\r\n\r\n      if (type === 'after' && calledMethod) {\r\n        calledMethod.call(this);\r\n      }\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}\r\n","export enum AuthDictionary {\r\n  Login = 'Login',\r\n  LoginWithSso = 'Login with SSO',\r\n  SystemLogin = 'System login',\r\n  PleaseWaitingLogin = 'Please waiting login',\r\n  UserLogin = 'User login',\r\n}\r\n","import {Component, Input, Output, EventEmitter} from '@angular/core';\r\nimport {NzButtonGroupSize} from 'ng-zorro-antd/button';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-password-field',\r\n  templateUrl: './password-field.component.html',\r\n  styleUrls: ['./password-field.component.less']\r\n})\r\nexport class PasswordFieldComponent {\r\n  private _value = '';\r\n  public passwordVisible = false;\r\n\r\n  @Input() public control: FormControl = new FormControl();\r\n  @Input() public placeholder = 'Пароль';\r\n  @Input() public size: NzButtonGroupSize = 'default';\r\n  @Input()\r\n  get value(): string {\r\n    return this._value;\r\n  }\r\n  set value(val) {\r\n    this._value = val;\r\n    this.valueChange.emit(val);\r\n  }\r\n  @Output() public valueChange = new EventEmitter<string>();\r\n}\r\n","<nz-input-group [nzSuffix]=\"passSuffixTpl\" [nzSize]=\"size\">\r\n  <input [type]=\"passwordVisible ? 'text' : 'password'\" nz-input placeholder=\"Пароль\" [(ngModel)]=\"value\">\r\n</nz-input-group>\r\n\r\n<ng-template #passSuffixTpl>\r\n  <i nz-icon [nzType]=\"passwordVisible ? 'eye-invisible' : 'eye'\" (click)=\"passwordVisible = !passwordVisible\"></i>\r\n</ng-template>\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-captcha',\r\n  templateUrl: './captcha.component.html',\r\n  styleUrls: ['./captcha.component.less'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CaptchaComponent implements OnInit {\r\n  @Input() width;\r\n  @Input() height;\r\n  @Output() resolved = new EventEmitter();\r\n  @ViewChild('captchaContainer', { static: true }) container;\r\n  canvas = document.createElement('canvas');\r\n  letters = [\r\n    '0',\r\n    '1',\r\n    '2',\r\n    '3',\r\n    '4',\r\n    '5',\r\n    '6',\r\n    '7',\r\n    '8',\r\n    '9',\r\n    'a',\r\n    'b',\r\n    'c',\r\n    'd',\r\n    'e',\r\n    'f',\r\n    'g',\r\n    'h',\r\n    'i',\r\n    'j',\r\n    'k',\r\n    'l',\r\n    'm',\r\n    'n',\r\n    'o',\r\n    'p',\r\n    'q',\r\n    'r',\r\n    's',\r\n    't',\r\n    'u',\r\n    'v',\r\n    'w',\r\n    'x',\r\n    'y',\r\n    'z',\r\n    'A',\r\n    'B',\r\n    'C',\r\n    'D',\r\n    'E',\r\n    'F',\r\n    'G',\r\n    'H',\r\n    'I',\r\n    'J',\r\n    'K',\r\n    'L',\r\n    'M',\r\n    'N',\r\n    'O',\r\n    'P',\r\n    'Q',\r\n    'R',\r\n    'S',\r\n    'T',\r\n    'U',\r\n    'V',\r\n    'W',\r\n    'X',\r\n    'Y',\r\n    'Z',\r\n  ];\r\n  code = '';\r\n  enteredSecretCode: string;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.init();\r\n    this.refresh();\r\n  }\r\n\r\n  onClick() {\r\n    this.refresh();\r\n  }\r\n\r\n  checkSecretCode() {\r\n    if (\r\n      this.enteredSecretCode.trim().toLocaleLowerCase() ===\r\n      this.code.toLocaleLowerCase()\r\n    ) {\r\n      console.log('code equal ');\r\n      this.resolved.emit();\r\n    } else {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  private init() {\r\n    this.canvas.width = this.width || 100;\r\n    this.canvas.height = this.height || 50;\r\n    this.canvas.style.cursor = 'pointer';\r\n    this.canvas.innerHTML = 'canvas';\r\n    this.container.nativeElement.appendChild(this.canvas);\r\n  }\r\n\r\n  private refresh() {\r\n    this.enteredSecretCode = '';\r\n    this.code = '';\r\n    const ctx = this.canvas.getContext('2d');\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillStyle = this.randomColor(180, 240);\r\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      const letter = this.letters[this.randomNum(0, this.letters.length)];\r\n      this.code += letter;\r\n      ctx.font =\r\n        this.randomNum(this.canvas.height / 2, this.canvas.height) +\r\n        'px SimHei';\r\n      ctx.fillStyle = this.randomColor(50, 160);\r\n      ctx.shadowOffsetX = this.randomNum(-3, 3);\r\n      ctx.shadowOffsetY = this.randomNum(-3, 3);\r\n      ctx.shadowBlur = this.randomNum(-3, 3);\r\n      ctx.shadowColor = 'rgb(0, 0, 0, 0.3)';\r\n      const x = (this.canvas.width / 5) * i;\r\n      const y = this.canvas.height / 2;\r\n      const deg = this.randomNum(-30, 30);\r\n      ctx.translate(x, y);\r\n      ctx.rotate((deg * Math.PI) / 180);\r\n      ctx.fillText(letter, 0, 0);\r\n      ctx.rotate((-deg * Math.PI) / 180);\r\n      ctx.translate(-x, -y);\r\n    }\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      ctx.strokeStyle = this.randomColor(40, 180);\r\n      ctx.beginPath();\r\n      ctx.moveTo(\r\n        this.randomNum(0, this.canvas.width),\r\n        this.randomNum(0, this.canvas.height)\r\n      );\r\n      ctx.lineTo(\r\n        this.randomNum(0, this.canvas.width),\r\n        this.randomNum(0, this.canvas.height)\r\n      );\r\n      ctx.stroke();\r\n    }\r\n\r\n    // draw interfering point\r\n    for (let i = 0; i < this.canvas.width / 4; i++) {\r\n      ctx.fillStyle = this.randomColor();\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        this.randomNum(0, this.canvas.width),\r\n        this.randomNum(0, this.canvas.height),\r\n        1,\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n      ctx.fill();\r\n    }\r\n  }\r\n\r\n  private randomNum(min, max) {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n  }\r\n\r\n  private randomColor(min = 0, max = 255) {\r\n    const r = this.randomNum(min, max);\r\n    const g = this.randomNum(min, max);\r\n    const b = this.randomNum(min, max);\r\n    return `rgb(${r}, ${g}, ${b})`;\r\n  }\r\n}\r\n","<p>Чтобы продолжить, введите символы, которые вы видите на картинке</p>\r\n<div class=\"captcha-container\" #captchaContainer (click)=\"onClick()\"></div>\r\n<nz-input-group nzSearch nzSize=\"large\" [nzAddOnAfter]=\"suffixButton\">\r\n  <input\r\n    type=\"text\"\r\n    nz-input\r\n    placeholder=\"Введите символы выше\"\r\n    [(ngModel)]=\"enteredSecretCode\"\r\n  />\r\n</nz-input-group>\r\n<ng-template #suffixButton>\r\n  <button\r\n    nz-button\r\n    nzType=\"primary\"\r\n    nzSize=\"large\"\r\n    nzSearch\r\n    (click)=\"checkSecretCode()\"\r\n  >\r\n    Ок\r\n  </button>\r\n</ng-template>\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NzButtonModule } from 'ng-zorro-antd/button';\r\nimport { NzIconModule } from 'ng-zorro-antd/icon';\r\nimport { NzInputModule } from 'ng-zorro-antd/input';\r\nimport { CaptchaComponent } from './captcha.component';\r\n\r\n@NgModule({\r\n  declarations: [CaptchaComponent],\r\n  imports: [FormsModule, NzInputModule, NzButtonModule, NzIconModule],\r\n  exports: [CaptchaComponent],\r\n})\r\nexport class CaptchaModule {}\r\n","import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { AuthService } from '@presentation/auth/auth.service';\r\nimport { OauthLoginService } from '@presentation/auth/components/oauth-login/oauth-login.service';\r\nimport { Subscriptions } from '@core/decorators/subscriptions.decorator';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport { UserService } from '@core/services/user.service';\r\nimport { mapTo, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-oauth-login-success',\r\n  templateUrl: './oauth-login-success.component.html',\r\n  styleUrls: [ './oauth-login-success.component.less' ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OauthLoginSuccessComponent implements OnInit {\r\n  @Subscriptions()\r\n  private _subs: Subscription;\r\n\r\n  constructor(\r\n    private $oauthLogin: OauthLoginService,\r\n    private $auth: AuthService,\r\n    private $user: UserService,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.$oauthLogin.isOauthActive) {\r\n      this.$oauthLogin.goToRootAuth();\r\n      return;\r\n    }\r\n\r\n    this._subs = this.$auth\r\n      .login('')\r\n      .pipe(\r\n        switchMap(({ success, data }) => {\r\n          if (success) {\r\n            return this.loginSuccess(data);\r\n          }\r\n\r\n          return of(false);\r\n        })\r\n      )\r\n      .subscribe((result) => {\r\n      });\r\n  }\r\n\r\n  private loginSuccess(data: Record<string, any>): Observable<boolean> {\r\n    this.$user.setUser(data.labelId, data.deviceId, data.uuid, '');\r\n    this.$auth.setLogin(true);\r\n    this.$user.isOauthLoggedIn = true;\r\n\r\n    return this.$auth\r\n      .initializeSettings()\r\n      .pipe(mapTo(true));\r\n  }\r\n\r\n  /*\r\n    private loginError(): void {\r\n\r\n    }*/\r\n}\r\n","<app-container title=\"{{'SystemLogin' | dictionary | translate}}\">\r\n  <nz-spin nzSimple\r\n           [nzTip]=\"'PleaseWaitingLogin' | dictionary | translate\"\r\n  >\r\n  </nz-spin>\r\n</app-container>\r\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { AuthService } from '@presentation/auth/auth.service';\r\nimport { UserService } from '@core/services/user.service';\r\nimport { mapTo, switchMap } from 'rxjs/operators';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport { Subscriptions } from '@core/decorators/subscriptions.decorator';\r\nimport { OauthLoginService } from '@presentation/auth/components/oauth-login/oauth-login.service';\r\n\r\n@Component({\r\n  selector: 'app-oauth-finish',\r\n  templateUrl: './oauth-finish.component.html',\r\n  styleUrls: ['./oauth-finish.component.less'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OauthFinishComponent implements OnInit {\r\n  @Subscriptions()\r\n  private _subs: Subscription;\r\n\r\n  constructor(\r\n    private $oauthLogin: OauthLoginService,\r\n    private $auth: AuthService,\r\n    private $user: UserService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.$oauthLogin.isOauthActive) {\r\n      this.$oauthLogin.goToRootAuth();\r\n      return;\r\n    }\r\n\r\n    this._subs = this.$auth\r\n      .login('')\r\n      .pipe(\r\n        switchMap(({ success, data }) => {\r\n          if (success) {\r\n            return this.loginSuccess(data);\r\n          }\r\n\r\n          return of(false);\r\n        })\r\n      )\r\n      .subscribe((result) => {\r\n      });\r\n  }\r\n\r\n  private loginSuccess(data: Record<string, any>): Observable<boolean> {\r\n    this.$user.setUser(data.labelId, data.deviceId, data.uuid, '');\r\n    this.$auth.setLogin(true);\r\n\r\n    return this.$auth\r\n      .initializeSettings()\r\n      .pipe(mapTo(true));\r\n  }\r\n\r\n  private loginError(): void {\r\n\r\n  }\r\n\r\n}\r\n","<app-container title=\"{{'SystemLogin' | dictionary | translate}}\">\r\n  <nz-spin nzSimple\r\n           [nzTip]=\"'PleaseWaitingLogin' | dictionary | translate\"\r\n  >\r\n  </nz-spin>\r\n</app-container>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { OauthLoginService } from '@presentation/auth/components/oauth-login/oauth-login.service';\r\n\r\n@Component({\r\n  selector: 'app-oauth-login',\r\n  templateUrl: './oauth-login.component.html',\r\n  styleUrls: [ './oauth-login.component.less' ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OauthLoginComponent implements OnInit {\r\n\r\n  constructor(\r\n    private $service: OauthLoginService\r\n  ) {\r\n  }\r\n\r\n  loginAction(): void {\r\n    this.$service.loginOauth();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.$service.configureOauth();\r\n  }\r\n}\r\n","<app-container title=\"{{'SystemLogin' | dictionary | translate}}\">\r\n  <button nz-button\r\n          nzType=\"primary\"\r\n          [nzBlock]=\"true\"\r\n          (click)=\"loginAction()\">\r\n    {{'Login' | dictionary | translate}}\r\n  </button>\r\n</app-container>\r\n","import { ChangeDetectionStrategy, Component, ElementRef, OnDestroy, ViewChild } from '@angular/core';\r\nimport { Subscriptions } from '@core/decorators/subscriptions.decorator';\r\nimport { UserService } from '@core/services/user.service';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { AuthService } from '../../auth.service';\r\n\r\n@Component({\r\n  selector: 'app-otp-login',\r\n  templateUrl: './otp-login.component.html',\r\n  styleUrls: ['./otp-login.component.less'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OtpLoginComponent implements OnDestroy {\r\n  authKey = '';\r\n  authCode = '';\r\n  error = new BehaviorSubject<boolean>(false);\r\n  loading = new BehaviorSubject<boolean>(false);\r\n  codeSent = new BehaviorSubject<boolean>(false);\r\n\r\n  @ViewChild('authCodeInput') authCodeInput: ElementRef | undefined;\r\n\r\n  @Subscriptions()\r\n  sub: Subscription;\r\n\r\n  constructor(private $auth: AuthService, private _user: UserService) {}\r\n\r\n  public requestCodeAction(): void {\r\n    this.loading.next(true);\r\n    const credentials = AuthService.base64credentials('replicator', 'replicator');\r\n\r\n    this.sub = this.$auth\r\n      .getOtpCode(this.authKey, credentials)\r\n      .subscribe(({ success, data }) => {\r\n        if (success) {\r\n          this.codeSent.next(true);\r\n          this.setFocusOnAuthMethodInput();\r\n        } else {\r\n          this.error.next(true);\r\n        }\r\n        this.loading.next(false);\r\n      });\r\n  }\r\n\r\n  public loginAction(): void {\r\n    this.loading.next(true);\r\n\r\n    this.sub = this.$auth\r\n      .checkOtpCode(this.authKey, this.authCode)\r\n      .subscribe(({ success, data }) => {\r\n        if (success) {\r\n          this.codeSent.next(true);\r\n          this._user.setUser(data.token.labelId, data.token.deviceId, data.token.uuid, '');\r\n          this.$auth.setLogin(true);\r\n          this.$auth.initializeSettings().subscribe(() =>\r\n            this.error.next(false)\r\n          );\r\n        } else {\r\n          this.error.next(true);\r\n        }\r\n        this.loading.next(false);\r\n      });\r\n  }\r\n\r\n  public requestNewCodeAction(): void {\r\n    this.clearFields();\r\n    this.codeSent.next(false);\r\n  }\r\n\r\n  private clearFields(): void{\r\n    this.authCode = '';\r\n  }\r\n\r\n  private setFocusOnAuthMethodInput(): void{\r\n    setTimeout(() => {\r\n      if (this.authCodeInput) {\r\n        this.authCodeInput.nativeElement.focus();\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  public ngOnDestroy() {}\r\n}\r\n","<app-container title=\"Вход в систему\">\r\n  <nz-input-group nzSize=\"large\">\r\n    <input nz-input\r\n           class=\"input\"\r\n           placeholder=\"Номер телефона\"\r\n           [(ngModel)]=\"authKey\"\r\n           [disabled]=\"codeSent | async\"\r\n           (keydown.enter)=\"requestCodeAction()\">\r\n    <input nz-input\r\n           #authCodeInput\r\n           class=\"input\"\r\n           *ngIf=\"codeSent | async\"\r\n           placeholder=\"Код авторизации\"\r\n           [(ngModel)]=\"authCode\"\r\n           (keydown.enter)=\"loginAction()\">\r\n  </nz-input-group>\r\n\r\n  <div class=\"_text-center\">\r\n    <span class=\"error-text\" *ngIf=\"error | async\">\r\n      {{ 'Неверный идентификатор пользователя' | translate }}\r\n    </span>\r\n    <div class=\"main-button\">\r\n      <button nz-button\r\n              nzType=\"primary\"\r\n              *ngIf=\"!(codeSent | async)\"\r\n              [nzLoading]=\"loading | async\"\r\n              [disabled]=\"authKey.length===0\"\r\n              (click)=\"requestCodeAction()\">\r\n              Запросить код\r\n      </button>\r\n      <button nz-button\r\n              nzType=\"primary\"\r\n              *ngIf=\"codeSent | async\"\r\n              [nzLoading]=\"loading | async\"\r\n              [disabled]=\"authCode.length===0\"\r\n              (click)=\"loginAction()\">\r\n              Войти\r\n      </button>\r\n    </div>\r\n    <div><a nz-button nzType=\"link\" (click)=\"requestNewCodeAction()\" *ngIf=\"codeSent | async\">Запросить новый код</a></div>\r\n  </div>\r\n</app-container>\r\n"],"sourceRoot":"webpack:///"}