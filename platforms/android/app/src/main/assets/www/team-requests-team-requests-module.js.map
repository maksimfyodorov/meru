{"version":3,"sources":["./src/app/presentation/team/team-requests/components/team-requests/team-requests.service.ts","./src/app/presentation/team/team-requests/components/team-requests/team-requests.component.ts","./src/app/presentation/team/team-requests/components/team-requests/team-requests.component.html","./src/app/presentation/team/team-requests/team-requests-routing.module.ts","./src/app/presentation/team/team-requests/team-requests.module.ts"],"names":[],"mappings":"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","file":"team-requests-team-requests-module.js","sourcesContent":["import { Injectable, Injector, TemplateRef } from '@angular/core';\r\nimport { BaseService } from '@shared/common/base/base.service';\r\nimport { QueryParamsBuilder } from '@shared/common/utils/query-params-builder.util';\r\nimport { Subscriptions } from '@core/decorators/subscriptions.decorator';\r\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\r\nimport { ReservationsMessagesService } from '@shared/messages/services/reservations-messages.service';\r\nimport { LayoutSharedService } from '@app/layout/layout-shared.service';\r\nimport { StatusesService } from '@shared/dictionaries/services/statuses.service';\r\nimport { MeasurementsService } from '@shared/dictionaries/services/measurements.service';\r\nimport { UserService } from '@core/services/user.service';\r\nimport { MetaApiService } from '@shared/http/services/meta-api.service';\r\nimport { ReservationsApiService } from '@shared/http/services/reservations-api.service';\r\nimport { User } from '@core/models/user.model';\r\nimport {\r\n  filterActionsColumn,\r\n  initQueryParams,\r\n  mapActions,\r\n  mapDictionaryValues,\r\n  prepareUrlQueryParams\r\n} from '@shared/common/utils/reservations.util';\r\nimport { IBodyQueryParams, IQueryParams, UrlQueryParams } from '@shared/common/models/query-params.model';\r\nimport { ReservationType } from '@shared/http/models/meta.model';\r\nimport { catchError, debounceTime, delay, filter, map, pluck, switchMap, tap } from 'rxjs/operators';\r\nimport { getRequestsMetaNameByType } from '@presentation/team/team-reservations/team-reservations.utils';\r\nimport { IList, IReservationsMeta } from '@presentation/reservations/models/list.model';\r\nimport { IListRows, IReservationsActionParams } from '@base/list/models/list.model';\r\nimport { IListPaging } from '@base/list/models/list-paging.model';\r\nimport { IListSort } from '@base/list/models/list-sort.model';\r\nimport { IFilterValues } from '@base/filters/filters.model';\r\nimport { ActionParams, IActionNavigateParams, IActionRequestParams } from '@core/models/actions.model';\r\nimport { Complete } from '@core/decorators/complete.decorator';\r\nimport { AppError } from '@core/models/app-errorl.model';\r\nimport { IWorkplaceReservation } from '@shared/http/models/database.model';\r\nimport { Params } from '@angular/router';\r\nimport { IRequestsMeta } from '@presentation/team/team-requests/components/team-requests/team-requests.model';\r\nimport {mapRequestBody} from '@base/action/action.utils';\r\nimport { IWorkplaceReservationsMassActionResponse, IWorkplaceReservationsMassActionResponseMeta } from '@shared/http/models/response.model';\r\nimport { IWorkplaceReservationsMassActionRequest } from '@shared/http/models/request.model';\r\nimport { mapMassActionRequest, prepareMassActionRequest } from '@presentation/reservations/components/list/list.utils';\r\nimport { IHttpResponse } from '@core/models/http.model';\r\nimport { MessageService } from '@core/services/message.service';\r\n\r\n@Injectable()\r\nexport class TeamRequestsService extends BaseService {\r\n  private _queryParamsBuilder: QueryParamsBuilder = QueryParamsBuilder.default();\r\n\r\n  @Subscriptions('destroy')\r\n  private _subscriptions: Subscription;\r\n\r\n  public constructor(\r\n    protected injector: Injector,\r\n    private $messages: ReservationsMessagesService,\r\n    private $statuses: StatusesService,\r\n    private $measurements: MeasurementsService,\r\n    private $user: UserService,\r\n    private $metaApi: MetaApiService,\r\n    private $reservationsApi: ReservationsApiService,\r\n    private $message: MessageService\r\n  ) {\r\n    super(injector);\r\n    this._queryParamsBuilder.currentLang = this.$localization.currentLang;\r\n    this._queryParamsBuilder.dateFormat = this.filterDateFormat;\r\n  }\r\n\r\n  public get user(): User {\r\n    return this.$user.info as User;\r\n  }\r\n\r\n  public get queryParams$(): Observable<IQueryParams> {\r\n    return this._queryParamsBuilder.paramsChange;\r\n  }\r\n\r\n  public get queryParams(): IQueryParams {\r\n    return this._queryParamsBuilder.params;\r\n  }\r\n\r\n  public get urlQueryParams(): UrlQueryParams {\r\n    return prepareUrlQueryParams(\r\n      this._queryParamsBuilder.urlQueryParams,\r\n      this.filterDateFormat,\r\n      this.$localization.currentLang\r\n    );\r\n  }\r\n\r\n  public get bodyQueryParams(): IBodyQueryParams {\r\n    return this._queryParamsBuilder.bodyQueryParams;\r\n  }\r\n\r\n  public get type$(): Observable<ReservationType> {\r\n    return this.routeParams$.pipe(pluck('type'));\r\n  }\r\n\r\n  public get metaName$(): Observable<string> {\r\n    return this.type$.pipe(map(getRequestsMetaNameByType));\r\n  }\r\n\r\n  public get requestsList$(): Observable<IList> {\r\n    return this.requestsMeta$.pipe(\r\n      switchMap((metaRes) =>\r\n        this.requestsData$.pipe(map(dataRes => [ metaRes, dataRes ]))\r\n      ),\r\n      this.loadingOperator(),\r\n      map(([ meta, data ]) => ({ meta, data })),\r\n      switchMap(({ meta, data }) => mapDictionaryValues(this.$dictionaries, meta as IReservationsMeta, data as IListRows)),\r\n      switchMap(({ meta, data }) => mapActions(this.$dictionaries, meta, data, this.user)),\r\n      this.loadingOperator(false),\r\n      catchError((e) => {\r\n        console.log(e);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  public changePaging(paging: IListPaging): void {\r\n    this.updateQueryParams(paging);\r\n  }\r\n\r\n  public changeSort(sort: IListSort): void {\r\n    this.updateQueryParams(sort);\r\n  }\r\n\r\n  public changeFilters(filters: IFilterValues): void {\r\n    this._queryParamsBuilder.set({ updateData: true });\r\n    this.updateQueryParams(filters);\r\n  }\r\n\r\n  public callAction({ params, data }: IReservationsActionParams): void {\r\n    if (params?.url) {\r\n      this.callActionRequest(params as IActionRequestParams, data);\r\n    }\r\n  }\r\n\r\n  public callMassAction(actionParams: ActionParams, rows: IListRows): Observable<IWorkplaceReservationsMassActionResponseMeta[]> {\r\n    if (actionParams?.route) {\r\n      this.callNavigationAction(actionParams as IActionNavigateParams, rows[0] || {});\r\n      return of([]);\r\n    }\r\n\r\n    if (actionParams?.url) {\r\n      return this.callMassActionRequest(actionParams as IActionRequestParams, rows);\r\n    }\r\n  }\r\n\r\n  @Complete\r\n  public destroy(): void {\r\n    this._queryParamsBuilder.destroy();\r\n  }\r\n\r\n  private get filterDateFormat(): string {\r\n    return this.$measurements.getMeasurementByName('filterDate');\r\n  }\r\n\r\n  private get requestsMeta$(): Observable<IRequestsMeta | AppError> {\r\n    return combineLatest([\r\n      this.metaName$,\r\n      this.reset$,\r\n    ]).pipe(\r\n      this.readyOperator(),\r\n      this.resetErrorOperator(),\r\n      this.loadingOperator(true),\r\n      switchMap(([ name ]) =>\r\n        this.$metaApi.getMeta<IRequestsMeta>(name, this.$messages.loadingMetaErrorNotification)\r\n      ),\r\n      this.readyOperator(true),\r\n      filter((meta) => this.processMeta(meta)),\r\n      switchMap((meta) => this.initQueryParams(meta as IRequestsMeta)),\r\n      tap(() => this.updateQueryParams({}, false))\r\n    );\r\n  }\r\n\r\n  private get requestsData$(): Observable<IWorkplaceReservation[]> {\r\n    return combineLatest([\r\n      this.type$,\r\n      this.routeQueryParams$,\r\n      this.reload$\r\n    ]).pipe(\r\n      filter(([ , { updateData }, ]) => updateData === 'true'),\r\n      this.loadingOperator(true),\r\n      debounceTime(750),\r\n      switchMap(([ type ]) =>\r\n        this.$reservationsApi.getReservationsByType(type, this.bodyQueryParams)\r\n      ),\r\n      tap(() => this._queryParamsBuilder.setProperty('updateData', null))\r\n    );\r\n  }\r\n\r\n  private callNavigationAction(\r\n    {relativeRoute, route}: IActionNavigateParams,\r\n    data: Record<string, any>\r\n  ): void {\r\n    this.$nav.goToUrl(this.$url.createUrl(route, data), {\r\n      relativeTo: relativeRoute ? this.$route : null,\r\n      queryParams: {},\r\n    });\r\n  }\r\n\r\n  private callMassActionRequest({url, method, body}: IActionRequestParams, reservations: IListRows): Observable<IWorkplaceReservationsMassActionResponseMeta[]> {\r\n    const requestData: IWorkplaceReservationsMassActionRequest = prepareMassActionRequest(reservations, body);\r\n\r\n    this.loading = true;\r\n\r\n    return this.$reservationsApi\r\n      .callReservationAction<IWorkplaceReservationsMassActionRequest, IWorkplaceReservationsMassActionResponse>(url, method, requestData, {})\r\n      .pipe(\r\n        tap(({success}) => this.finishCallAction(success)),\r\n        map((response: IHttpResponse<IWorkplaceReservationsMassActionResponse>) =>\r\n          mapMassActionRequest(response, reservations, this.$message)\r\n        )\r\n      );\r\n  }\r\n\r\n  private finishCallAction(result: boolean): void {\r\n    result ? this.reload() : this.loading = false;\r\n  }\r\n\r\n  private updateQueryParams(params: Params, update: boolean = true): void {\r\n    if (update) {\r\n      this._queryParamsBuilder.updateQueryParams(params);\r\n    }\r\n\r\n    this.$nav.go([], { queryParams: this.urlQueryParams });\r\n  }\r\n\r\n  private callActionRequest(\r\n    { url, method, messages, body }: IActionRequestParams,\r\n    data: Record<string, any>\r\n  ): void {\r\n    const requestData: Record<string, any> = mapRequestBody(data, body);\r\n    url = this.$url.createUrl(url, data);\r\n    messages = this.$messages.getActionNotificationsMessages(messages);\r\n\r\n    of(url).pipe(\r\n      this.loadingOperator(true),\r\n      debounceTime(250),\r\n      switchMap((url: string) =>\r\n        this.$reservationsApi.callReservationAction(url, method, requestData, messages)\r\n      ),\r\n      delay(1000)\r\n    ).subscribe(({ success }) => {\r\n        success\r\n          ? this.reload()\r\n          : this.loading = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  private processMeta(meta: IReservationsMeta | AppError): meta is IReservationsMeta {\r\n    if (meta instanceof AppError) {\r\n      this.error = this.$messages.getLoadingMetaError(meta);\r\n      this.loading = false;\r\n      return false;\r\n    }\r\n\r\n    filterActionsColumn(meta, this.user);\r\n\r\n    return true;\r\n  }\r\n\r\n  private initQueryParams(meta: IRequestsMeta): Observable<IRequestsMeta> {\r\n    const labelGroupsManager: number[] = this.user.labelGroupsManager;\r\n\r\n    return this.$dictionaries.getDictionary('labels').pipe(\r\n      map(labels =>\r\n        labels\r\n          .filter(({ labelGroups }) =>\r\n            labelGroups.some(({ id }) => labelGroupsManager.includes(id))\r\n          )\r\n          .map(({ id }) => id)\r\n      ),\r\n      tap((labelIds) =>\r\n        initQueryParams(this._queryParamsBuilder, meta, this.routeQueryParams, { labelIds, statuses: ['NEW'] })\r\n      ),\r\n      map(() => meta)\r\n    );\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n  TemplateRef,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {fadeInOutAnimation} from '@core/utils/animations.util';\r\nimport {TeamRequestsService} from '@presentation/team/team-requests/components/team-requests/team-requests.service';\r\nimport {INavigations} from '@app/layout/navigation/navigation.model';\r\nimport {TEAM_RESERVATIONS_MENU} from '@presentation/team/team-reservations/team-reservations.constants';\r\nimport {Observable} from 'rxjs';\r\nimport {ReservationType} from '@shared/http/models/meta.model';\r\nimport {User} from '@core/models/user.model';\r\nimport {MarkForCheck} from '@core/decorators/async.decorator';\r\nimport {IList} from '@presentation/reservations/models/list.model';\r\nimport {IListRows, IReservationsActionParams} from '@base/list/models/list.model';\r\nimport {Subscribe} from '@core/decorators/subscribe.decorator';\r\nimport {IQueryParams} from '@shared/common/models/query-params.model';\r\nimport {IAppError} from '@core/models/app-errorl.model';\r\nimport {IListPaging} from '@base/list/models/list-paging.model';\r\nimport {IListSort} from '@base/list/models/list-sort.model';\r\nimport {IFilterValues} from '@base/filters/filters.model';\r\nimport {tap} from 'rxjs/operators';\r\nimport {Debounce} from '@core/decorators/debounce.decorator';\r\nimport {IRequestsMeta} from '@presentation/team/team-requests/components/team-requests/team-requests.model';\r\nimport { IWorkplaceReservationsMassActionResponseMeta } from '@shared/http/models/response.model';\r\nimport { ActionParams } from '@core/models/actions.model';\r\n\r\n@Component({\r\n  selector: 'app-team-requests',\r\n  templateUrl: './team-requests.component.html',\r\n  styleUrls: ['./team-requests.component.less'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class.team-requests]': `true`\r\n  },\r\n  animations: fadeInOutAnimation,\r\n  providers: [TeamRequestsService]\r\n})\r\nexport class TeamRequestsComponent implements OnInit, OnDestroy {\r\n  public menu: INavigations = TEAM_RESERVATIONS_MENU;\r\n  public type$: Observable<ReservationType> = this.$service.type$;\r\n  public user: User = this.$service.user;\r\n  public selectedRows: IListRows = [];\r\n\r\n  @MarkForCheck\r\n  public massActionResults: IWorkplaceReservationsMassActionResponseMeta[] = [];\r\n\r\n  @MarkForCheck\r\n  public filtersVisible: boolean = true;\r\n\r\n  @MarkForCheck\r\n  public meta: IRequestsMeta = null;\r\n\r\n  @MarkForCheck\r\n  public data: IListRows = [];\r\n\r\n  @Subscribe<IQueryParams>()\r\n  public queryParams;\r\n\r\n  @Subscribe<IAppError>()\r\n  public error = this.$service.error$;\r\n\r\n  @Subscribe<boolean>()\r\n  public ready;\r\n\r\n  @Subscribe<boolean>()\r\n  public loading = this.$service.loading$;\r\n\r\n  constructor(\r\n    private $service: TeamRequestsService,\r\n    private _cdr: ChangeDetectorRef\r\n  ) {\r\n  }\r\n\r\n  @Subscribe<IList>()\r\n  private set requestsList({meta, data}: IList) {\r\n    this.data = data;\r\n\r\n    if (this.meta !== meta) {\r\n      this.meta = meta;\r\n    }\r\n  }\r\n\r\n  reset(): void {\r\n    this.$service.reset();\r\n  }\r\n\r\n  public selectRows(rows: IListRows): void {\r\n    this.selectedRows = [...rows];\r\n  }\r\n\r\n  public callAction(action: IReservationsActionParams): void {\r\n    this.$service.callAction(action);\r\n  }\r\n\r\n  public callMassAction(actionParams: ActionParams): void {\r\n    this.$service\r\n      .callMassAction(actionParams, this.selectedRows)\r\n      .subscribe(results => {\r\n        this.massActionResults = results;\r\n        this._cdr.markForCheck();\r\n      });\r\n  }\r\n\r\n  public changePaging(paging: IListPaging): void {\r\n    this.$service.changePaging(paging);\r\n  }\r\n\r\n  public changeSort(sort: IListSort): void {\r\n    this.$service.changeSort(sort);\r\n  }\r\n\r\n  public changeFilters(filters: IFilterValues): void {\r\n    this.$service.changeFilters(filters);\r\n  }\r\n\r\n  public toggleFiltersVisible(): void {\r\n    this.filtersVisible = !this.filtersVisible;\r\n    this.dispatchWindowResize();\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.queryParams = this.$service.queryParams$;\r\n    this.requestsList = this.$service.requestsList$ as any;\r\n    this.ready = this.$service.ready$.pipe(\r\n      tap((ready) => {\r\n        if (!ready) {\r\n          this.data = [];\r\n          this.meta = null;\r\n        }\r\n      })\r\n    )\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.$service.destroy();\r\n  }\r\n\r\n  @Debounce(500)\r\n  private dispatchWindowResize(): void {\r\n    window.dispatchEvent(new Event('resize'));\r\n  }\r\n}\r\n","<div class=\"team-requests\">\r\n  <app-result *ngIf=\"error as error; else reservationsListTpl\"\r\n              [@fadeInOut]\r\n              [status]=\"'error'\"\r\n              [title]=\"error?.title | translate\"\r\n              [subtitle]=\"error?.subtitle | translate\"\r\n              [message]=\"error?.message | translate\"\r\n              class=\"team-requests__error\"\r\n  >\r\n    <button nz-button\r\n            [nzGhost]=\"true\"\r\n            [nzType]=\"'primary'\"\r\n            [nzSize]=\"'large'\"\r\n            (click)=\"reset()\"\r\n    >\r\n      {{'ReloadReservations' | dictionary | translate}}\r\n    </button>\r\n  </app-result>\r\n</div>\r\n\r\n<ng-template #reservationsListTpl>\r\n  <div class=\"team-requests__workspace\"\r\n       [ngClass]=\"{'_expanded': !filtersVisible, _ready: ready}\"\r\n  >\r\n    <div app-list\r\n         [columns]=\"meta?.columns\"\r\n         [paging]=\"queryParams?.paging\"\r\n         [sort]=\"queryParams?.sort\"\r\n         [rows]=\"data\"\r\n         [total]=\"data?.length\"\r\n         [loading]=\"loading\"\r\n         [multiSelectRows]=\"true\"\r\n         (rowsSelect)=\"selectRows($event)\"\r\n         (pagingChange)=\"changePaging($event)\"\r\n         (sortChange)=\"changeSort($event)\"\r\n         (actionCall)=\"callAction($event)\"\r\n    >\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<app-extra-title-tpl>\r\n  <app-toolbar #contentTpl\r\n               [actions]=\"meta?.actions || []\"\r\n               [data]=\"{items: selectedRows}\"\r\n               [skeletonButtonsCount]=\"3\"\r\n               (actionCall)=\"callMassAction($event)\"\r\n  >\r\n    <!-- <button nz-button\r\n            nz-dropdown\r\n            [nzDropdownMenu]=\"menu\"\r\n            [nzType]=\"'primary'\"\r\n            [nz-tooltip]=\"'Export' | dictionary | translate\"\r\n    >\r\n      <i nz-icon [nzType]=\"'download'\"></i>\r\n      <nz-dropdown-menu #menu=\"nzDropdownMenu\">\r\n        <ul nz-menu nzSelectable>\r\n          <li nz-menu-item><i nz-icon nzType=\"file-pdf\" nzTheme=\"outline\"></i>PDF</li>\r\n          <li nz-menu-item><i nz-icon nzType=\"file-excel\" nzTheme=\"outline\"></i>XLS</li>\r\n        </ul>\r\n      </nz-dropdown-menu>\r\n    </button> -->\r\n  </app-toolbar>\r\n</app-extra-title-tpl>\r\n\r\n<nz-modal [nzVisible]=\"!!massActionResults.length\"\r\n          [nzTitle]=\"'ResultOfAction' | dictionary | translate\"\r\n          [nzOkText]=\"null\"\r\n          [nzCancelText]=\"'Close' | dictionary | translate\"\r\n          [nzMaskClosable]=\"true\"\r\n          [nzClassName]=\"'mass-action-results'\"\r\n          (nzOnCancel)=\"massActionResults = []\"\r\n>\r\n  <perfect-scrollbar [config]=\"{suppressScrollX: true}\"\r\n                     class=\"mass-action-results__list\"\r\n  >\r\n    <p *ngFor=\"let result of massActionResults\"\r\n       nz-typography\r\n       class=\"mass-action-results__item\"\r\n    >\r\n      <i nz-icon\r\n         [nzType]=\"result.isOk ? 'check-circle' : 'close-circle'\"\r\n         [class._success]=\"result.isOk\"\r\n         [class._fail]=\"!result.isOk\"\r\n         class=\"mass-action-results__icon\"\r\n      ></i>\r\n      {{result.message}}\r\n    </p>\r\n  </perfect-scrollbar>\r\n</nz-modal>\r\n","import { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\nimport { TeamRequestsComponent } from '@presentation/team/team-requests/components/team-requests/team-requests.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: ':type',\r\n    component: TeamRequestsComponent,\r\n    data: {\r\n      title: 'Запросы на подтверждение'\r\n    },\r\n  }, {\r\n    path: '',\r\n    pathMatch: 'full',\r\n    redirectTo: 'workplace'\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forChild(routes) ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class TeamRequestsRoutingModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { TeamRequestsComponent } from './components/team-requests/team-requests.component';\r\nimport { ResultModule } from '@base/result/result.module';\r\nimport { CoreModule } from '@core/core.module';\r\nimport { ListModule } from '@base/list/list.module';\r\nimport { TeamRequestsRoutingModule } from '@presentation/team/team-requests/team-requests-routing.module';\r\nimport { ExtraTitleTplModule } from '@shared/layout/extra-title-tpl/extra-title-tpl.module';\r\nimport { ToolbarModule } from '@base/toolbar/toolbar.module';\r\n\r\n@NgModule({\r\n  declarations: [ TeamRequestsComponent ],\r\n  imports: [\r\n    CoreModule.forChild(),\r\n    ResultModule,\r\n    TeamRequestsRoutingModule,\r\n    ListModule,\r\n    ExtraTitleTplModule,\r\n    ToolbarModule\r\n  ]\r\n})\r\nexport class TeamRequestsModule {\r\n}\r\n"],"sourceRoot":"webpack:///"}