{"version":3,"sources":["./src/app/presentation/reservations/components/list/list-filters/list-filter-common/list-filter-common.component.ts","./src/app/presentation/reservations/components/list/list-filters/list-filter-common/list-filter-common.component.html","./src/app/presentation/reservations/reservations.dictionary.ts","./src/app/presentation/reservations/components/list/list-filters/list-filter-appointment/list-filter-appointment.component.ts","./src/app/presentation/reservations/components/list/list-filters/list-filter-appointment/list-filter-appointment.component.html","./src/app/presentation/reservations/resolvers/title.resolver.ts","./src/app/presentation/reservations/components/list/list-filters/list-filter.service.ts","./src/app/presentation/reservations/resolvers/view.page.resolver.ts","./src/app/base/skeleton/skeleton.module.ts","./src/app/presentation/reservations/reservations.module.ts","./src/app/base/skeleton/skeleton.component.ts","./src/app/base/skeleton/skeleton.component.html","./src/app/presentation/reservations/components/view/view.component.ts","./src/app/presentation/reservations/components/view/view.component.html","./src/app/presentation/reservations/components/view/view.service.ts","./src/app/presentation/reservations/components/list/list-filters/list-filter.component.ts","./src/app/presentation/reservations/components/list/list-filters/list-filter.component.html","./src/app/presentation/reservations/components/list/list.component.ts","./src/app/presentation/reservations/components/list/list.component.html","./src/app/presentation/reservations/reservations-routing.module.ts","./src/app/presentation/reservations/components/list/list.service.ts"],"names":[],"mappings":"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","file":"reservations-reservations-module.js","sourcesContent":["import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Injector,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FilterComponent } from '@base/filters/filters/filter.component';\r\nimport { Subscribe } from '@core/decorators/subscribe.decorator';\r\nimport {\r\n  IFilterCheckboxGroups,\r\n  IFilterCheckBoxOptions,\r\n} from '@base/filters/models/filter-checkbox.model';\r\nimport { ListFilterService } from '../list-filter.service';\r\nimport { TIME_PICKER_OPTIONS } from '@presentation/reservations/components/list/list-filters/list-filter.utils';\r\nimport { DictionaryName } from '@shared/dictionaries/dictionaries.constants';\r\n\r\n@Component({\r\n  selector: 'app-list-filter-common, [app-list-filter-common]',\r\n  templateUrl: './list-filter-common.component.html',\r\n  styleUrls: ['./list-filter-common.component.less'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class.app-reservations-filter-common]': `true`,\r\n  },\r\n})\r\nexport class ListFilterCommonComponent\r\n  extends FilterComponent\r\n  implements OnInit, OnDestroy\r\n{\r\n  public floorMapIdsControl: FormControl;\r\n  public statusesControl: FormControl;\r\n  public dateTimeFromControl: FormControl;\r\n  public dateTimeToControl: FormControl;\r\n  public timePickerOptions: Record<string, any> = TIME_PICKER_OPTIONS;\r\n\r\n  @Subscribe<IFilterCheckBoxOptions>()\r\n  public statuses;\r\n\r\n  @Subscribe<IFilterCheckboxGroups>()\r\n  public floorMapsGroups;\r\n\r\n  @Subscribe<string>()\r\n  public dateFormat;\r\n\r\n  @Input()\r\n  public filterFloorsBy: DictionaryName | null = null;\r\n\r\n  constructor(\r\n    protected injector: Injector,\r\n    private $listFilter: ListFilterService\r\n  ) {\r\n    super(injector);\r\n  }\r\n\r\n  public updateDateTime(dateTime: Date[]): void {\r\n    this.dateTimeFromControl.setValue(dateTime[0]);\r\n    this.dateTimeToControl.setValue(dateTime[1]);\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.assignControls();\r\n    this.getFieldOptions();\r\n  }\r\n\r\n  public ngOnDestroy(): void {}\r\n\r\n  private getFieldOptions(): void {\r\n    this.statuses = this.$listFilter.getStatuses$('statuses');\r\n    this.dateFormat = this.$listFilter.dateFormat$;\r\n    this.floorMapsGroups = this.$listFilter.getFloorMapsGroups$(\r\n      'floorMapIds',\r\n      this.filterFloorsBy\r\n    );\r\n  }\r\n}\r\n","<nz-form-item>\r\n  <ng-container *ngTemplateOutlet=\"titleTpl; context: {$implicit: 'Buildings/Floors'}\"></ng-container>\r\n  <nz-form-control>\r\n    <app-filter-checkbox-group [formControl]=\"floorMapIdsControl\"\r\n                               [groups]=\"floorMapsGroups\"\r\n                               [maxHeight]=\"'320px'\"\r\n    >\r\n    </app-filter-checkbox-group>\r\n  </nz-form-control>\r\n</nz-form-item>\r\n\r\n<nz-form-item class=\"app-reservations-filter-item\">\r\n  <ng-container *ngTemplateOutlet=\"titleTpl; context: {$implicit: 'Statuses'}\"></ng-container>\r\n  <nz-form-control>\r\n    <app-filter-checkbox [formControl]=\"statusesControl\"\r\n                         [options]=\"statuses\"\r\n                         [label]=\"filterStatusTpl\"\r\n    >\r\n    </app-filter-checkbox>\r\n  </nz-form-control>\r\n</nz-form-item>\r\n\r\n<nz-form-item class=\"app-reservations-filter-item\">\r\n  <ng-container *ngTemplateOutlet=\"titleTpl; context: {$implicit: 'Period'}\"></ng-container>\r\n\r\n  <app-filter-date [ngModel]=\"[dateTimeFromControl.value, dateTimeToControl.value]\"\r\n                   [layout]=\"'vertical'\"\r\n                   [format]=\"dateFormat\"\r\n                   (ngModelChange)=\"updateDateTime($event)\"\r\n  >\r\n  </app-filter-date>\r\n</nz-form-item>\r\n\r\n<ng-template #titleTpl let-title>\r\n  <h6 class=\"app-reservations-filter-item__title\">\r\n    {{title | dictionary | translate}}\r\n  </h6>\r\n</ng-template>\r\n\r\n<ng-template #filterStatusTpl\r\n             let-color=\"color\"\r\n             let-label=\"label\"\r\n>\r\n  <app-status-renderer [color]=\"color\"\r\n                       [value]=\"label\"\r\n                       [needConvert]=\"false\"\r\n  >\r\n  </app-status-renderer>\r\n</ng-template>\r\n","export enum ReservationsDictionary {\r\n  AllBuildings = 'All buildings',\r\n  AllFloors = 'All floors',\r\n  AllStatuses = 'All statuses',\r\n  BookWorkPlace = 'Book workplace',\r\n  ErrorLoadingReservationsList = 'Error loading reservations list',\r\n  ErrorLoadingReservationsListData = 'Error loading reservations list data',\r\n  ErrorLoadingReservationsListMeta = 'Error loading reservations list metadata',\r\n  LoadReservationsListFailed = 'Load reservations list failed',\r\n  MyWorkplaceReservations = 'My workplace reservations',\r\n  ReloadReservations = 'Reload reservations',\r\n}\r\n","import {ChangeDetectionStrategy, Component, Injector, OnDestroy, OnInit} from '@angular/core';\r\nimport {FilterComponent} from '@base/filters/filters/filter.component';\r\nimport {FormControl} from '@angular/forms';\r\nimport {Subscribe} from '@core/decorators/subscribe.decorator';\r\nimport {IFilterCheckboxGroups, IFilterCheckBoxOptions} from '@base/filters/models/filter-checkbox.model';\r\nimport {ListFilterService} from '@presentation/reservations/components/list/list-filters/list-filter.service';\r\n\r\n@Component({\r\n  selector: 'app-list-filter-appointment, [app-list-filter-appointment]',\r\n  templateUrl: './list-filter-appointment.component.html',\r\n  styleUrls: ['./list-filter-appointment.component.less'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ListFilterAppointmentComponent extends FilterComponent implements OnInit, OnDestroy {\r\n  public requestAppointmentLabelIdsControl: FormControl;\r\n  public requestAppointmentRoomIdsControl: FormControl;\r\n\r\n  @Subscribe<IFilterCheckboxGroups>()\r\n  public roomsGroups: IFilterCheckboxGroups;\r\n\r\n  @Subscribe<IFilterCheckboxGroups>()\r\n  public labels: IFilterCheckBoxOptions;\r\n\r\n  constructor(\r\n    protected injector: Injector,\r\n    private $listFilter: ListFilterService\r\n  ) {\r\n    super(injector);\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.assignControls();\r\n    this.getFieldOptions();\r\n  }\r\n\r\n  private getFieldOptions(): void {\r\n    this.labels = this.$listFilter.getLabels$('requestAppointmentLabelIds') as any;\r\n    this.roomsGroups = this.$listFilter.getRoomsGroups$('requestAppointmentRoomIds') as any;\r\n  }\r\n}\r\n","<nz-form-item>\r\n  <ng-container *ngTemplateOutlet=\"titleTpl; context: {$implicit: 'Buildings/Rooms'}\"></ng-container>\r\n  <nz-form-control>\r\n    <app-filter-checkbox-group [formControl]=\"requestAppointmentRoomIdsControl\"\r\n                               [groups]=\"roomsGroups\"\r\n                               [maxHeight]=\"'320px'\"\r\n    >\r\n    </app-filter-checkbox-group>\r\n  </nz-form-control>\r\n</nz-form-item>\r\n<nz-form-item>\r\n  <ng-container *ngTemplateOutlet=\"titleTpl; context: {$implicit: 'Members'}\"></ng-container>\r\n  <nz-form-control>\r\n    <app-filter-checkbox [formControl]=\"requestAppointmentLabelIdsControl\"\r\n                         [options]=\"labels || []\"\r\n                         [allowSearch]=\"true\"\r\n                         [maxHeight]=\"'240px'\"\r\n                         [placeholder]=\"'EnterYourName'\"\r\n    >\r\n    </app-filter-checkbox>\r\n  </nz-form-control>\r\n</nz-form-item>\r\n\r\n<ng-template #titleTpl let-title>\r\n  <h6 class=\"app-reservations-filter-item__title\">\r\n    {{title | dictionary | translate}}\r\n  </h6>\r\n</ng-template>\r\n\r\n<ng-template #filterStatusTpl\r\n             let-color=\"color\"\r\n             let-label=\"label\"\r\n>\r\n  <app-status-renderer [color]=\"color\"\r\n                       [value]=\"label\"\r\n                       [needConvert]=\"false\"\r\n  >\r\n  </app-status-renderer>\r\n</ng-template>\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  Resolve,\r\n  RouterStateSnapshot,\r\n  ActivatedRouteSnapshot\r\n} from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TitleResolver implements Resolve<string> {\r\n  constructor(private _translateService: TranslateService) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<string> {\r\n    const { type } = route.params;\r\n    return this._translateService.get(type);\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { getListFilterFieldsByType, mapFloorMapsOptions, mapLabelsOptions, mapRoomGroups, mapRoomsOptions, mapStatusesOptions } from '@presentation/reservations/components/list/list-filters/list-filter.utils';\r\nimport { ReservationType } from '@shared/http/models/meta.model';\r\nimport { DictionariesService } from '@shared/dictionaries/dictionaries.service';\r\nimport { StatusesService } from '@shared/dictionaries/services/statuses.service';\r\nimport { MeasurementsService } from '@shared/dictionaries/services/measurements.service';\r\nimport { FilterService } from '@base/filters/filters/filter.service';\r\nimport { combineLatest, forkJoin, Observable, of } from 'rxjs';\r\nimport { IFilterCheckboxGroups, IFilterCheckBoxOptions } from '@base/filters/models/filter-checkbox.model';\r\nimport { map, startWith, switchMap, tap } from 'rxjs/operators';\r\nimport { IDictionary, IDictionaryBuildings, IDictionaryFloorMaps, IDictionaryRooms } from '@shared/dictionaries/dictionaries.model';\r\nimport { DictionaryName } from '@shared/dictionaries/dictionaries.constants';\r\nimport { BuildingsService } from '@shared/dictionaries/services/buildings.service';\r\n\r\n@Injectable()\r\nexport class ListFilterService extends FilterService {\r\n  protected _formGroup: FormGroup = new FormGroup({});\r\n\r\n  constructor(\r\n    protected injector: Injector,\r\n    private formBuilder: FormBuilder,\r\n    private $dictionaries: DictionariesService,\r\n    private $statuses: StatusesService,\r\n    private $measurements: MeasurementsService,\r\n    private $buildings: BuildingsService\r\n  ) {\r\n    super(injector);\r\n  }\r\n\r\n  public get formGroup(): FormGroup {\r\n    return this._formGroup;\r\n  }\r\n\r\n  public get dateFormat$(): Observable<string> {\r\n    return this.$measurements.getMeasurementByName$('shortDateTime');\r\n  }\r\n\r\n  public getStatuses$(statusesControlName: string, excludeStatuses: string[] = []): Observable<IFilterCheckBoxOptions> {\r\n    return this.$statuses.statuses$.pipe(\r\n      map((statuses) =>\r\n        mapStatusesOptions(\r\n          statuses,\r\n          excludeStatuses,\r\n          this.getFormControlByName(statusesControlName)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  public getLabels$(labelIdsControlName: string): Observable<IFilterCheckBoxOptions> {\r\n    return this.getDictionaryByName('labels').pipe(\r\n      map((labels: IDictionary) =>\r\n        mapLabelsOptions(labels, this.getFormControlByName(labelIdsControlName))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getFloorMapsGroups$(floorMapsIdsControlName: string, filterBy: DictionaryName = null): Observable<IFilterCheckboxGroups> {\r\n    let buildingWithFloorMaps$: Observable<[IDictionaryBuildings, IDictionaryFloorMaps]> = this.$buildings.allBuildingsWithFloorMaps$;\r\n\r\n    switch (filterBy) {\r\n      case 'parkingLots':\r\n        buildingWithFloorMaps$ = this.$buildings.parkingLotsBuildingsWithFloorMaps$;\r\n        break;\r\n\r\n      case 'workplaces':\r\n        buildingWithFloorMaps$ = this.$buildings.workplacesBuildingsWithFloorMaps$;\r\n        break;\r\n\r\n      case 'rooms':\r\n        buildingWithFloorMaps$ = this.$buildings.roomsBuildingsWithFloorMaps$;\r\n        break;\r\n    }\r\n\r\n    return buildingWithFloorMaps$.pipe(\r\n      map(([buildings, floorMaps]) =>\r\n        mapFloorMapsOptions(\r\n          floorMaps,\r\n          buildings,\r\n          this.getFormControlByName(floorMapsIdsControlName)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  public getRoomsGroups$(roomsIdsControlName: string): Observable<IFilterCheckboxGroups> {\r\n    return combineLatest([\r\n      this.$buildings.roomsBuildingsWithFloorMaps$,\r\n      this.getDictionaryByName<IDictionaryRooms>('rooms'),\r\n    ]).pipe(\r\n      map(([ [buildings, floorMaps], rooms ]) =>\r\n        mapRoomGroups(buildings, floorMaps, rooms, this.getFormControlByName(roomsIdsControlName))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getRooms$(roomsIdsControlName: string, roomIdsControlName: string): Observable<IFilterCheckBoxOptions> {\r\n    return this\r\n      .getFormControlByName(roomsIdsControlName)\r\n      .valueChanges\r\n      .pipe(\r\n        startWith([]),\r\n        switchMap((floorMapIds: number[]) =>\r\n          this.getDictionaryByName<IDictionaryRooms>('rooms').pipe(\r\n            map(rooms => mapRoomsOptions(rooms, floorMapIds, this.getFormControlByName(roomIdsControlName)))\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  public createFormGroup(type: ReservationType): void {\r\n    this.clearFormGroup();\r\n    this.addFormGroupControls(type);\r\n  }\r\n\r\n  public clear(formGroup: FormGroup): void {\r\n    Object.values(this.formGroup.controls).forEach((control) => {\r\n      if (control.value instanceof Array) {\r\n        control.setValue([]);\r\n        return;\r\n      }\r\n\r\n      control.setValue(null);\r\n    });\r\n  }\r\n\r\n  private getDictionaryByName<T>(name: DictionaryName): Observable<T> {\r\n    return this.$dictionaries.getDictionary<T>(name);\r\n  }\r\n\r\n  private clearFormGroup(): void {\r\n    Object\r\n      .keys(this._formGroup.controls)\r\n      .forEach(key => this._formGroup.removeControl(key));\r\n  }\r\n\r\n  private addFormGroupControls(type: ReservationType): void {\r\n    if (!type) {\r\n      this._formGroup = new FormGroup({});\r\n      return;\r\n    }\r\n\r\n    Object\r\n      .entries(getListFilterFieldsByType(type))\r\n      .forEach(([ name, state ]) =>\r\n        this._formGroup.addControl(\r\n          name,\r\n          this.formBuilder.control(state)\r\n        )\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  Router, Resolve,\r\n  RouterStateSnapshot,\r\n  ActivatedRouteSnapshot\r\n} from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ViewPageResolver implements Resolve<string> {\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<string> {\r\n    return of(`Моя бронь #${route.params.id}`);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CoreModule } from '@core/core.module';\r\nimport { SkeletonComponent } from '@base/skeleton/skeleton.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SkeletonComponent\r\n  ],\r\n  imports: [\r\n    CoreModule.forChild()\r\n  ],\r\n  exports: [\r\n    SkeletonComponent\r\n  ]\r\n})\r\nexport class SkeletonModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BookingListModule } from '@base/booking-list/booking-list.module';\r\nimport { MapModule } from '@base/map/map.module';\r\nimport { OpenStreetMapModule } from '@base/open-street-map/open-street-map.module';\r\nimport { NzMessageModule } from 'ng-zorro-antd/message';\r\nimport { ListComponent } from './components/list/list.component';\r\nimport { ViewComponent } from './components/view/view.component';\r\nimport { CoreModule } from '@core/core.module';\r\nimport { ReservationsRoutingModule } from '@presentation/reservations/reservations-routing.module';\r\nimport { ListModule } from '@base/list/list.module';\r\nimport { ResultModule } from '@base/result/result.module';\r\nimport { DictionaryService } from '@core/services/dictionary.service';\r\nimport { ReservationsDictionary } from '@presentation/reservations/reservations.dictionary';\r\nimport { ReservationViewModule } from '@base/reservation-view/reservation-view.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FiltersModule } from '@base/filters/filters.module';\r\nimport { ListFilterComponent } from '@presentation/reservations/components/list/list-filters/list-filter.component';\r\nimport { ListFilterCommonComponent } from '@presentation/reservations/components/list/list-filters/list-filter-common/list-filter-common.component';\r\nimport { RendererModule } from '@base/renderer/renderer.module';\r\nimport { SkeletonModule } from '@base/skeleton/skeleton.module';\r\nimport { TranslateModule, TranslatePipe } from '@ngx-translate/core';\r\nimport { DropdownSelectModule } from '@base/dropdown-select/dropdown-select.module';\r\nimport { ExtraTitleTplModule } from '@shared/layout/extra-title-tpl/extra-title-tpl.module';\r\nimport { ListFilterAppointmentComponent } from '@presentation/reservations/components/list/list-filters/list-filter-appointment/list-filter-appointment.component';\r\nimport { CalendarModule } from '@base/calendar/calendar.module';\r\nimport { ToolbarModule } from '@base/toolbar/toolbar.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ListComponent,\r\n    ViewComponent,\r\n    ListFilterComponent,\r\n    ListFilterCommonComponent,\r\n    ListFilterAppointmentComponent\r\n  ],\r\n  imports: [\r\n    CoreModule.forChild(),\r\n    ReservationsRoutingModule,\r\n    ListModule,\r\n    ResultModule,\r\n    ReservationViewModule,\r\n    ReactiveFormsModule,\r\n    OpenStreetMapModule,\r\n    MapModule,\r\n    BookingListModule,\r\n    FiltersModule,\r\n    RendererModule,\r\n    SkeletonModule,\r\n    TranslateModule,\r\n    DropdownSelectModule,\r\n    NzMessageModule,\r\n    ExtraTitleTplModule,\r\n    CalendarModule,\r\n    ToolbarModule\r\n  ],\r\n  providers: [\r\n    TranslatePipe\r\n  ]\r\n})\r\nexport class ReservationsModule {\r\n  public constructor() {\r\n    DictionaryService.set(ReservationsDictionary);\r\n  }\r\n}\r\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\r\nimport { SkeletonType } from '@base/skeleton/skeleton.model';\r\n\r\n@Component({\r\n  selector: 'app-skeleton',\r\n  templateUrl: './skeleton.component.html',\r\n  styleUrls: ['./skeleton.component.less'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SkeletonComponent implements OnInit {\r\n  public rows: number[];\r\n\r\n  @Input()\r\n  public type: SkeletonType = 'form';\r\n\r\n  @Input()\r\n  public showHeader: boolean = false;\r\n\r\n  constructor() {\r\n    this.type = null;\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.rows = (new Array(24)).fill(null).map((_, index) => index + 1);\r\n  }\r\n}\r\n","<ng-container [ngSwitch]=\"type\">\r\n  <ng-container *ngSwitchCase=\"'table'\">\r\n    <div class=\"skeleton skeleton-table\">\r\n      <div class=\"skeleton__background\">\r\n        <div *ngFor=\"let i of rows\"\r\n             class=\"skeleton-table__mask _row _row-{{i}}\"\r\n        >\r\n        </div>\r\n        <div *ngFor=\"let i of [1,2,3,4,5]\"\r\n             class=\"skeleton-table__mask _col _col-{{i}}\"\r\n        >\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngSwitchCase=\"'form'\">\r\n    <div class=\"skeleton skeleton-form\">\r\n      <nz-skeleton-element *ngIf=\"showHeader\"\r\n                           nzType=\"input\" [nzActive]=\"true\"\r\n                           [nzSize]=\"'large'\"\r\n                           class=\"skeleton-form__header\"\r\n      ></nz-skeleton-element>\r\n      <div *ngFor=\"let i of [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\"\r\n           class=\"skeleton-form__item\"\r\n      >\r\n        <nz-skeleton [nzActive]=\"true\" [nzParagraph]=\"0\"></nz-skeleton>\r\n        <nz-skeleton-element nzType=\"input\" [nzActive]=\"true\"></nz-skeleton-element>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n  <div *ngSwitchDefault></div>\r\n</ng-container>\r\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { GlobalLoaderService } from '@core/services/global-loader.service';\r\nimport { TranslatePipe } from '@ngx-translate/core';\r\nimport { ViewService } from '@presentation/reservations/components/view/view.service';\r\nimport { ReservationsApiService } from '@shared/http/services/reservations-api.service';\r\nimport { NzModalService } from 'ng-zorro-antd/modal';\r\nimport { ReservationType } from '@shared/http/models/meta.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { Subscriptions } from '@core/decorators/subscriptions.decorator';\r\nimport { IAppointment, IRoom } from '@shared/http/models/database.model';\r\nimport { AddMembersService } from '@base/add-members/add-members.service';\r\n\r\n@Component({\r\n  selector: 'app-reservations-view',\r\n  templateUrl: './view.component.html',\r\n  styleUrls: ['./view.component.less'],\r\n  providers: [ViewService],\r\n})\r\nexport class ViewComponent implements OnInit {\r\n  reservation: any;\r\n  workplace: any;\r\n  appointment: IAppointment;\r\n  rooms: IRoom[];\r\n  placeType: ReservationType;\r\n\r\n  @Subscriptions()\r\n  sub: Subscription;\r\n\r\n  constructor(\r\n    private _service: ViewService,\r\n    private _router: Router,\r\n    private cdr: ChangeDetectorRef,\r\n    private _api: ReservationsApiService,\r\n    private _modal: NzModalService,\r\n    private _translate: TranslatePipe,\r\n    private _loader: GlobalLoaderService,\r\n    private _addMembers: AddMembersService\r\n  ) {\r\n    this.sub = this._service.placeType$.subscribe(\r\n      (type) => (this.placeType = type)\r\n    );\r\n    this.sub = this._service.fetchingData$.subscribe((data) => {\r\n      if (this.placeType === 'appointment') {\r\n        this.appointment = data[0];\r\n        this.rooms = data[1];\r\n        this.cdr.markForCheck();\r\n      }\r\n      if (this.placeType === 'workplace') {\r\n        this.reservation = data[0];\r\n        this.workplace = data[1];\r\n        this.cdr.markForCheck();\r\n      }\r\n      if (this.placeType === 'parking') {\r\n        this.reservation = data[0];\r\n        this.workplace = data[1];\r\n        this.workplace.type = 'PARKING_LOT';\r\n        this.cdr.markForCheck();\r\n      }\r\n      if (data[0] && data[1]) {\r\n        this._loader.contentLoading$.next(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  checkReservationStatus(statuses: string[]): boolean {\r\n    return this.reservation && statuses.includes(this.reservation.status);\r\n  }\r\n\r\n  clickAction(question: string, action: () => void): void {\r\n    this._modal.confirm({\r\n      nzTitle: this._translate.transform(question),\r\n      nzOnOk: () => {\r\n        action();\r\n      },\r\n    });\r\n  }\r\n\r\n  approve(): void {\r\n    this.clickAction('Do you want to approve reservation?', () => {\r\n      this._loader.contentLoading$.next(true);\r\n      this._api\r\n        .confirmReservation(this.placeType, this.reservation.id)\r\n        .subscribe(() => {\r\n          this._service.reload();\r\n          this._loader.contentLoading$.next(false);\r\n        });\r\n    });\r\n  }\r\n\r\n  complete(): void {\r\n    this.clickAction('Do you want to complete reservation?', () => {\r\n      this._loader.contentLoading$.next(true);\r\n      this._api\r\n        .cancelReservation(this.placeType, this.reservation.id)\r\n        .subscribe(() => {\r\n          this._service.reload();\r\n          this._loader.contentLoading$.next(false);\r\n        });\r\n    });\r\n  }\r\n\r\n  get isAppointmentOrganizer(): boolean {\r\n    return this.appointment?.isAppointmentOrganizer;\r\n  }\r\n\r\n  get appointmentAttendeeStatus(): string {\r\n    return this.appointment?.appointmentAttendeeStatus;\r\n  }\r\n\r\n  get appointmentStatus(): string {\r\n    return this.appointment?.appointmentStatus;\r\n  }\r\n\r\n  saveEmailsAppointment(): void {\r\n    this.sub = this._api\r\n      .saveAppointmentEmails(\r\n        this.appointment.appointmentParentId,\r\n        this._addMembers.emails\r\n      )\r\n      .subscribe(console.debug);\r\n  }\r\n\r\n  closeAppointment(): void {\r\n    this.sub = this._api\r\n      .closeAppointment(this.appointment.appointmentId)\r\n      .subscribe(() =>\r\n        this._router\r\n          .navigate(['/', 'reservations', 'appointment'])\r\n          .catch(console.debug)\r\n      );\r\n  }\r\n\r\n  deleteAppointment(): void {\r\n    this.clickAction('Do you want to delete reservation?', () => {\r\n      this.sub = this._api\r\n        .deleteAppointment(this.appointment.appointmentId)\r\n        .subscribe(() =>\r\n          this._router\r\n            .navigate(['/', 'reservations', 'appointment'])\r\n            .catch(console.debug)\r\n        );\r\n    });\r\n    // this._modal.confirm({\r\n    //   nzTitle: 'Вы хотите удалить бронирование?',\r\n    //   nzOnOk: () => {\r\n    //     this.sub = this._api\r\n    //       .deleteAppointment(this.appointment.appointmentId)\r\n    //       .subscribe(() =>\r\n    //         this._router\r\n    //           .navigate(['/', 'reservations', 'appointment'])\r\n    //           .catch(console.debug)\r\n    //       );\r\n    //   },\r\n    // });\r\n  }\r\n\r\n  confirmAppointment(): void {\r\n    this.sub = this._api\r\n      .confirmAppointment(this.appointment.appointmentId)\r\n      .subscribe();\r\n  }\r\n}\r\n","<app-extra-title-tpl>\r\n  <div class=\"left\">\r\n    <button nz-button nzType=\"primary\" class=\"btn\" *ngIf=\"checkReservationStatus(['APPROVED'])\" (click)=\"approve()\">\r\n      {{ 'Approve' | translate }}\r\n    </button>\r\n    <button nz-button nzType=\"primary\" class=\"btn\" *ngIf=\"checkReservationStatus(['CONFIRMED'])\" (click)=\"complete()\">\r\n      {{ 'Complete' | translate }}\r\n    </button>\r\n    <button nz-button nzType=\"primary\" class=\"btn\" *ngIf=\"checkReservationStatus(['NEW', 'APPROVED'])\" (click)=\"complete()\">\r\n      {{ 'Delete' | translate }}\r\n    </button>\r\n    <ng-container *ngIf=\"placeType === 'appointment'\">\r\n      <ng-container *ngIf=\"isAppointmentOrganizer\">\r\n        <button nz-button nzType=\"primary\" class=\"btn\" *ngIf=\"appointmentAttendeeStatus !== 'DECLINE'\" (click)=\"deleteAppointment()\">\r\n          {{ 'Delete' | translate }}\r\n        </button>\r\n        <button nz-button nzType=\"primary\" class=\"btn\" *ngIf=\"appointmentAttendeeStatus === 'DECLINE'\" (click)=\"closeAppointment()\">\r\n          {{ 'Close' | translate }}\r\n        </button>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!isAppointmentOrganizer\">\r\n        <button nz-button nzType=\"primary\" class=\"btn\" (click)=\"confirmAppointment()\" [disabled]=\"appointmentStatus !== 'NEW'\">\r\n          {{ 'Confirm' | translate }}\r\n        </button>\r\n        <button nz-button nzType=\"primary\" class=\"btn\" (click)=\"closeAppointment()\" [disabled]=\"appointmentStatus === 'CLOSED'\">\r\n          {{ 'Close' | translate }}\r\n        </button>\r\n      </ng-container>\r\n    </ng-container>\r\n  </div>\r\n</app-extra-title-tpl>\r\n\r\n<app-reservation-view\r\n  [reservation]=\"reservation\"\r\n  [workplace]=\"workplace\"\r\n  [appointment]=\"appointment\"\r\n  [rooms]=\"rooms\"\r\n  [placeType]=\"placeType\"\r\n></app-reservation-view>\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { IHttpResponse } from '@core/models/http.model';\r\nimport { GlobalLoaderService } from '@core/services/global-loader.service';\r\nimport { DictionariesService } from '@shared/dictionaries/dictionaries.service';\r\nimport { StatusesService } from '@shared/dictionaries/services/statuses.service';\r\nimport { IAppointment, IRoom } from '@shared/http/models/database.model';\r\nimport { ReservationType } from '@shared/http/models/meta.model';\r\nimport { ReservationsApiService } from '@shared/http/services/reservations-api.service';\r\nimport { DictionaryName } from '@src/app/shared/dictionaries/dictionaries.constants';\r\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\r\nimport { map, pluck, switchMap, tap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class ViewService {\r\n  private _reload = new BehaviorSubject<null>(null);\r\n\r\n  constructor(\r\n    private _api: ReservationsApiService,\r\n    private $route: ActivatedRoute,\r\n    private _dictionaries: DictionariesService,\r\n    private $statuses: StatusesService,\r\n    private _loader: GlobalLoaderService\r\n  ) {\r\n  }\r\n\r\n  get reservation$(): Observable<any> {\r\n    return combineLatest([this._routeId$, this._reload]).pipe(switchMap(([{ id }, _r]) => this._reservationReq$(+id, _r)));\r\n  }\r\n\r\n  appointmentAndRooms$(id): Observable<[ IAppointment, IRoom[] ]> {\r\n    return this._api.getAppointmentById(id).pipe(\r\n      switchMap((app) => combineLatest([\r\n        of(app ? app : null),\r\n        app ? this.getRoomsByIds$(app.appointmentLocationIds) : of(null)\r\n      ]))\r\n    );\r\n  }\r\n\r\n  get placeType$(): Observable<ReservationType> {\r\n    return this._routeId$.pipe(pluck('type'));\r\n  }\r\n\r\n  reload(): void {\r\n    this._reload.next(null);\r\n  }\r\n\r\n  private get _routeId$(): Observable<Record<string, any>> {\r\n    return this.$route.params;\r\n  }\r\n\r\n  private _reservationReq$(id: number, type: ReservationType): Observable<any> {\r\n    return this._api.getReservationsByType(type, {\r\n      id,\r\n      statuses: this.$statuses.allStatusesCodes\r\n    }).pipe(\r\n      pluck<any, any>('0'),\r\n      switchMap(reservation => {\r\n        if (reservation) {\r\n          switch (type) {\r\n            case 'parking':\r\n              return this._parkingReq$(reservation.parkingLotId).pipe(\r\n                map((parkingLot) => [reservation, parkingLot]),\r\n              );\r\n            default:\r\n              return this._workplaceReq$(reservation.workplaceId).pipe(\r\n                map((workplace) => [reservation, workplace]),\r\n              );\r\n          }\r\n        } else {\r\n          return of([ null, null ]);\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  private _workplaceReq$(id: number): Observable<IHttpResponse<any>> {\r\n    return this._dictionaries.getDictionaryItemByKey('workplaces', id);\r\n  }\r\n\r\n  private _parkingReq$(id: number): Observable<IHttpResponse<any>> {\r\n    return this._dictionaries.getDictionaryItemByKey('parkingLots', id);\r\n  }\r\n\r\n  getRoomsByIds$(ids: number[]): Observable<IRoom[]> {\r\n    return this._dictionaries.getDictionary<IRoom[]>('rooms').pipe(\r\n      map((rooms) => rooms.filter((r) => ids.includes(r.id)))\r\n    );\r\n  }\r\n\r\n  get fetchingData$(): Observable<any> {\r\n    return combineLatest([\r\n      this.$route.params,\r\n      this._reload\r\n    ]).pipe(\r\n      tap(() => this._loader.contentLoading$.next(true)),\r\n      switchMap(([ { id, type }, _r ]) => {\r\n        switch (type) {\r\n          case 'appointment':\r\n            return this.appointmentAndRooms$(decodeURIComponent(id));\r\n          case 'parking':\r\n            return this._reservationReq$(Number(id), 'parking');\r\n          case 'workplace':\r\n            return this._reservationReq$(Number(id), 'workplace');\r\n          default:\r\n            return of(null);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Injector, Input, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IFilterValues } from '@base/filters/filters.model';\r\nimport { FilterComponent } from '@base/filters/filters/filter.component';\r\nimport { ListFilterService } from '@presentation/reservations/components/list/list-filters/list-filter.service';\r\nimport { ReservationType } from '@shared/http/models/meta.model';\r\n\r\n@Component({\r\n  selector: 'app-reservations-filters, [app-reservations-filters]',\r\n  templateUrl: './list-filter.component.html',\r\n  styleUrls: [ './list-filter.component.less' ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class.app-reservations-filter]': `true`\r\n  },\r\n  providers: [ ListFilterService ]\r\n})\r\nexport class ListFilterComponent extends FilterComponent implements OnInit {\r\n  public type: ReservationType;\r\n  public formGroup: FormGroup = this.$service.formGroup;\r\n\r\n  @Input()\r\n  public loading: boolean = false;\r\n\r\n  @Input('type')\r\n  public set inputType(type: ReservationType) {\r\n    if (!type) return;\r\n\r\n    this.$service.createFormGroup(type);\r\n    this.type = type;\r\n  }\r\n\r\n  @Input('values')\r\n  public set inputValues(values: IFilterValues) {\r\n    if (!values) return;\r\n    this.formGroup.patchValue(values, { emitEvent: false });\r\n  }\r\n\r\n  constructor(\r\n    private $service: ListFilterService,\r\n    protected injector: Injector\r\n  ) {\r\n    super(injector);\r\n  }\r\n\r\n  public clear(): void {\r\n    this.$service.clear(this.formGroup);\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n}\r\n","<div nz-row\r\n     [nzGutter]=\"12\"\r\n     class=\"app-reservations-filters__header\"\r\n>\r\n  <div nz-col [nzXs]=\"8\"\r\n       [nzLg]=\"0\"\r\n       class=\"app-reservations-filters__header-action\"\r\n  >\r\n    <button nz-button\r\n            [nzType]=\"'link'\"\r\n    >\r\n      {{'Close' | dictionary | translate}}\r\n    </button>\r\n  </div>\r\n\r\n  <h3 nz-col\r\n      [nzXs]=\"8\"\r\n      [nzLg]=\"12\"\r\n      class=\"app-reservations-filters__header-title\"\r\n  >\r\n    {{'Filters' | dictionary | translate}}\r\n  </h3>\r\n\r\n  <div nz-col\r\n       [nzXs]=\"8\"\r\n       [nzLg]=\"12\"\r\n       class=\"app-reservations-filters__header-action _right\"\r\n  >\r\n    <button nz-button\r\n            [nzType]=\"'link'\"\r\n            (click)=\"clear()\"\r\n    >\r\n      {{'Clear' | dictionary | translate}}\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<nz-spin [nzSpinning]=\"loading\"\r\n         class=\"app-reservations-filters__form-wrapper\"\r\n>\r\n  <form nz-form\r\n        [nzLayout]=\"'vertical'\"\r\n        [formGroup]=\"formGroup\"\r\n        [ngSwitch]=\"type\"\r\n        class=\"app-reservations-filters__form\"\r\n  >\r\n    <perfect-scrollbar [config]=\"{suppressScrollX: true}\"\r\n                       class=\"app-reservations-filters__form-scroll\"\r\n    >\r\n      <div *ngSwitchCase=\"'appointment'\"\r\n           app-list-filter-appointment\r\n           [formGroup]=\"formGroup\"\r\n      >\r\n      </div>\r\n\r\n      <div *ngSwitchCase=\"'parking'\"\r\n           app-list-filter-common\r\n           [formGroup]=\"formGroup\"\r\n           [filterFloorsBy]=\"'parkingLots'\"\r\n      >\r\n      </div>\r\n\r\n      <div *ngSwitchDefault\r\n           app-list-filter-common\r\n           [formGroup]=\"formGroup\"\r\n           [filterFloorsBy]=\"'workplaces'\"\r\n      >\r\n      </div>\r\n    </perfect-scrollbar>\r\n  </form>\r\n</nz-spin>\r\n\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostListener,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ListService } from '@presentation/reservations/components/list/list.service';\r\nimport { MarkForCheck } from '@core/decorators/async.decorator';\r\nimport {\r\n  IList,\r\n  IReservationsMeta,\r\n} from '@presentation/reservations/models/list.model';\r\nimport { IListPaging } from '@base/list/models/list-paging.model';\r\nimport { IListSort } from '@base/list/models/list-sort.model';\r\nimport {\r\n  IListRow,\r\n  IListRows,\r\n  IReservationsActionParams,\r\n} from '@base/list/models/list.model';\r\nimport { IAppError } from '@core/models/app-errorl.model';\r\nimport { IQueryParams } from '@shared/common/models/query-params.model';\r\nimport { IFilterValues } from '@base/filters/filters.model';\r\nimport { Throttle } from '@core/decorators/throttle.decorator';\r\nimport { Subscribe } from '@core/decorators/subscribe.decorator';\r\nimport { tap } from 'rxjs/operators';\r\nimport { fadeInOutAnimation } from '@core/utils/animations.util';\r\nimport { Debounce } from '@core/decorators/debounce.decorator';\r\nimport { ReservationType } from '@shared/http/models/meta.model';\r\nimport { ICalendarEvents } from '@base/calendar/calendar.model';\r\nimport { createCalendarEvents } from '@presentation/reservations/components/list/list.utils';\r\nimport { ActionParams } from '@core/models/actions.model';\r\nimport { IWorkplaceReservationsMassActionResponseMeta } from '@shared/http/models/response.model';\r\nimport { NzModalService } from 'ng-zorro-antd/modal';\r\nimport * as XLSX from 'xlsx';\r\n\r\n@Component({\r\n  selector: 'app-reservations',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.less'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [ListService],\r\n  animations: fadeInOutAnimation,\r\n})\r\nexport class ListComponent implements OnInit, OnDestroy, IList {\r\n  public showFiltersVisibleButton: boolean = false;\r\n  public meta: IReservationsMeta = null;\r\n  public data: IListRows | ICalendarEvents = [];\r\n  public selectedRows: IListRows = [];\r\n\r\n  @MarkForCheck\r\n  public massActionResults: IWorkplaceReservationsMassActionResponseMeta[] = [];\r\n\r\n  @MarkForCheck\r\n  public filtersVisible: boolean = true;\r\n\r\n  @Subscribe<IQueryParams>()\r\n  public queryParams: IQueryParams;\r\n\r\n  @Subscribe<IAppError>()\r\n  public error = this.$service.error$;\r\n\r\n  @Subscribe<boolean>()\r\n  public ready;\r\n\r\n  @Subscribe<boolean>()\r\n  public loading = this.$service.loading$;\r\n\r\n  @Subscribe<ReservationType>()\r\n  public type: ReservationType = this.$service.type$ as any;\r\n\r\n  public constructor(\r\n    private $service: ListService,\r\n    private _cdr: ChangeDetectorRef,\r\n    private _modal: NzModalService\r\n  ) {}\r\n\r\n  public get hasExport(): boolean {\r\n    return this.type !== 'appointment';\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  @Throttle(250)\r\n  public windowResize(_$event?: Event): void {\r\n    this.showFiltersVisibleButton = this.$service.showFiltersVisibleButton;\r\n  }\r\n\r\n  @Subscribe<IList>()\r\n  private set list({ meta, data }: IList) {\r\n    if (this.meta !== meta) {\r\n      if (Array.isArray(meta.actions)) {\r\n        meta.actions = meta.actions.filter((m) => m.id !== 'repeat');\r\n      }\r\n      this.meta = meta;\r\n    }\r\n    switch (this.type) {\r\n      case 'appointment':\r\n        this.data = createCalendarEvents(data, this.$service.statusesMap);\r\n        break;\r\n\r\n      case 'parking':\r\n        if (Array.isArray(data)) {\r\n          data.forEach((d) => (d.place = d.parkingLot));\r\n        }\r\n        this.data = data;\r\n        break;\r\n\r\n      default:\r\n        this.data = data;\r\n    }\r\n    this._cdr.detectChanges();\r\n  }\r\n\r\n  public reset(): void {\r\n    this.$service.reset();\r\n  }\r\n\r\n  public callAction(actionParams: IReservationsActionParams): void {\r\n    this.$service.callAction(actionParams);\r\n  }\r\n\r\n  public callMassAction(actionParams: ActionParams): void {\r\n    if (actionParams.url && actionParams.url.includes('cancel')) {\r\n      this._modal.confirm({\r\n        nzTitle: 'Вы уверены, что хотите удалить отмеченные позиции?',\r\n        nzOnOk: () => {\r\n          this.onCallMassAction(actionParams);\r\n        },\r\n      });\r\n    } else {\r\n      this.onCallMassAction(actionParams);\r\n    }\r\n  }\r\n\r\n  onCallMassAction(actionParams) {\r\n    this.$service\r\n      .callMassAction(actionParams, this.selectedRows)\r\n      .subscribe((results) => {\r\n        this.massActionResults = results;\r\n        this._cdr.markForCheck();\r\n      });\r\n  }\r\n\r\n  public selectRow(row: IListRow | null): void {\r\n    this.$service.selectRow(row, this.type);\r\n  }\r\n\r\n  public selectRows(rows: IListRows): void {\r\n    this.selectedRows = [...rows];\r\n  }\r\n\r\n  public createReservation(): void {\r\n    this.$service.createReservation();\r\n  }\r\n\r\n  public changePaging(paging: IListPaging): void {\r\n    this.$service.changePaging(paging);\r\n  }\r\n\r\n  public changeSort(sort: IListSort): void {\r\n    this.$service.changeSort(sort);\r\n  }\r\n\r\n  public changeFilters(filters: IFilterValues): void {\r\n    this.$service.changeFilters(filters);\r\n  }\r\n\r\n  public changePeriod(period: [Date, Date]): void {\r\n    this.$service.changeFilters({\r\n      requestAppointmentDateFrom: period[0],\r\n      requestAppointmentDateTo: period[1],\r\n    });\r\n  }\r\n\r\n  public toggleFiltersVisible(): void {\r\n    this.filtersVisible = !this.filtersVisible;\r\n    this.dispatchWindowResize();\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.queryParams = this.$service.queryParams$ as any;\r\n    this.list = this.$service.list$ as any;\r\n    this.ready = this.$service.ready$.pipe(\r\n      tap((ready) => {\r\n        if (!ready) {\r\n          this.data = [];\r\n          this.meta = null;\r\n        }\r\n      })\r\n    );\r\n\r\n    this.windowResize();\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.$service.destroy();\r\n  }\r\n\r\n  @Debounce(500)\r\n  private dispatchWindowResize(): void {\r\n    window.dispatchEvent(new Event('resize'));\r\n  }\r\n\r\n  public exportxls(): void {\r\n    const fileName = 'ExcelSheet.xlsx';\r\n\r\n    const element = document.getElementById('reservationList');\r\n\r\n    const ws: XLSX.WorkSheet = XLSX.utils.table_to_sheet(element);\r\n\r\n    /* generate workbook and add the worksheet */\r\n\r\n    const wb: XLSX.WorkBook = XLSX.utils.book_new();\r\n\r\n    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n\r\n    /* save to file */\r\n\r\n    XLSX.writeFile(wb, fileName);\r\n  }\r\n}\r\n","<div class=\"reservations\">\r\n  <app-result\r\n    *ngIf=\"error as error; else reservationsListTpl\"\r\n    [@fadeInOut]\r\n    [status]=\"'error'\"\r\n    [title]=\"error?.title | translate\"\r\n    [subtitle]=\"error?.subtitle | translate\"\r\n    [message]=\"error?.message | translate\"\r\n    class=\"reservations__error\"\r\n  >\r\n    <button\r\n      nz-button\r\n      [nzGhost]=\"true\"\r\n      [nzType]=\"'primary'\"\r\n      [nzSize]=\"'large'\"\r\n      (click)=\"reset()\"\r\n    >\r\n      {{ \"ReloadReservations\" | dictionary | translate }}\r\n    </button>\r\n  </app-result>\r\n</div>\r\n\r\n<ng-template #reservationsListTpl>\r\n  <div\r\n    class=\"reservations__body\"\r\n    [ngSwitch]=\"type\"\r\n    [ngClass]=\"{ _expanded: !filtersVisible, _ready: ready }\"\r\n  >\r\n    <div\r\n      *ngSwitchCase=\"'appointment'\"\r\n      app-calendar\r\n      [loading]=\"loading\"\r\n      [events]=\"data\"\r\n      [modes]=\"['month', 'day', 'week']\"\r\n      [mode]=\"'month'\"\r\n      [allowSelectDayEvent]=\"true\"\r\n      (periodChange)=\"changePeriod($event)\"\r\n      (eventSelect)=\"selectRow($event.data)\"\r\n    ></div>\r\n\r\n    <div\r\n      *ngSwitchDefault\r\n      app-list\r\n      [columns]=\"meta?.columns\"\r\n      [paging]=\"queryParams?.paging\"\r\n      [sort]=\"queryParams?.sort\"\r\n      [rows]=\"data\"\r\n      [total]=\"data?.length\"\r\n      [loading]=\"loading\"\r\n      [multiSelectRows]=\"true\"\r\n      (rowSelect)=\"selectRow($event)\"\r\n      (rowsSelect)=\"selectRows($event)\"\r\n      (pagingChange)=\"changePaging($event)\"\r\n      (sortChange)=\"changeSort($event)\"\r\n      (actionCall)=\"callAction($event)\"\r\n      class=\"reservations__list\"\r\n    ></div>\r\n  </div>\r\n\r\n  <div\r\n    class=\"reservations__left\"\r\n    [ngClass]=\"{ _collapsed: !filtersVisible, _ready: ready }\"\r\n  >\r\n    <div\r\n      app-reservations-filters\r\n      [loading]=\"!ready\"\r\n      [type]=\"type\"\r\n      [values]=\"queryParams?.filters\"\r\n      (valuesChange)=\"changeFilters($event)\"\r\n      class=\"reservations__filters\"\r\n    ></div>\r\n  </div>\r\n</ng-template>\r\n\r\n<app-extra-title-tpl>\r\n  <app-toolbar\r\n    #contentTpl\r\n    [actions]=\"meta?.actions || []\"\r\n    [data]=\"{ items: selectedRows }\"\r\n    [skeletonButtonsCount]=\"type === 'appointment' ? 1 : 5\"\r\n    (actionCall)=\"callMassAction($event)\"\r\n  >\r\n    <button\r\n      *ngIf=\"hasExport\"\r\n      nz-button\r\n      nz-dropdown\r\n      [nzDropdownMenu]=\"menu\"\r\n      [nzType]=\"'primary'\"\r\n      [nz-tooltip]=\"'Export' | dictionary | translate\"\r\n    >\r\n      <i nz-icon [nzType]=\"'download'\"></i>\r\n      <nz-dropdown-menu #menu=\"nzDropdownMenu\">\r\n        <ul nz-menu nzSelectable>\r\n          <!-- <li nz-menu-item><i nz-icon nzType=\"file-pdf\" nzTheme=\"outline\"></i>PDF</li> -->\r\n          <li nz-menu-item (click)=\"exportxls()\">\r\n            <i nz-icon nzType=\"file-excel\" nzTheme=\"outline\"></i>XLS\r\n          </li>\r\n        </ul>\r\n      </nz-dropdown-menu>\r\n    </button>\r\n\r\n    <button\r\n      *ngIf=\"showFiltersVisibleButton\"\r\n      nz-button\r\n      [nzType]=\"'primary'\"\r\n      (click)=\"toggleFiltersVisible()\"\r\n    >\r\n      <i nz-icon [nzType]=\"filtersVisible ? 'eye-invisible' : 'eye'\"> </i>\r\n      {{ \"Filters\" | dictionary | translate }}\r\n    </button>\r\n  </app-toolbar>\r\n</app-extra-title-tpl>\r\n\r\n<nz-modal\r\n  [nzVisible]=\"!!massActionResults.length\"\r\n  [nzTitle]=\"'ResultOfAction' | dictionary | translate\"\r\n  [nzOkText]=\"null\"\r\n  [nzCancelText]=\"'Close' | dictionary | translate\"\r\n  [nzMaskClosable]=\"true\"\r\n  [nzClassName]=\"'mass-action-results'\"\r\n  (nzOnCancel)=\"massActionResults = []\"\r\n>\r\n  <perfect-scrollbar\r\n    [config]=\"{ suppressScrollX: true }\"\r\n    class=\"mass-action-results__list\"\r\n  >\r\n    <p\r\n      *ngFor=\"let result of massActionResults\"\r\n      nz-typography\r\n      class=\"mass-action-results__item\"\r\n    >\r\n      <i\r\n        nz-icon\r\n        [nzType]=\"result.isOk ? 'check-circle' : 'close-circle'\"\r\n        [class._success]=\"result.isOk\"\r\n        [class._fail]=\"!result.isOk\"\r\n        class=\"mass-action-results__icon\"\r\n      ></i>\r\n      {{ result.message }}\r\n    </p>\r\n  </perfect-scrollbar>\r\n</nz-modal>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ViewPageResolver } from '@presentation/reservations/resolvers/view.page.resolver';\r\nimport { ListComponent } from './components/list/list.component';\r\nimport { ViewComponent } from './components/view/view.component';\r\nimport { TitleResolver } from '@presentation/reservations/resolvers/title.resolver';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: ':type',\r\n    children: [\r\n      {\r\n        path: '',\r\n        pathMatch: 'full',\r\n        component: ListComponent,\r\n        data: {\r\n          title: 'Рабочее место',\r\n          componentName: 'ReservationsListComponent',\r\n        },\r\n        resolve: {\r\n          title: TitleResolver,\r\n        },\r\n      },\r\n      {\r\n        path: 'create',\r\n        loadChildren: () =>\r\n          import('./reservation-create/reservation-create.module').then(\r\n            ({ ReservationCreateModule }) => ReservationCreateModule\r\n          ),\r\n      },\r\n      {\r\n        path: 'workplace',\r\n        loadChildren: () =>\r\n          import(\r\n            './reservation-workplace-create/reservation-workplace-create.module'\r\n          ).then(\r\n            ({ ReservationWorkplaceCreateModule }) =>\r\n              ReservationWorkplaceCreateModule\r\n          ),\r\n      },\r\n      {\r\n        path: 'view/:id',\r\n        component: ViewComponent,\r\n        data: {\r\n          showBackBtn: true,\r\n        },\r\n        resolve: {\r\n          title: ViewPageResolver,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    path: '',\r\n    pathMatch: 'full',\r\n    redirectTo: '/reservations/workplace',\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: '/reservations/workplace',\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ReservationsRoutingModule {}\r\n","import {Injectable, Injector} from '@angular/core';\r\nimport {Complete} from '@core/decorators/complete.decorator';\r\nimport {combineLatest, Observable, of, Subscription} from 'rxjs';\r\nimport {Params} from '@angular/router';\r\nimport {IList, IReservationsMeta} from '@presentation/reservations/models/list.model';\r\nimport {IListRow, IListRows, IReservationsActionParams} from '@base/list/models/list.model';\r\nimport {catchError, debounceTime, delay, filter, map, pluck, switchMap, tap} from 'rxjs/operators';\r\nimport {IListPaging} from '@base/list/models/list-paging.model';\r\nimport {IListSort} from '@base/list/models/list-sort.model';\r\nimport {Subscriptions} from '@core/decorators/subscriptions.decorator';\r\nimport {ActionParams, IActionNavigateParams, IActionRequestParams} from '@core/models/actions.model';\r\nimport {ReservationsMessagesService} from '@shared/messages/services/reservations-messages.service';\r\nimport {initQueryParams, mapDictionaryValues, mapStatusDictionary, maxFilterButtonVisibleWindowWidth, maxFilterHideWindowWith, prepareUrlQueryParams} from '@shared/common/utils/reservations.util';\r\nimport {BaseService} from '@shared/common/base/base.service';\r\nimport {QueryParamsBuilder} from '@shared/common/utils/query-params-builder.util';\r\nimport {IBodyQueryParams, IQueryParams, UrlQueryParams} from '@shared/common/models/query-params.model';\r\nimport {IFilterValues} from '@base/filters/filters.model';\r\nimport {StatusesService} from '@shared/dictionaries/services/statuses.service';\r\nimport {MeasurementsService} from '@shared/dictionaries/services/measurements.service';\r\nimport {UserService} from '@core/services/user.service';\r\nimport {MetaApiService} from '@shared/http/services/meta-api.service';\r\nimport {ReservationsApiService} from '@shared/http/services/reservations-api.service';\r\nimport {AppError} from '@core/models/app-errorl.model';\r\nimport {IWorkplaceReservation} from '@shared/http/models/database.model';\r\nimport {ReservationType} from '@shared/http/models/meta.model';\r\nimport {getMetaNameByReservationType, mapMassActionRequest, prepareMassActionRequest} from '@presentation/reservations/components/list/list.utils';\r\nimport {endOfMonth, startOfMonth} from 'date-fns';\r\nimport {IStatusesMap} from '@shared/dictionaries/models/statuses.model';\r\nimport {IWorkplaceReservationsMassActionRequest} from '@shared/http/models/request.model';\r\nimport {MessageService} from '@core/services/message.service';\r\nimport {IWorkplaceReservationsMassActionResponse, IWorkplaceReservationsMassActionResponseMeta} from '@shared/http/models/response.model';\r\nimport {IHttpResponse} from '@core/models/http.model';\r\nimport {mapRequestBody} from '@base/action/action.utils';\r\n\r\n@Injectable()\r\nexport class ListService extends BaseService {\r\n  private _htmlElement: HTMLElement = document.documentElement;\r\n  private _selectedRow: IListRow | null;\r\n  private _queryParamsBuilder: QueryParamsBuilder = QueryParamsBuilder.default();\r\n  private _previousType: string | null = null;\r\n\r\n  @Subscriptions('destroy')\r\n  private _subscriptions: Subscription;\r\n\r\n  public constructor(\r\n    protected injector: Injector,\r\n    private $messages: ReservationsMessagesService,\r\n    private $statuses: StatusesService,\r\n    private $measurements: MeasurementsService,\r\n    private $user: UserService,\r\n    private $metaApi: MetaApiService,\r\n    private $reservationsApi: ReservationsApiService,\r\n    private $message: MessageService\r\n  ) {\r\n    super(injector);\r\n    this._queryParamsBuilder.currentLang = this.$localization.currentLang;\r\n    this._queryParamsBuilder.dateFormat = this.filterDateFormat;\r\n  }\r\n\r\n  public get statusesMap(): IStatusesMap {\r\n    return this.$statuses.statusesMap;\r\n  }\r\n\r\n  private get clientWidth(): number {\r\n    return this._htmlElement.clientWidth;\r\n  }\r\n\r\n  public get showFiltersVisibleButton(): boolean {\r\n    return this.clientWidth < maxFilterButtonVisibleWindowWidth;\r\n  }\r\n\r\n  public get queryParams$(): Observable<IQueryParams> {\r\n    return this._queryParamsBuilder.paramsChange;\r\n  }\r\n\r\n  public get queryParams(): IQueryParams {\r\n    return this._queryParamsBuilder.params;\r\n  }\r\n\r\n  public get urlQueryParams(): UrlQueryParams {\r\n    return prepareUrlQueryParams(\r\n      this._queryParamsBuilder.urlQueryParams,\r\n      this.filterDateFormat,\r\n      this.$localization.currentLang\r\n    );\r\n  }\r\n\r\n  public get bodyQueryParams(): IBodyQueryParams {\r\n    return this._queryParamsBuilder.bodyQueryParams;\r\n  }\r\n\r\n  public get type$(): Observable<ReservationType> {\r\n    return this.routeParams$.pipe(pluck('type'));\r\n  }\r\n\r\n  public get list$(): Observable<IList> {\r\n    return this.reservationsMeta$.pipe(\r\n      switchMap((metaRes) =>\r\n        this.reservations$.pipe(map(dataRes => [metaRes, dataRes]))\r\n      ),\r\n      map(([meta, data]) => ({meta, data})),\r\n      switchMap(({meta, data}) => mapDictionaryValues(this.$dictionaries, meta as IReservationsMeta, data as IListRows)),\r\n      this.loadingOperator(false),\r\n      catchError((e) => {\r\n        console.log(e);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  public isFilterVisible(filterVisible: boolean): boolean {\r\n    return this.clientWidth < maxFilterHideWindowWith ? false : filterVisible;\r\n  }\r\n\r\n  public changePaging(paging: IListPaging): void {\r\n    this.updateQueryParams(paging);\r\n  }\r\n\r\n  public changeSort(sort: IListSort): void {\r\n    this.updateQueryParams(sort);\r\n  }\r\n\r\n  public changeFilters(filters: IFilterValues): void {\r\n    this._queryParamsBuilder.set({updateData: true});\r\n    this.updateQueryParams(filters);\r\n  }\r\n\r\n  public callAction({params, data}: IReservationsActionParams): void {\r\n    if (params?.route) {\r\n      this.callNavigationAction(params as IActionNavigateParams, data);\r\n    }\r\n\r\n    if (params?.url) {\r\n      this.callActionRequest(params as IActionRequestParams, data);\r\n    }\r\n  }\r\n\r\n  public callMassAction(actionParams: ActionParams, rows: IListRows): Observable<IWorkplaceReservationsMassActionResponseMeta[]> {\r\n    if (actionParams?.route) {\r\n      this.callNavigationAction(actionParams as IActionNavigateParams, rows[0] || {});\r\n      return of([]);\r\n    }\r\n\r\n    if (actionParams?.url) {\r\n      return this.callMassActionRequest(actionParams as IActionRequestParams, rows);\r\n    }\r\n  }\r\n\r\n  public selectRow(row: IListRow | null, type: ReservationType): void {\r\n    let id: any;\r\n\r\n    switch (type) {\r\n      case 'appointment':\r\n        id = row.appointmentId;\r\n        break;\r\n\r\n      default:\r\n        id = row.id;\r\n    }\r\n\r\n    id = encodeURIComponent(id);\r\n\r\n    this._selectedRow = row;\r\n    this.$nav.go(`view/${id}`, this.$route);\r\n  }\r\n\r\n  public createReservation(): void {\r\n    this.$nav.go('create', this.$route);\r\n  }\r\n\r\n  @Complete\r\n  public destroy(): void {\r\n    this._queryParamsBuilder.destroy();\r\n  }\r\n\r\n  private get filterDateFormat(): string {\r\n    return this.$measurements.getMeasurementByName('filterDate');\r\n  }\r\n\r\n  private get reservationsMeta$(): Observable<IReservationsMeta | AppError> {\r\n    return combineLatest([\r\n      this.type$.pipe(map(getMetaNameByReservationType)),\r\n      this.reset$,\r\n    ]).pipe(\r\n      this.readyOperator(),\r\n      this.resetErrorOperator(),\r\n      this.loadingOperator(true),\r\n      switchMap(([type]) =>\r\n        this.$metaApi.getMeta<IReservationsMeta>(type, this.$messages.loadingMetaErrorNotification)\r\n      ),\r\n      this.readyOperator(true),\r\n      filter((meta) => this.processMeta(meta)),\r\n      tap(() => this.updateQueryParams({}, false))\r\n    );\r\n  }\r\n\r\n  private get reservations$(): Observable<IWorkplaceReservation[]> {\r\n    return combineLatest([\r\n      this.type$,\r\n      this.routeQueryParams$,\r\n      this.reload$\r\n    ]).pipe(\r\n      filter(([, {updateData},]) => updateData === 'true'),\r\n      this.loadingOperator(true),\r\n      debounceTime(750),\r\n      switchMap(([type]) =>\r\n        this.$reservationsApi.getReservationsByType(type, this.bodyQueryParams)\r\n      ),\r\n      tap(() => this._queryParamsBuilder.setProperty('updateData', null))\r\n    );\r\n  }\r\n\r\n  private updateQueryParams(params: Params, update: boolean = true): void {\r\n    if (update) {\r\n      this._queryParamsBuilder.updateQueryParams(params);\r\n    }\r\n\r\n    this.$nav.go([], {queryParams: this.urlQueryParams});\r\n  }\r\n\r\n  private callNavigationAction(\r\n    {relativeRoute, route}: IActionNavigateParams,\r\n    data: Record<string, any>\r\n  ): void {\r\n    this.$nav.goToUrl(\r\n      this.$url.createUrl(route, data),\r\n      {\r\n        relativeTo: relativeRoute ? this.$route : null,\r\n        queryParams: {},\r\n      }\r\n    );\r\n  }\r\n\r\n  private callActionRequest(actionRequestParams: IActionRequestParams, data: Record<string, any>): void {\r\n    this\r\n      .actionRequest(actionRequestParams, data)\r\n      .subscribe((result) =>\r\n        this.finishCallAction(result)\r\n      );\r\n  }\r\n\r\n  private callMassActionRequest({url, method, body}: IActionRequestParams, reservations: IListRows): Observable<IWorkplaceReservationsMassActionResponseMeta[]> {\r\n    const requestData: IWorkplaceReservationsMassActionRequest = prepareMassActionRequest(reservations, body);\r\n\r\n    this.loading = true;\r\n\r\n    return this.$reservationsApi\r\n      .callReservationAction<IWorkplaceReservationsMassActionRequest, IWorkplaceReservationsMassActionResponse>(url, method, requestData, {})\r\n      .pipe(\r\n        tap(({success}) => this.finishCallAction(success)),\r\n        map((response: IHttpResponse<IWorkplaceReservationsMassActionResponse>) =>\r\n          mapMassActionRequest(response, reservations, this.$message)\r\n        )\r\n      );\r\n  }\r\n\r\n  private finishCallAction(result: boolean): void {\r\n    result ? this.reload() : this.loading = false;\r\n  }\r\n\r\n  private actionRequest(\r\n    {url, method, messages, body}: IActionRequestParams,\r\n    data: Record<string, any>\r\n  ): Observable<boolean> {\r\n    const requestData: Record<string, any> = mapRequestBody(data, body);\r\n\r\n    url = this.$url.createUrl(url, data);\r\n    messages = this.$messages.getActionNotificationsMessages(messages);\r\n\r\n    return of(url).pipe(\r\n      this.loadingOperator(true),\r\n      debounceTime(250),\r\n      switchMap((_url: string) =>\r\n        this.$reservationsApi.callReservationAction(_url, method, requestData, messages)\r\n      ),\r\n      delay(1000),\r\n      pluck('success')\r\n    );\r\n  }\r\n\r\n\r\n  private processMeta(meta: IReservationsMeta | AppError): meta is IReservationsMeta {\r\n    const type: string = this.routeParams.type;\r\n    const filters: Record<string, any> = {};\r\n    const routeQueryParams: Record<string, any> = this._previousType && this._previousType !== type\r\n      ?{}\r\n      : this.routeQueryParams;\r\n\r\n    if (meta instanceof AppError) {\r\n      this.error = this.$messages.getLoadingMetaError(meta);\r\n      this.loading = false;\r\n      return false;\r\n    }\r\n\r\n    switch (this.$route.snapshot.params.type) {\r\n      case 'workplace':\r\n        filters.labelId = this.$user.info.id;\r\n        break;\r\n\r\n      case 'parking':\r\n        filters.labelIds = [this.$user.info.id];\r\n        break;\r\n\r\n      case 'appointment':\r\n        filters.requestAppointmentDateFrom = startOfMonth(new Date());\r\n        filters.requestAppointmentDateTo = endOfMonth(new Date());\r\n        break;\r\n    }\r\n\r\n    initQueryParams(this._queryParamsBuilder, meta, routeQueryParams, filters);\r\n    mapStatusDictionary(meta.columns, this.$statuses.statuses);\r\n\r\n    this._previousType = this.routeParams.type;\r\n\r\n    return true;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}