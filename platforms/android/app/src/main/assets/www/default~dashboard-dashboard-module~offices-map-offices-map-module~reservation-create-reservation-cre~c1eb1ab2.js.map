{"version":3,"sources":["./src/app/composite/workplace-card/workplace-card.module.ts","./src/app/composite/workplace-card/workplace-card.component.ts","./src/app/composite/workplace-card/workplace-card.component.html","./src/app/composite/workplace-card/workplace-card.utils.ts","./src/app/composite/workplace-card/workplace-card.service.ts"],"names":[],"mappings":"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","file":"default~dashboard-dashboard-module~offices-map-offices-map-module~reservation-create-reservation-cre~c1eb1ab2.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NzButtonModule } from 'ng-zorro-antd/button';\r\nimport { NzIconModule } from 'ng-zorro-antd/icon';\r\nimport { WorkplaceCardComponent } from './workplace-card.component';\r\nimport { CardModule } from '@base/card/card.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [WorkplaceCardComponent],\r\n  exports: [WorkplaceCardComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CardModule,\r\n    NzButtonModule,\r\n    NzIconModule,\r\n  ]\r\n})\r\nexport class WorkplaceCardModule {}\r\n","import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  Input,\r\n  ChangeDetectorRef,\r\n  Output,\r\n  EventEmitter,\r\n} from '@angular/core';\r\nimport { WorkplaceCardService } from '@composite/workplace-card/workplace-card.service';\r\nimport { MessagesService } from '@core/services/messages.service';\r\nimport { MapService } from '@base/map/map.service';\r\nimport { ICard } from '@base/card/card.model';\r\nimport { IWorkplace } from '@shared/http/models/database.model';\r\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\r\nimport { Subscriptions } from '@core/decorators/subscriptions.decorator';\r\nimport { filter } from 'rxjs/operators';\r\nimport { ConfigService } from '@src/app/core/services/config.service';\r\n\r\n@Component({\r\n  selector: 'app-workplace-card',\r\n  templateUrl: './workplace-card.component.html',\r\n  styleUrls: ['./workplace-card.component.less'],\r\n  providers: [WorkplaceCardService],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class WorkplaceCardComponent {\r\n  private _workplaceId$: BehaviorSubject<number> = new BehaviorSubject(null);\r\n  private _workplace: IWorkplace;\r\n  aplanaUrl: string;\r\n  nornikAplana = false;\r\n  card$: Observable<ICard>;\r\n  @Subscriptions() subs: Subscription;\r\n\r\n  @Input() readOnly: boolean = false;\r\n  @Input() disabled: boolean = false;\r\n  @Input()\r\n  set workplace(value: IWorkplace) {\r\n    this._workplace = value;\r\n  }\r\n  get workplace(): IWorkplace {\r\n    return this._workplace;\r\n  }\r\n  @Input() type: 'workplace' | 'appointment' | 'parking' = 'workplace';\r\n  @Input()\r\n  set workplaceId(value: number) {\r\n    this._workplaceId$.next(value);\r\n  }\r\n  get workplaceId(): number {\r\n    return this._workplaceId$.getValue();\r\n  }\r\n  @Input() hideReserveBtn: boolean = false;\r\n  @Input() calendarLink: string;\r\n  @Input() showPermanentAssignment: boolean = false;\r\n\r\n  @Output() readonly reservation = new EventEmitter<number>();\r\n\r\n  constructor(\r\n    private $service: WorkplaceCardService,\r\n    private $messages: MessagesService,\r\n    private $map: MapService,\r\n    private $config: ConfigService\r\n  ) {\r\n    this.card$ = $service.default;\r\n    this._watchPlaceId();\r\n  }\r\n\r\n  reservationPlace(): void {\r\n    this.reservation.emit(this.workplaceId);\r\n  }\r\n\r\n  close(): void {\r\n    this.$map.hidePopover$.next();\r\n  }\r\n\r\n  private _watchPlaceId(): void {\r\n    this.nornikAplana = this.$config.get<string>('nornikAplana') === 'true';\r\n    this.aplanaUrl = this.$config.get<string>('aplanaUrl');\r\n    this.subs = this._workplaceId$\r\n      .pipe(filter((id) => Boolean(id)))\r\n      .subscribe((id) => {\r\n        switch (this.type) {\r\n          case 'appointment':\r\n            this.card$ = this.$service.getRoomCard$(id);\r\n            break;\r\n          case 'parking':\r\n            this.card$ = this.$service.getParkingLotCard$(\r\n              id,\r\n              this.showPermanentAssignment\r\n            );\r\n            break;\r\n          case 'workplace':\r\n          default:\r\n            this.card$ = this.$service.getWorkplaceCard$(\r\n              id,\r\n              this.showPermanentAssignment\r\n            );\r\n        }\r\n      });\r\n  }\r\n}\r\n","<section class=\"workspace-card\">\r\n  <app-card\r\n    *ngIf=\"card$ | async as card\"\r\n    [title]=\"card.title\"\r\n    [image]=\"card.image\"\r\n    [width]=\"card.width\"\r\n    [descriptionList]=\"card.descriptionList\"\r\n    [tags]=\"card.tags\"\r\n    [calendarLink]=\"type === 'appointment' ? calendarLink : null\"\r\n  ></app-card>\r\n  <ng-container *ngIf=\"nornikAplana && readOnly; else notAplanaReadOnly\">\r\n    <div class=\"buttons\">\r\n      <a\r\n         nz-button\r\n        nzType=\"primary\"\r\n        [href]=\"aplanaUrl\"\r\n        target=\"_blank\"\r\n        >Внешняя система бронирования</a\r\n      >\r\n    </div>\r\n  </ng-container>\r\n  <ng-template #notAplanaReadOnly>\r\n    <ng-container *ngIf=\"hideReserveBtn; else withBtn\">\r\n      <div [style.min-width]=\"'135px'\" [style.height]=\"'1px'\"></div>\r\n    </ng-container>\r\n    <ng-template #withBtn>\r\n      <div *ngIf=\"!hideReserveBtn\" class=\"buttons\">\r\n        <button\r\n          nz-button\r\n          nzType=\"primary\"\r\n          [disabled]=\"disabled\"\r\n          (click)=\"reservationPlace()\"\r\n        >\r\n          Забронировать\r\n        </button>\r\n      </div>\r\n    </ng-template>\r\n  </ng-template>\r\n  <i nz-icon nzType=\"close\" class=\"close-icon\" (click)=\"close()\"></i>\r\n</section>\r\n","import {\r\n  IFloor,\r\n  IRoom,\r\n  ITag,\r\n  IUser,\r\n  IWorkplace,\r\n  IWorkplaceGroup,\r\n} from '@shared/http/models/database.model';\r\nimport { IDescription } from '@base/card/card.model';\r\nimport { getTypeName } from '@shared/common/utils/workplace.utils';\r\n\r\nexport const getWorkplaceDescriptionList = (\r\n  place: IWorkplace,\r\n  floor: IFloor,\r\n  workplaceGroupsNames: string[],\r\n  reservationData: { label: IUser; dateTimeFrom: string; dateTimeTo: string },\r\n  labelIdPermanentAssignment: IUser\r\n): IDescription[] => {\r\n  let result: IDescription[] = [\r\n    {\r\n      name: 'Тип',\r\n      value: getTypeName(place.type),\r\n    },\r\n    {\r\n      name: 'Номер',\r\n      value: place.uniqueCode,\r\n    },\r\n    {\r\n      name: 'Помещение',\r\n      value: floor.name,\r\n    },\r\n  ];\r\n  if (reservationData && reservationData.label) {\r\n    result.push(\r\n      {\r\n        name: 'Забронировал',\r\n        value: reservationData.label.name,\r\n        link: `team/profiles/${reservationData.label.id}`,\r\n      },\r\n      {\r\n        name: 'Время',\r\n        value: `${new Date(\r\n          reservationData.dateTimeFrom\r\n        ).toLocaleString()} — ${new Date(\r\n          reservationData.dateTimeTo\r\n        ).toLocaleString()}`,\r\n      }\r\n    );\r\n  }\r\n  if (labelIdPermanentAssignment) {\r\n    result.push({\r\n      name: 'Закреплено',\r\n      value: labelIdPermanentAssignment.name,\r\n      link: `team/profiles/${labelIdPermanentAssignment.id}`,\r\n    });\r\n  }\r\n  if (workplaceGroupsNames && workplaceGroupsNames.length > 0) {\r\n    result.push({\r\n      name: 'Группа РМ',\r\n      value: workplaceGroupsNames.join(', '),\r\n    });\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const getParkDescriptionList = (\r\n  place: IWorkplace,\r\n  floor: IFloor,\r\n  labelIdPermanentAssignment: IUser\r\n): IDescription[] => {\r\n  let result: IDescription[] = [\r\n    {\r\n      name: 'Тип',\r\n      value: getTypeName(place.type),\r\n    },\r\n    {\r\n      name: 'Номер',\r\n      value: place.uniqueCode,\r\n    },\r\n    {\r\n      name: 'Помещение',\r\n      value: floor.name,\r\n    },\r\n  ];\r\n  if (labelIdPermanentAssignment) {\r\n    result.push({\r\n      name: 'Закреплено',\r\n      value: labelIdPermanentAssignment.name,\r\n      link: `team/profiles/${labelIdPermanentAssignment.id}`,\r\n    });\r\n  }\r\n  return result;\r\n};\r\nexport const getRoomsDescriptionList = (\r\n  place: IRoom,\r\n  floor: IFloor\r\n): IDescription[] => {\r\n  return [\r\n    {\r\n      name: 'Количество мест',\r\n      value: `${place.seatCount}`,\r\n    },\r\n    {\r\n      name: 'Помещение',\r\n      value: floor.name,\r\n    },\r\n  ];\r\n};\r\nexport const getTags = (ids: number[], tags: ITag[]): string[] => {\r\n  return tags.filter((t) => ids.includes(t.id)).map((tag) => tag.name);\r\n};\r\nexport const getWorkplaceGroupsNames = (\r\n  ids: number[],\r\n  workplaceGroups: IWorkplaceGroup[]\r\n): string[] => {\r\n  return workplaceGroups\r\n    .filter((wG) => ids.includes(wG.id))\r\n    .map((wG) => wG.name);\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { DictionariesService } from '@shared/dictionaries/dictionaries.service';\r\nimport { ICard } from '@base/card/card.model';\r\nimport { map, switchMap, take } from 'rxjs/operators';\r\nimport {\r\n  IFloor,\r\n  IRoom,\r\n  ITag,\r\n  IUser,\r\n  IWorkplace,\r\n  IWorkplaceGroup,\r\n} from '@shared/http/models/database.model';\r\nimport { DEFAULT_WORKPLACE_CARD } from '@shared/http/utils/images.const';\r\nimport {\r\n  getWorkplaceDescriptionList,\r\n  getTags,\r\n  getRoomsDescriptionList,\r\n  getWorkplaceGroupsNames,\r\n  getParkDescriptionList,\r\n} from './workplace-card.utils';\r\nimport { ReservationsApiService } from '@src/app/shared/http/services/reservations-api.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport { MeasurementsService } from '@src/app/shared/dictionaries/services/measurements.service';\r\n\r\n@Injectable()\r\nexport class WorkplaceCardService {\r\n  constructor(\r\n    private $dictionary: DictionariesService,\r\n    private $reservationsApi: ReservationsApiService,\r\n    private datePipe: DatePipe,\r\n    private $measurements: MeasurementsService\r\n  ) {}\r\n\r\n  getWorkplaceCard$(\r\n    id: number,\r\n    showPermanentAssignment: boolean\r\n  ): Observable<ICard> {\r\n    return this.$dictionary\r\n      .getDictionaryItemByKey<IWorkplace>('workplaces', id)\r\n      .pipe(\r\n        switchMap((w) => {\r\n          const now = new Date();\r\n          return forkJoin({\r\n            workplace: of(w),\r\n            floor: this.$dictionary.getDictionaryItemByKey<IFloor>(\r\n              'floorMaps',\r\n              w.floorMapId\r\n            ),\r\n            labelIdPermanentAssignment:\r\n              w.labelIdPermanentAssignment > 0 && showPermanentAssignment\r\n                ? this.$dictionary.getDictionaryItemByKey<IUser>(\r\n                    'labels',\r\n                    w.labelIdPermanentAssignment\r\n                  )\r\n                : of(undefined),\r\n            tags: this.$dictionary.getDictionary<ITag[]>('tags'),\r\n            workplaceGroups:\r\n              this.$dictionary.getDictionary<IWorkplaceGroup[]>(\r\n                'workplaceGroups'\r\n              ),\r\n            reservationData: this.$reservationsApi\r\n              .getWorkplaceReservations({\r\n                workplaceId: w.id,\r\n                dateTimeFrom: this._getApiDate(now),\r\n                dateTimeTo: this._getApiDate(now),\r\n              })\r\n              .pipe(\r\n                switchMap((r) => {\r\n                  return forkJoin({\r\n                    dateTimeFrom:\r\n                      r && r[0] ? of(r[0].dateTimeFrom) : of(undefined),\r\n                    dateTimeTo: r && r[0] ? of(r[0].dateTimeTo) : of(undefined),\r\n                    label:\r\n                      r && r[0]\r\n                        ? this.$dictionary.getDictionaryItemByKey<IUser>(\r\n                            'labels',\r\n                            r[0].labelId\r\n                          )\r\n                        : of(undefined),\r\n                  });\r\n                }),\r\n                take(1)\r\n              ),\r\n          });\r\n        }),\r\n        map(\r\n          ({\r\n            workplace,\r\n            floor,\r\n            tags,\r\n            workplaceGroups,\r\n            reservationData,\r\n            labelIdPermanentAssignment,\r\n          }) => {\r\n            return {\r\n              title: workplace.name,\r\n              width: '280px',\r\n              image: DEFAULT_WORKPLACE_CARD,\r\n              descriptionList: getWorkplaceDescriptionList(\r\n                workplace,\r\n                floor,\r\n                getWorkplaceGroupsNames(\r\n                  workplace.workplaceGroups,\r\n                  workplaceGroups\r\n                ),\r\n                reservationData,\r\n                labelIdPermanentAssignment\r\n              ),\r\n              tags: getTags(workplace.tags, tags),\r\n            };\r\n          }\r\n        ),\r\n        take(1)\r\n      );\r\n  }\r\n\r\n  getParkingLotCard$(\r\n    id: number,\r\n    showPermanentAssignment: boolean\r\n  ): Observable<ICard> {\r\n    return this.$dictionary\r\n      .getDictionaryItemByKey<IWorkplace>('parkingLots', id)\r\n      .pipe(\r\n        switchMap((w) => {\r\n          w.type = 'PARKING_LOT';\r\n          return forkJoin({\r\n            workplace: of(w),\r\n            floor: this.$dictionary.getDictionaryItemByKey<IFloor>(\r\n              'floorMaps',\r\n              w.floorMapId\r\n            ),\r\n            tags: this.$dictionary.getDictionary<ITag[]>('tags'),\r\n            labelIdPermanentAssignment:\r\n              w.labelIdPermanentAssignment > 0 && showPermanentAssignment\r\n                ? this.$dictionary.getDictionaryItemByKey<IUser>(\r\n                    'labels',\r\n                    w.labelIdPermanentAssignment\r\n                  )\r\n                : of(undefined),\r\n          });\r\n        }),\r\n        map(({ workplace, floor, tags, labelIdPermanentAssignment }) => {\r\n          return {\r\n            title: workplace.name,\r\n            width: '280px',\r\n            image: DEFAULT_WORKPLACE_CARD,\r\n            descriptionList: getParkDescriptionList(\r\n              workplace,\r\n              floor,\r\n              labelIdPermanentAssignment\r\n            ),\r\n            tags: getTags(workplace.tags, tags),\r\n          };\r\n        }),\r\n        take(1)\r\n      );\r\n    // @Kholodov Проверить для парковки\r\n  }\r\n\r\n  getRoomCard$(id: number): Observable<ICard> {\r\n    return this.$dictionary.getDictionaryItemByKey<IRoom>('rooms', id).pipe(\r\n      switchMap((r) => {\r\n        return forkJoin({\r\n          room: of(r),\r\n          floor: this.$dictionary.getDictionaryItemByKey<IFloor>(\r\n            'floorMaps',\r\n            r.floorMapId\r\n          ),\r\n          tags: this.$dictionary.getDictionary<ITag[]>('tags'),\r\n        });\r\n      }),\r\n      map(({ room, floor, tags }) => {\r\n        return {\r\n          title: room.name,\r\n          width: '280px',\r\n          image: DEFAULT_WORKPLACE_CARD,\r\n          descriptionList: getRoomsDescriptionList(room, floor),\r\n          tags: getTags(room.tags, tags),\r\n        };\r\n      }),\r\n      take(1)\r\n    );\r\n  }\r\n\r\n  get default(): Observable<ICard> {\r\n    return of({\r\n      title: 'Example',\r\n      width: '280px',\r\n      descriptionList: [],\r\n      tags: [],\r\n      image: DEFAULT_WORKPLACE_CARD,\r\n    });\r\n  }\r\n\r\n  private _getApiDate(date: Date): string {\r\n    return this.datePipe.transform(\r\n      date,\r\n      this.$measurements.getMeasurementByName('filterDate')\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}